/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.expert.service.base;

import com.justonetech.expert.model.Gzjl;
import com.justonetech.expert.service.GzjlLocalService;
import com.justonetech.expert.service.persistence.ExpertPersistence;
import com.justonetech.expert.service.persistence.GzjlPersistence;
import com.justonetech.expert.service.persistence.XlxxPersistence;
import com.justonetech.expert.service.persistence.ZqtzjkrzqkPersistence;
import com.justonetech.expert.service.persistence.ZysqlbPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the gzjl local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.justonetech.expert.service.impl.GzjlLocalServiceImpl}.
 * </p>
 *
 * @author fanqi
 * @see com.justonetech.expert.service.impl.GzjlLocalServiceImpl
 * @see com.justonetech.expert.service.GzjlLocalServiceUtil
 * @generated
 */
public abstract class GzjlLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements GzjlLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.justonetech.expert.service.GzjlLocalServiceUtil} to access the gzjl local service.
	 */

	/**
	 * Adds the gzjl to the database. Also notifies the appropriate model listeners.
	 *
	 * @param gzjl the gzjl
	 * @return the gzjl that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Gzjl addGzjl(Gzjl gzjl) throws SystemException {
		gzjl.setNew(true);

		return gzjlPersistence.update(gzjl);
	}

	/**
	 * Creates a new gzjl with the primary key. Does not add the gzjl to the database.
	 *
	 * @param GzjlId the primary key for the new gzjl
	 * @return the new gzjl
	 */
	@Override
	public Gzjl createGzjl(long GzjlId) {
		return gzjlPersistence.create(GzjlId);
	}

	/**
	 * Deletes the gzjl with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param GzjlId the primary key of the gzjl
	 * @return the gzjl that was removed
	 * @throws PortalException if a gzjl with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Gzjl deleteGzjl(long GzjlId) throws PortalException, SystemException {
		return gzjlPersistence.remove(GzjlId);
	}

	/**
	 * Deletes the gzjl from the database. Also notifies the appropriate model listeners.
	 *
	 * @param gzjl the gzjl
	 * @return the gzjl that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Gzjl deleteGzjl(Gzjl gzjl) throws SystemException {
		return gzjlPersistence.remove(gzjl);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Gzjl.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return gzjlPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.justonetech.expert.model.impl.GzjlModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return gzjlPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.justonetech.expert.model.impl.GzjlModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return gzjlPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return gzjlPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return gzjlPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Gzjl fetchGzjl(long GzjlId) throws SystemException {
		return gzjlPersistence.fetchByPrimaryKey(GzjlId);
	}

	/**
	 * Returns the gzjl with the primary key.
	 *
	 * @param GzjlId the primary key of the gzjl
	 * @return the gzjl
	 * @throws PortalException if a gzjl with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Gzjl getGzjl(long GzjlId) throws PortalException, SystemException {
		return gzjlPersistence.findByPrimaryKey(GzjlId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return gzjlPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the gzjls.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.justonetech.expert.model.impl.GzjlModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of gzjls
	 * @param end the upper bound of the range of gzjls (not inclusive)
	 * @return the range of gzjls
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Gzjl> getGzjls(int start, int end) throws SystemException {
		return gzjlPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of gzjls.
	 *
	 * @return the number of gzjls
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getGzjlsCount() throws SystemException {
		return gzjlPersistence.countAll();
	}

	/**
	 * Updates the gzjl in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param gzjl the gzjl
	 * @return the gzjl that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Gzjl updateGzjl(Gzjl gzjl) throws SystemException {
		return gzjlPersistence.update(gzjl);
	}

	/**
	 * Returns the expert local service.
	 *
	 * @return the expert local service
	 */
	public com.justonetech.expert.service.ExpertLocalService getExpertLocalService() {
		return expertLocalService;
	}

	/**
	 * Sets the expert local service.
	 *
	 * @param expertLocalService the expert local service
	 */
	public void setExpertLocalService(
		com.justonetech.expert.service.ExpertLocalService expertLocalService) {
		this.expertLocalService = expertLocalService;
	}

	/**
	 * Returns the expert persistence.
	 *
	 * @return the expert persistence
	 */
	public ExpertPersistence getExpertPersistence() {
		return expertPersistence;
	}

	/**
	 * Sets the expert persistence.
	 *
	 * @param expertPersistence the expert persistence
	 */
	public void setExpertPersistence(ExpertPersistence expertPersistence) {
		this.expertPersistence = expertPersistence;
	}

	/**
	 * Returns the gzjl local service.
	 *
	 * @return the gzjl local service
	 */
	public com.justonetech.expert.service.GzjlLocalService getGzjlLocalService() {
		return gzjlLocalService;
	}

	/**
	 * Sets the gzjl local service.
	 *
	 * @param gzjlLocalService the gzjl local service
	 */
	public void setGzjlLocalService(
		com.justonetech.expert.service.GzjlLocalService gzjlLocalService) {
		this.gzjlLocalService = gzjlLocalService;
	}

	/**
	 * Returns the gzjl persistence.
	 *
	 * @return the gzjl persistence
	 */
	public GzjlPersistence getGzjlPersistence() {
		return gzjlPersistence;
	}

	/**
	 * Sets the gzjl persistence.
	 *
	 * @param gzjlPersistence the gzjl persistence
	 */
	public void setGzjlPersistence(GzjlPersistence gzjlPersistence) {
		this.gzjlPersistence = gzjlPersistence;
	}

	/**
	 * Returns the xlxx local service.
	 *
	 * @return the xlxx local service
	 */
	public com.justonetech.expert.service.XlxxLocalService getXlxxLocalService() {
		return xlxxLocalService;
	}

	/**
	 * Sets the xlxx local service.
	 *
	 * @param xlxxLocalService the xlxx local service
	 */
	public void setXlxxLocalService(
		com.justonetech.expert.service.XlxxLocalService xlxxLocalService) {
		this.xlxxLocalService = xlxxLocalService;
	}

	/**
	 * Returns the xlxx persistence.
	 *
	 * @return the xlxx persistence
	 */
	public XlxxPersistence getXlxxPersistence() {
		return xlxxPersistence;
	}

	/**
	 * Sets the xlxx persistence.
	 *
	 * @param xlxxPersistence the xlxx persistence
	 */
	public void setXlxxPersistence(XlxxPersistence xlxxPersistence) {
		this.xlxxPersistence = xlxxPersistence;
	}

	/**
	 * Returns the zqtzjkrzqk local service.
	 *
	 * @return the zqtzjkrzqk local service
	 */
	public com.justonetech.expert.service.ZqtzjkrzqkLocalService getZqtzjkrzqkLocalService() {
		return zqtzjkrzqkLocalService;
	}

	/**
	 * Sets the zqtzjkrzqk local service.
	 *
	 * @param zqtzjkrzqkLocalService the zqtzjkrzqk local service
	 */
	public void setZqtzjkrzqkLocalService(
		com.justonetech.expert.service.ZqtzjkrzqkLocalService zqtzjkrzqkLocalService) {
		this.zqtzjkrzqkLocalService = zqtzjkrzqkLocalService;
	}

	/**
	 * Returns the zqtzjkrzqk persistence.
	 *
	 * @return the zqtzjkrzqk persistence
	 */
	public ZqtzjkrzqkPersistence getZqtzjkrzqkPersistence() {
		return zqtzjkrzqkPersistence;
	}

	/**
	 * Sets the zqtzjkrzqk persistence.
	 *
	 * @param zqtzjkrzqkPersistence the zqtzjkrzqk persistence
	 */
	public void setZqtzjkrzqkPersistence(
		ZqtzjkrzqkPersistence zqtzjkrzqkPersistence) {
		this.zqtzjkrzqkPersistence = zqtzjkrzqkPersistence;
	}

	/**
	 * Returns the zysqlb local service.
	 *
	 * @return the zysqlb local service
	 */
	public com.justonetech.expert.service.ZysqlbLocalService getZysqlbLocalService() {
		return zysqlbLocalService;
	}

	/**
	 * Sets the zysqlb local service.
	 *
	 * @param zysqlbLocalService the zysqlb local service
	 */
	public void setZysqlbLocalService(
		com.justonetech.expert.service.ZysqlbLocalService zysqlbLocalService) {
		this.zysqlbLocalService = zysqlbLocalService;
	}

	/**
	 * Returns the zysqlb persistence.
	 *
	 * @return the zysqlb persistence
	 */
	public ZysqlbPersistence getZysqlbPersistence() {
		return zysqlbPersistence;
	}

	/**
	 * Sets the zysqlb persistence.
	 *
	 * @param zysqlbPersistence the zysqlb persistence
	 */
	public void setZysqlbPersistence(ZysqlbPersistence zysqlbPersistence) {
		this.zysqlbPersistence = zysqlbPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.justonetech.expert.model.Gzjl",
			gzjlLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.justonetech.expert.model.Gzjl");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Gzjl.class;
	}

	protected String getModelClassName() {
		return Gzjl.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = gzjlPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.justonetech.expert.service.ExpertLocalService.class)
	protected com.justonetech.expert.service.ExpertLocalService expertLocalService;
	@BeanReference(type = ExpertPersistence.class)
	protected ExpertPersistence expertPersistence;
	@BeanReference(type = com.justonetech.expert.service.GzjlLocalService.class)
	protected com.justonetech.expert.service.GzjlLocalService gzjlLocalService;
	@BeanReference(type = GzjlPersistence.class)
	protected GzjlPersistence gzjlPersistence;
	@BeanReference(type = com.justonetech.expert.service.XlxxLocalService.class)
	protected com.justonetech.expert.service.XlxxLocalService xlxxLocalService;
	@BeanReference(type = XlxxPersistence.class)
	protected XlxxPersistence xlxxPersistence;
	@BeanReference(type = com.justonetech.expert.service.ZqtzjkrzqkLocalService.class)
	protected com.justonetech.expert.service.ZqtzjkrzqkLocalService zqtzjkrzqkLocalService;
	@BeanReference(type = ZqtzjkrzqkPersistence.class)
	protected ZqtzjkrzqkPersistence zqtzjkrzqkPersistence;
	@BeanReference(type = com.justonetech.expert.service.ZysqlbLocalService.class)
	protected com.justonetech.expert.service.ZysqlbLocalService zysqlbLocalService;
	@BeanReference(type = ZysqlbPersistence.class)
	protected ZysqlbPersistence zysqlbPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private GzjlLocalServiceClpInvoker _clpInvoker = new GzjlLocalServiceClpInvoker();
}