/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.expert.model.impl;

import com.justonetech.expert.model.Gzjl;
import com.justonetech.expert.model.GzjlModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Gzjl service. Represents a row in the &quot;expert_Gzjl&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.expert.model.GzjlModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GzjlImpl}.
 * </p>
 *
 * @author fanqi
 * @see GzjlImpl
 * @see com.justonetech.expert.model.Gzjl
 * @see com.justonetech.expert.model.GzjlModel
 * @generated
 */
public class GzjlModelImpl extends BaseModelImpl<Gzjl> implements GzjlModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gzjl model instance should use the {@link com.justonetech.expert.model.Gzjl} interface instead.
	 */
	public static final String TABLE_NAME = "expert_Gzjl";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GzjlId", Types.BIGINT },
			{ "expertId", Types.BIGINT },
			{ "gzdw", Types.VARCHAR },
			{ "qzny", Types.VARCHAR },
			{ "cszyzygz", Types.VARCHAR },
			{ "zw", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table expert_Gzjl (GzjlId LONG not null primary key,expertId LONG,gzdw VARCHAR(75) null,qzny VARCHAR(75) null,cszyzygz VARCHAR(75) null,zw VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table expert_Gzjl";
	public static final String ORDER_BY_JPQL = " ORDER BY gzjl.GzjlId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY expert_Gzjl.GzjlId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.expert.model.Gzjl"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.expert.model.Gzjl"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.expert.model.Gzjl"));

	public GzjlModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _GzjlId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGzjlId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _GzjlId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Gzjl.class;
	}

	@Override
	public String getModelClassName() {
		return Gzjl.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("GzjlId", getGzjlId());
		attributes.put("expertId", getExpertId());
		attributes.put("gzdw", getGzdw());
		attributes.put("qzny", getQzny());
		attributes.put("cszyzygz", getCszyzygz());
		attributes.put("zw", getZw());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long GzjlId = (Long)attributes.get("GzjlId");

		if (GzjlId != null) {
			setGzjlId(GzjlId);
		}

		Long expertId = (Long)attributes.get("expertId");

		if (expertId != null) {
			setExpertId(expertId);
		}

		String gzdw = (String)attributes.get("gzdw");

		if (gzdw != null) {
			setGzdw(gzdw);
		}

		String qzny = (String)attributes.get("qzny");

		if (qzny != null) {
			setQzny(qzny);
		}

		String cszyzygz = (String)attributes.get("cszyzygz");

		if (cszyzygz != null) {
			setCszyzygz(cszyzygz);
		}

		String zw = (String)attributes.get("zw");

		if (zw != null) {
			setZw(zw);
		}
	}

	@Override
	public long getGzjlId() {
		return _GzjlId;
	}

	@Override
	public void setGzjlId(long GzjlId) {
		_GzjlId = GzjlId;
	}

	@Override
	public long getExpertId() {
		return _expertId;
	}

	@Override
	public void setExpertId(long expertId) {
		_expertId = expertId;
	}

	@Override
	public String getGzdw() {
		if (_gzdw == null) {
			return StringPool.BLANK;
		}
		else {
			return _gzdw;
		}
	}

	@Override
	public void setGzdw(String gzdw) {
		_gzdw = gzdw;
	}

	@Override
	public String getQzny() {
		if (_qzny == null) {
			return StringPool.BLANK;
		}
		else {
			return _qzny;
		}
	}

	@Override
	public void setQzny(String qzny) {
		_qzny = qzny;
	}

	@Override
	public String getCszyzygz() {
		if (_cszyzygz == null) {
			return StringPool.BLANK;
		}
		else {
			return _cszyzygz;
		}
	}

	@Override
	public void setCszyzygz(String cszyzygz) {
		_cszyzygz = cszyzygz;
	}

	@Override
	public String getZw() {
		if (_zw == null) {
			return StringPool.BLANK;
		}
		else {
			return _zw;
		}
	}

	@Override
	public void setZw(String zw) {
		_zw = zw;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Gzjl.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Gzjl toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Gzjl)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GzjlImpl gzjlImpl = new GzjlImpl();

		gzjlImpl.setGzjlId(getGzjlId());
		gzjlImpl.setExpertId(getExpertId());
		gzjlImpl.setGzdw(getGzdw());
		gzjlImpl.setQzny(getQzny());
		gzjlImpl.setCszyzygz(getCszyzygz());
		gzjlImpl.setZw(getZw());

		gzjlImpl.resetOriginalValues();

		return gzjlImpl;
	}

	@Override
	public int compareTo(Gzjl gzjl) {
		int value = 0;

		if (getGzjlId() < gzjl.getGzjlId()) {
			value = -1;
		}
		else if (getGzjlId() > gzjl.getGzjlId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Gzjl)) {
			return false;
		}

		Gzjl gzjl = (Gzjl)obj;

		long primaryKey = gzjl.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Gzjl> toCacheModel() {
		GzjlCacheModel gzjlCacheModel = new GzjlCacheModel();

		gzjlCacheModel.GzjlId = getGzjlId();

		gzjlCacheModel.expertId = getExpertId();

		gzjlCacheModel.gzdw = getGzdw();

		String gzdw = gzjlCacheModel.gzdw;

		if ((gzdw != null) && (gzdw.length() == 0)) {
			gzjlCacheModel.gzdw = null;
		}

		gzjlCacheModel.qzny = getQzny();

		String qzny = gzjlCacheModel.qzny;

		if ((qzny != null) && (qzny.length() == 0)) {
			gzjlCacheModel.qzny = null;
		}

		gzjlCacheModel.cszyzygz = getCszyzygz();

		String cszyzygz = gzjlCacheModel.cszyzygz;

		if ((cszyzygz != null) && (cszyzygz.length() == 0)) {
			gzjlCacheModel.cszyzygz = null;
		}

		gzjlCacheModel.zw = getZw();

		String zw = gzjlCacheModel.zw;

		if ((zw != null) && (zw.length() == 0)) {
			gzjlCacheModel.zw = null;
		}

		return gzjlCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{GzjlId=");
		sb.append(getGzjlId());
		sb.append(", expertId=");
		sb.append(getExpertId());
		sb.append(", gzdw=");
		sb.append(getGzdw());
		sb.append(", qzny=");
		sb.append(getQzny());
		sb.append(", cszyzygz=");
		sb.append(getCszyzygz());
		sb.append(", zw=");
		sb.append(getZw());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.expert.model.Gzjl");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>GzjlId</column-name><column-value><![CDATA[");
		sb.append(getGzjlId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expertId</column-name><column-value><![CDATA[");
		sb.append(getExpertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gzdw</column-name><column-value><![CDATA[");
		sb.append(getGzdw());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qzny</column-name><column-value><![CDATA[");
		sb.append(getQzny());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cszyzygz</column-name><column-value><![CDATA[");
		sb.append(getCszyzygz());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zw</column-name><column-value><![CDATA[");
		sb.append(getZw());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Gzjl.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Gzjl.class };
	private long _GzjlId;
	private long _expertId;
	private String _gzdw;
	private String _qzny;
	private String _cszyzygz;
	private String _zw;
	private Gzjl _escapedModel;
}