/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.expert.model.impl;

import com.justonetech.expert.model.Zysqlb;
import com.justonetech.expert.model.ZysqlbModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Zysqlb service. Represents a row in the &quot;expert_Zysqlb&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.expert.model.ZysqlbModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ZysqlbImpl}.
 * </p>
 *
 * @author fanqi
 * @see ZysqlbImpl
 * @see com.justonetech.expert.model.Zysqlb
 * @see com.justonetech.expert.model.ZysqlbModel
 * @generated
 */
public class ZysqlbModelImpl extends BaseModelImpl<Zysqlb>
	implements ZysqlbModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a zysqlb model instance should use the {@link com.justonetech.expert.model.Zysqlb} interface instead.
	 */
	public static final String TABLE_NAME = "expert_Zysqlb";
	public static final Object[][] TABLE_COLUMNS = {
			{ "zysqlbId", Types.BIGINT },
			{ "expertId", Types.BIGINT },
			{ "sx", Types.VARCHAR },
			{ "zy", Types.VARCHAR },
			{ "zt", Types.INTEGER },
			{ "shyj", Types.VARCHAR },
			{ "shr", Types.VARCHAR },
			{ "shrq", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table expert_Zysqlb (zysqlbId LONG not null primary key,expertId LONG,sx VARCHAR(75) null,zy VARCHAR(2000) null,zt INTEGER,shyj VARCHAR(75) null,shr VARCHAR(75) null,shrq DATE null)";
	public static final String TABLE_SQL_DROP = "drop table expert_Zysqlb";
	public static final String ORDER_BY_JPQL = " ORDER BY zysqlb.zysqlbId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY expert_Zysqlb.zysqlbId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.expert.model.Zysqlb"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.expert.model.Zysqlb"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.expert.model.Zysqlb"));

	public ZysqlbModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _zysqlbId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setZysqlbId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _zysqlbId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Zysqlb.class;
	}

	@Override
	public String getModelClassName() {
		return Zysqlb.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("zysqlbId", getZysqlbId());
		attributes.put("expertId", getExpertId());
		attributes.put("sx", getSx());
		attributes.put("zy", getZy());
		attributes.put("zt", getZt());
		attributes.put("shyj", getShyj());
		attributes.put("shr", getShr());
		attributes.put("shrq", getShrq());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long zysqlbId = (Long)attributes.get("zysqlbId");

		if (zysqlbId != null) {
			setZysqlbId(zysqlbId);
		}

		Long expertId = (Long)attributes.get("expertId");

		if (expertId != null) {
			setExpertId(expertId);
		}

		String sx = (String)attributes.get("sx");

		if (sx != null) {
			setSx(sx);
		}

		String zy = (String)attributes.get("zy");

		if (zy != null) {
			setZy(zy);
		}

		Integer zt = (Integer)attributes.get("zt");

		if (zt != null) {
			setZt(zt);
		}

		String shyj = (String)attributes.get("shyj");

		if (shyj != null) {
			setShyj(shyj);
		}

		String shr = (String)attributes.get("shr");

		if (shr != null) {
			setShr(shr);
		}

		Date shrq = (Date)attributes.get("shrq");

		if (shrq != null) {
			setShrq(shrq);
		}
	}

	@Override
	public long getZysqlbId() {
		return _zysqlbId;
	}

	@Override
	public void setZysqlbId(long zysqlbId) {
		_zysqlbId = zysqlbId;
	}

	@Override
	public long getExpertId() {
		return _expertId;
	}

	@Override
	public void setExpertId(long expertId) {
		_expertId = expertId;
	}

	@Override
	public String getSx() {
		if (_sx == null) {
			return StringPool.BLANK;
		}
		else {
			return _sx;
		}
	}

	@Override
	public void setSx(String sx) {
		_sx = sx;
	}

	@Override
	public String getZy() {
		if (_zy == null) {
			return StringPool.BLANK;
		}
		else {
			return _zy;
		}
	}

	@Override
	public void setZy(String zy) {
		_zy = zy;
	}

	@Override
	public int getZt() {
		return _zt;
	}

	@Override
	public void setZt(int zt) {
		_zt = zt;
	}

	@Override
	public String getShyj() {
		if (_shyj == null) {
			return StringPool.BLANK;
		}
		else {
			return _shyj;
		}
	}

	@Override
	public void setShyj(String shyj) {
		_shyj = shyj;
	}

	@Override
	public String getShr() {
		if (_shr == null) {
			return StringPool.BLANK;
		}
		else {
			return _shr;
		}
	}

	@Override
	public void setShr(String shr) {
		_shr = shr;
	}

	@Override
	public Date getShrq() {
		return _shrq;
	}

	@Override
	public void setShrq(Date shrq) {
		_shrq = shrq;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Zysqlb.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Zysqlb toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Zysqlb)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ZysqlbImpl zysqlbImpl = new ZysqlbImpl();

		zysqlbImpl.setZysqlbId(getZysqlbId());
		zysqlbImpl.setExpertId(getExpertId());
		zysqlbImpl.setSx(getSx());
		zysqlbImpl.setZy(getZy());
		zysqlbImpl.setZt(getZt());
		zysqlbImpl.setShyj(getShyj());
		zysqlbImpl.setShr(getShr());
		zysqlbImpl.setShrq(getShrq());

		zysqlbImpl.resetOriginalValues();

		return zysqlbImpl;
	}

	@Override
	public int compareTo(Zysqlb zysqlb) {
		int value = 0;

		if (getZysqlbId() < zysqlb.getZysqlbId()) {
			value = -1;
		}
		else if (getZysqlbId() > zysqlb.getZysqlbId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Zysqlb)) {
			return false;
		}

		Zysqlb zysqlb = (Zysqlb)obj;

		long primaryKey = zysqlb.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Zysqlb> toCacheModel() {
		ZysqlbCacheModel zysqlbCacheModel = new ZysqlbCacheModel();

		zysqlbCacheModel.zysqlbId = getZysqlbId();

		zysqlbCacheModel.expertId = getExpertId();

		zysqlbCacheModel.sx = getSx();

		String sx = zysqlbCacheModel.sx;

		if ((sx != null) && (sx.length() == 0)) {
			zysqlbCacheModel.sx = null;
		}

		zysqlbCacheModel.zy = getZy();

		String zy = zysqlbCacheModel.zy;

		if ((zy != null) && (zy.length() == 0)) {
			zysqlbCacheModel.zy = null;
		}

		zysqlbCacheModel.zt = getZt();

		zysqlbCacheModel.shyj = getShyj();

		String shyj = zysqlbCacheModel.shyj;

		if ((shyj != null) && (shyj.length() == 0)) {
			zysqlbCacheModel.shyj = null;
		}

		zysqlbCacheModel.shr = getShr();

		String shr = zysqlbCacheModel.shr;

		if ((shr != null) && (shr.length() == 0)) {
			zysqlbCacheModel.shr = null;
		}

		Date shrq = getShrq();

		if (shrq != null) {
			zysqlbCacheModel.shrq = shrq.getTime();
		}
		else {
			zysqlbCacheModel.shrq = Long.MIN_VALUE;
		}

		return zysqlbCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{zysqlbId=");
		sb.append(getZysqlbId());
		sb.append(", expertId=");
		sb.append(getExpertId());
		sb.append(", sx=");
		sb.append(getSx());
		sb.append(", zy=");
		sb.append(getZy());
		sb.append(", zt=");
		sb.append(getZt());
		sb.append(", shyj=");
		sb.append(getShyj());
		sb.append(", shr=");
		sb.append(getShr());
		sb.append(", shrq=");
		sb.append(getShrq());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.expert.model.Zysqlb");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>zysqlbId</column-name><column-value><![CDATA[");
		sb.append(getZysqlbId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expertId</column-name><column-value><![CDATA[");
		sb.append(getExpertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sx</column-name><column-value><![CDATA[");
		sb.append(getSx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zy</column-name><column-value><![CDATA[");
		sb.append(getZy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zt</column-name><column-value><![CDATA[");
		sb.append(getZt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shyj</column-name><column-value><![CDATA[");
		sb.append(getShyj());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shr</column-name><column-value><![CDATA[");
		sb.append(getShr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shrq</column-name><column-value><![CDATA[");
		sb.append(getShrq());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Zysqlb.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Zysqlb.class };
	private long _zysqlbId;
	private long _expertId;
	private String _sx;
	private String _zy;
	private int _zt;
	private String _shyj;
	private String _shr;
	private Date _shrq;
	private Zysqlb _escapedModel;
}