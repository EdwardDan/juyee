/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.oa.model.impl;

import com.justonetech.oa.model.Dispatch;
import com.justonetech.oa.model.DispatchModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Dispatch service. Represents a row in the &quot;oa_Dispatch&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.oa.model.DispatchModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DispatchImpl}.
 * </p>
 *
 * @author justonetech
 * @see DispatchImpl
 * @see com.justonetech.oa.model.Dispatch
 * @see com.justonetech.oa.model.DispatchModel
 * @generated
 */
public class DispatchModelImpl extends BaseModelImpl<Dispatch>
	implements DispatchModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dispatch model instance should use the {@link com.justonetech.oa.model.Dispatch} interface instead.
	 */
	public static final String TABLE_NAME = "oa_Dispatch";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dispatchId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createTime", Types.TIMESTAMP },
			{ "modifiedTime", Types.TIMESTAMP },
			{ "recordType", Types.BIGINT },
			{ "securityLevel", Types.BIGINT },
			{ "organaAbbreviation", Types.BIGINT },
			{ "year", Types.INTEGER },
			{ "serialNo", Types.INTEGER },
			{ "title", Types.VARCHAR },
			{ "sendOrgan", Types.VARCHAR },
			{ "ccOrgan", Types.VARCHAR },
			{ "writtenOrgan", Types.VARCHAR },
			{ "writtenDate", Types.TIMESTAMP },
			{ "urgencyDegree", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table oa_Dispatch (dispatchId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createTime DATE null,modifiedTime DATE null,recordType LONG,securityLevel LONG,organaAbbreviation LONG,year INTEGER,serialNo INTEGER,title VARCHAR(75) null,sendOrgan VARCHAR(75) null,ccOrgan VARCHAR(75) null,writtenOrgan VARCHAR(75) null,writtenDate DATE null,urgencyDegree LONG)";
	public static final String TABLE_SQL_DROP = "drop table oa_Dispatch";
	public static final String ORDER_BY_JPQL = " ORDER BY dispatch.modifiedTime DESC";
	public static final String ORDER_BY_SQL = " ORDER BY oa_Dispatch.modifiedTime DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.oa.model.Dispatch"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.oa.model.Dispatch"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.justonetech.oa.model.Dispatch"),
			true);
	public static long TITLE_COLUMN_BITMASK = 1L;
	public static long MODIFIEDTIME_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.oa.model.Dispatch"));

	public DispatchModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dispatchId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDispatchId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dispatchId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Dispatch.class;
	}

	@Override
	public String getModelClassName() {
		return Dispatch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dispatchId", getDispatchId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createTime", getCreateTime());
		attributes.put("modifiedTime", getModifiedTime());
		attributes.put("recordType", getRecordType());
		attributes.put("securityLevel", getSecurityLevel());
		attributes.put("organaAbbreviation", getOrganaAbbreviation());
		attributes.put("year", getYear());
		attributes.put("serialNo", getSerialNo());
		attributes.put("title", getTitle());
		attributes.put("sendOrgan", getSendOrgan());
		attributes.put("ccOrgan", getCcOrgan());
		attributes.put("writtenOrgan", getWrittenOrgan());
		attributes.put("writtenDate", getWrittenDate());
		attributes.put("urgencyDegree", getUrgencyDegree());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dispatchId = (Long)attributes.get("dispatchId");

		if (dispatchId != null) {
			setDispatchId(dispatchId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createTime = (Date)attributes.get("createTime");

		if (createTime != null) {
			setCreateTime(createTime);
		}

		Date modifiedTime = (Date)attributes.get("modifiedTime");

		if (modifiedTime != null) {
			setModifiedTime(modifiedTime);
		}

		Long recordType = (Long)attributes.get("recordType");

		if (recordType != null) {
			setRecordType(recordType);
		}

		Long securityLevel = (Long)attributes.get("securityLevel");

		if (securityLevel != null) {
			setSecurityLevel(securityLevel);
		}

		Long organaAbbreviation = (Long)attributes.get("organaAbbreviation");

		if (organaAbbreviation != null) {
			setOrganaAbbreviation(organaAbbreviation);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		Integer serialNo = (Integer)attributes.get("serialNo");

		if (serialNo != null) {
			setSerialNo(serialNo);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String sendOrgan = (String)attributes.get("sendOrgan");

		if (sendOrgan != null) {
			setSendOrgan(sendOrgan);
		}

		String ccOrgan = (String)attributes.get("ccOrgan");

		if (ccOrgan != null) {
			setCcOrgan(ccOrgan);
		}

		String writtenOrgan = (String)attributes.get("writtenOrgan");

		if (writtenOrgan != null) {
			setWrittenOrgan(writtenOrgan);
		}

		Date writtenDate = (Date)attributes.get("writtenDate");

		if (writtenDate != null) {
			setWrittenDate(writtenDate);
		}

		Long urgencyDegree = (Long)attributes.get("urgencyDegree");

		if (urgencyDegree != null) {
			setUrgencyDegree(urgencyDegree);
		}
	}

	@Override
	public long getDispatchId() {
		return _dispatchId;
	}

	@Override
	public void setDispatchId(long dispatchId) {
		_dispatchId = dispatchId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateTime() {
		return _createTime;
	}

	@Override
	public void setCreateTime(Date createTime) {
		_createTime = createTime;
	}

	@Override
	public Date getModifiedTime() {
		return _modifiedTime;
	}

	@Override
	public void setModifiedTime(Date modifiedTime) {
		_columnBitmask = -1L;

		_modifiedTime = modifiedTime;
	}

	@Override
	public long getRecordType() {
		return _recordType;
	}

	@Override
	public void setRecordType(long recordType) {
		_recordType = recordType;
	}

	@Override
	public long getSecurityLevel() {
		return _securityLevel;
	}

	@Override
	public void setSecurityLevel(long securityLevel) {
		_securityLevel = securityLevel;
	}

	@Override
	public long getOrganaAbbreviation() {
		return _organaAbbreviation;
	}

	@Override
	public void setOrganaAbbreviation(long organaAbbreviation) {
		_organaAbbreviation = organaAbbreviation;
	}

	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_year = year;
	}

	@Override
	public int getSerialNo() {
		return _serialNo;
	}

	@Override
	public void setSerialNo(int serialNo) {
		_serialNo = serialNo;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@Override
	public String getSendOrgan() {
		if (_sendOrgan == null) {
			return StringPool.BLANK;
		}
		else {
			return _sendOrgan;
		}
	}

	@Override
	public void setSendOrgan(String sendOrgan) {
		_sendOrgan = sendOrgan;
	}

	@Override
	public String getCcOrgan() {
		if (_ccOrgan == null) {
			return StringPool.BLANK;
		}
		else {
			return _ccOrgan;
		}
	}

	@Override
	public void setCcOrgan(String ccOrgan) {
		_ccOrgan = ccOrgan;
	}

	@Override
	public String getWrittenOrgan() {
		if (_writtenOrgan == null) {
			return StringPool.BLANK;
		}
		else {
			return _writtenOrgan;
		}
	}

	@Override
	public void setWrittenOrgan(String writtenOrgan) {
		_writtenOrgan = writtenOrgan;
	}

	@Override
	public Date getWrittenDate() {
		return _writtenDate;
	}

	@Override
	public void setWrittenDate(Date writtenDate) {
		_writtenDate = writtenDate;
	}

	@Override
	public long getUrgencyDegree() {
		return _urgencyDegree;
	}

	@Override
	public void setUrgencyDegree(long urgencyDegree) {
		_urgencyDegree = urgencyDegree;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Dispatch.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Dispatch toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Dispatch)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DispatchImpl dispatchImpl = new DispatchImpl();

		dispatchImpl.setDispatchId(getDispatchId());
		dispatchImpl.setGroupId(getGroupId());
		dispatchImpl.setCompanyId(getCompanyId());
		dispatchImpl.setUserId(getUserId());
		dispatchImpl.setUserName(getUserName());
		dispatchImpl.setCreateTime(getCreateTime());
		dispatchImpl.setModifiedTime(getModifiedTime());
		dispatchImpl.setRecordType(getRecordType());
		dispatchImpl.setSecurityLevel(getSecurityLevel());
		dispatchImpl.setOrganaAbbreviation(getOrganaAbbreviation());
		dispatchImpl.setYear(getYear());
		dispatchImpl.setSerialNo(getSerialNo());
		dispatchImpl.setTitle(getTitle());
		dispatchImpl.setSendOrgan(getSendOrgan());
		dispatchImpl.setCcOrgan(getCcOrgan());
		dispatchImpl.setWrittenOrgan(getWrittenOrgan());
		dispatchImpl.setWrittenDate(getWrittenDate());
		dispatchImpl.setUrgencyDegree(getUrgencyDegree());

		dispatchImpl.resetOriginalValues();

		return dispatchImpl;
	}

	@Override
	public int compareTo(Dispatch dispatch) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedTime(), dispatch.getModifiedTime());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Dispatch)) {
			return false;
		}

		Dispatch dispatch = (Dispatch)obj;

		long primaryKey = dispatch.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DispatchModelImpl dispatchModelImpl = this;

		dispatchModelImpl._originalTitle = dispatchModelImpl._title;

		dispatchModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Dispatch> toCacheModel() {
		DispatchCacheModel dispatchCacheModel = new DispatchCacheModel();

		dispatchCacheModel.dispatchId = getDispatchId();

		dispatchCacheModel.groupId = getGroupId();

		dispatchCacheModel.companyId = getCompanyId();

		dispatchCacheModel.userId = getUserId();

		dispatchCacheModel.userName = getUserName();

		String userName = dispatchCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dispatchCacheModel.userName = null;
		}

		Date createTime = getCreateTime();

		if (createTime != null) {
			dispatchCacheModel.createTime = createTime.getTime();
		}
		else {
			dispatchCacheModel.createTime = Long.MIN_VALUE;
		}

		Date modifiedTime = getModifiedTime();

		if (modifiedTime != null) {
			dispatchCacheModel.modifiedTime = modifiedTime.getTime();
		}
		else {
			dispatchCacheModel.modifiedTime = Long.MIN_VALUE;
		}

		dispatchCacheModel.recordType = getRecordType();

		dispatchCacheModel.securityLevel = getSecurityLevel();

		dispatchCacheModel.organaAbbreviation = getOrganaAbbreviation();

		dispatchCacheModel.year = getYear();

		dispatchCacheModel.serialNo = getSerialNo();

		dispatchCacheModel.title = getTitle();

		String title = dispatchCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			dispatchCacheModel.title = null;
		}

		dispatchCacheModel.sendOrgan = getSendOrgan();

		String sendOrgan = dispatchCacheModel.sendOrgan;

		if ((sendOrgan != null) && (sendOrgan.length() == 0)) {
			dispatchCacheModel.sendOrgan = null;
		}

		dispatchCacheModel.ccOrgan = getCcOrgan();

		String ccOrgan = dispatchCacheModel.ccOrgan;

		if ((ccOrgan != null) && (ccOrgan.length() == 0)) {
			dispatchCacheModel.ccOrgan = null;
		}

		dispatchCacheModel.writtenOrgan = getWrittenOrgan();

		String writtenOrgan = dispatchCacheModel.writtenOrgan;

		if ((writtenOrgan != null) && (writtenOrgan.length() == 0)) {
			dispatchCacheModel.writtenOrgan = null;
		}

		Date writtenDate = getWrittenDate();

		if (writtenDate != null) {
			dispatchCacheModel.writtenDate = writtenDate.getTime();
		}
		else {
			dispatchCacheModel.writtenDate = Long.MIN_VALUE;
		}

		dispatchCacheModel.urgencyDegree = getUrgencyDegree();

		return dispatchCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{dispatchId=");
		sb.append(getDispatchId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createTime=");
		sb.append(getCreateTime());
		sb.append(", modifiedTime=");
		sb.append(getModifiedTime());
		sb.append(", recordType=");
		sb.append(getRecordType());
		sb.append(", securityLevel=");
		sb.append(getSecurityLevel());
		sb.append(", organaAbbreviation=");
		sb.append(getOrganaAbbreviation());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", serialNo=");
		sb.append(getSerialNo());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", sendOrgan=");
		sb.append(getSendOrgan());
		sb.append(", ccOrgan=");
		sb.append(getCcOrgan());
		sb.append(", writtenOrgan=");
		sb.append(getWrittenOrgan());
		sb.append(", writtenDate=");
		sb.append(getWrittenDate());
		sb.append(", urgencyDegree=");
		sb.append(getUrgencyDegree());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.oa.model.Dispatch");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dispatchId</column-name><column-value><![CDATA[");
		sb.append(getDispatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createTime</column-name><column-value><![CDATA[");
		sb.append(getCreateTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedTime</column-name><column-value><![CDATA[");
		sb.append(getModifiedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordType</column-name><column-value><![CDATA[");
		sb.append(getRecordType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>securityLevel</column-name><column-value><![CDATA[");
		sb.append(getSecurityLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organaAbbreviation</column-name><column-value><![CDATA[");
		sb.append(getOrganaAbbreviation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serialNo</column-name><column-value><![CDATA[");
		sb.append(getSerialNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendOrgan</column-name><column-value><![CDATA[");
		sb.append(getSendOrgan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccOrgan</column-name><column-value><![CDATA[");
		sb.append(getCcOrgan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>writtenOrgan</column-name><column-value><![CDATA[");
		sb.append(getWrittenOrgan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>writtenDate</column-name><column-value><![CDATA[");
		sb.append(getWrittenDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>urgencyDegree</column-name><column-value><![CDATA[");
		sb.append(getUrgencyDegree());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Dispatch.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Dispatch.class
		};
	private long _dispatchId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createTime;
	private Date _modifiedTime;
	private long _recordType;
	private long _securityLevel;
	private long _organaAbbreviation;
	private int _year;
	private int _serialNo;
	private String _title;
	private String _originalTitle;
	private String _sendOrgan;
	private String _ccOrgan;
	private String _writtenOrgan;
	private Date _writtenDate;
	private long _urgencyDegree;
	private long _columnBitmask;
	private Dispatch _escapedModel;
}