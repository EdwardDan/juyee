/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.projApproval.model.impl;

import com.justonetech.projApproval.model.ConstructionPermit;
import com.justonetech.projApproval.model.ConstructionPermitModel;
import com.justonetech.projApproval.model.ConstructionPermitSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ConstructionPermit service. Represents a row in the &quot;projApproval_ConstructionPermit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.projApproval.model.ConstructionPermitModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConstructionPermitImpl}.
 * </p>
 *
 * @author justonetech
 * @see ConstructionPermitImpl
 * @see com.justonetech.projApproval.model.ConstructionPermit
 * @see com.justonetech.projApproval.model.ConstructionPermitModel
 * @generated
 */
@JSON(strict = true)
public class ConstructionPermitModelImpl extends BaseModelImpl<ConstructionPermit>
	implements ConstructionPermitModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a construction permit model instance should use the {@link com.justonetech.projApproval.model.ConstructionPermit} interface instead.
	 */
	public static final String TABLE_NAME = "projApproval_ConstructionPermit";
	public static final Object[][] TABLE_COLUMNS = {
			{ "constructionPermitId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createTime", Types.TIMESTAMP },
			{ "modifiedTime", Types.TIMESTAMP },
			{ "projType", Types.BIGINT },
			{ "projProperty", Types.BIGINT },
			{ "county", Types.BIGINT },
			{ "constructionCode", Types.VARCHAR },
			{ "bidingCode", Types.VARCHAR },
			{ "businessCode", Types.VARCHAR },
			{ "projName", Types.VARCHAR },
			{ "company", Types.VARCHAR },
			{ "companyProperty", Types.VARCHAR },
			{ "companyAddress", Types.VARCHAR },
			{ "legalPerson", Types.VARCHAR },
			{ "companyTel", Types.VARCHAR },
			{ "companyContacts", Types.VARCHAR },
			{ "companyContactPhone", Types.VARCHAR },
			{ "companySite", Types.VARCHAR },
			{ "engineerCategory", Types.VARCHAR },
			{ "engineerAttribute", Types.BIGINT },
			{ "engineerScale", Types.VARCHAR },
			{ "nationalFundsPer", Types.VARCHAR },
			{ "contractPrice", Types.DOUBLE },
			{ "contractSchedule", Types.DOUBLE },
			{ "bidPrice", Types.DOUBLE },
			{ "investBudget", Types.DOUBLE },
			{ "planStartDate", Types.TIMESTAMP },
			{ "planEndDate", Types.TIMESTAMP },
			{ "workSituation", Types.VARCHAR },
			{ "otherInfo", Types.VARCHAR },
			{ "applyMaterial", Types.VARCHAR },
			{ "receiptNum", Types.VARCHAR },
			{ "certificationDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table projApproval_ConstructionPermit (constructionPermitId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createTime DATE null,modifiedTime DATE null,projType LONG,projProperty LONG,county LONG,constructionCode VARCHAR(75) null,bidingCode VARCHAR(75) null,businessCode VARCHAR(75) null,projName VARCHAR(200) null,company VARCHAR(200) null,companyProperty VARCHAR(200) null,companyAddress VARCHAR(200) null,legalPerson VARCHAR(75) null,companyTel VARCHAR(75) null,companyContacts VARCHAR(75) null,companyContactPhone VARCHAR(75) null,companySite VARCHAR(200) null,engineerCategory VARCHAR(75) null,engineerAttribute LONG,engineerScale VARCHAR(200) null,nationalFundsPer VARCHAR(75) null,contractPrice DOUBLE,contractSchedule DOUBLE,bidPrice DOUBLE,investBudget DOUBLE,planStartDate DATE null,planEndDate DATE null,workSituation VARCHAR(200) null,otherInfo STRING null,applyMaterial STRING null,receiptNum VARCHAR(75) null,certificationDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table projApproval_ConstructionPermit";
	public static final String ORDER_BY_JPQL = " ORDER BY constructionPermit.constructionPermitId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY projApproval_ConstructionPermit.constructionPermitId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.projApproval.model.ConstructionPermit"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.projApproval.model.ConstructionPermit"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.justonetech.projApproval.model.ConstructionPermit"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long CONSTRUCTIONPERMITID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ConstructionPermit toModel(ConstructionPermitSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ConstructionPermit model = new ConstructionPermitImpl();

		model.setConstructionPermitId(soapModel.getConstructionPermitId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateTime(soapModel.getCreateTime());
		model.setModifiedTime(soapModel.getModifiedTime());
		model.setProjType(soapModel.getProjType());
		model.setProjProperty(soapModel.getProjProperty());
		model.setCounty(soapModel.getCounty());
		model.setConstructionCode(soapModel.getConstructionCode());
		model.setBidingCode(soapModel.getBidingCode());
		model.setBusinessCode(soapModel.getBusinessCode());
		model.setProjName(soapModel.getProjName());
		model.setCompany(soapModel.getCompany());
		model.setCompanyProperty(soapModel.getCompanyProperty());
		model.setCompanyAddress(soapModel.getCompanyAddress());
		model.setLegalPerson(soapModel.getLegalPerson());
		model.setCompanyTel(soapModel.getCompanyTel());
		model.setCompanyContacts(soapModel.getCompanyContacts());
		model.setCompanyContactPhone(soapModel.getCompanyContactPhone());
		model.setCompanySite(soapModel.getCompanySite());
		model.setEngineerCategory(soapModel.getEngineerCategory());
		model.setEngineerAttribute(soapModel.getEngineerAttribute());
		model.setEngineerScale(soapModel.getEngineerScale());
		model.setNationalFundsPer(soapModel.getNationalFundsPer());
		model.setContractPrice(soapModel.getContractPrice());
		model.setContractSchedule(soapModel.getContractSchedule());
		model.setBidPrice(soapModel.getBidPrice());
		model.setInvestBudget(soapModel.getInvestBudget());
		model.setPlanStartDate(soapModel.getPlanStartDate());
		model.setPlanEndDate(soapModel.getPlanEndDate());
		model.setWorkSituation(soapModel.getWorkSituation());
		model.setOtherInfo(soapModel.getOtherInfo());
		model.setApplyMaterial(soapModel.getApplyMaterial());
		model.setReceiptNum(soapModel.getReceiptNum());
		model.setCertificationDate(soapModel.getCertificationDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ConstructionPermit> toModels(
		ConstructionPermitSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ConstructionPermit> models = new ArrayList<ConstructionPermit>(soapModels.length);

		for (ConstructionPermitSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.projApproval.model.ConstructionPermit"));

	public ConstructionPermitModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _constructionPermitId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConstructionPermitId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _constructionPermitId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConstructionPermit.class;
	}

	@Override
	public String getModelClassName() {
		return ConstructionPermit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("constructionPermitId", getConstructionPermitId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createTime", getCreateTime());
		attributes.put("modifiedTime", getModifiedTime());
		attributes.put("projType", getProjType());
		attributes.put("projProperty", getProjProperty());
		attributes.put("county", getCounty());
		attributes.put("constructionCode", getConstructionCode());
		attributes.put("bidingCode", getBidingCode());
		attributes.put("businessCode", getBusinessCode());
		attributes.put("projName", getProjName());
		attributes.put("company", getCompany());
		attributes.put("companyProperty", getCompanyProperty());
		attributes.put("companyAddress", getCompanyAddress());
		attributes.put("legalPerson", getLegalPerson());
		attributes.put("companyTel", getCompanyTel());
		attributes.put("companyContacts", getCompanyContacts());
		attributes.put("companyContactPhone", getCompanyContactPhone());
		attributes.put("companySite", getCompanySite());
		attributes.put("engineerCategory", getEngineerCategory());
		attributes.put("engineerAttribute", getEngineerAttribute());
		attributes.put("engineerScale", getEngineerScale());
		attributes.put("nationalFundsPer", getNationalFundsPer());
		attributes.put("contractPrice", getContractPrice());
		attributes.put("contractSchedule", getContractSchedule());
		attributes.put("bidPrice", getBidPrice());
		attributes.put("investBudget", getInvestBudget());
		attributes.put("planStartDate", getPlanStartDate());
		attributes.put("planEndDate", getPlanEndDate());
		attributes.put("workSituation", getWorkSituation());
		attributes.put("otherInfo", getOtherInfo());
		attributes.put("applyMaterial", getApplyMaterial());
		attributes.put("receiptNum", getReceiptNum());
		attributes.put("certificationDate", getCertificationDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long constructionPermitId = (Long)attributes.get("constructionPermitId");

		if (constructionPermitId != null) {
			setConstructionPermitId(constructionPermitId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createTime = (Date)attributes.get("createTime");

		if (createTime != null) {
			setCreateTime(createTime);
		}

		Date modifiedTime = (Date)attributes.get("modifiedTime");

		if (modifiedTime != null) {
			setModifiedTime(modifiedTime);
		}

		Long projType = (Long)attributes.get("projType");

		if (projType != null) {
			setProjType(projType);
		}

		Long projProperty = (Long)attributes.get("projProperty");

		if (projProperty != null) {
			setProjProperty(projProperty);
		}

		Long county = (Long)attributes.get("county");

		if (county != null) {
			setCounty(county);
		}

		String constructionCode = (String)attributes.get("constructionCode");

		if (constructionCode != null) {
			setConstructionCode(constructionCode);
		}

		String bidingCode = (String)attributes.get("bidingCode");

		if (bidingCode != null) {
			setBidingCode(bidingCode);
		}

		String businessCode = (String)attributes.get("businessCode");

		if (businessCode != null) {
			setBusinessCode(businessCode);
		}

		String projName = (String)attributes.get("projName");

		if (projName != null) {
			setProjName(projName);
		}

		String company = (String)attributes.get("company");

		if (company != null) {
			setCompany(company);
		}

		String companyProperty = (String)attributes.get("companyProperty");

		if (companyProperty != null) {
			setCompanyProperty(companyProperty);
		}

		String companyAddress = (String)attributes.get("companyAddress");

		if (companyAddress != null) {
			setCompanyAddress(companyAddress);
		}

		String legalPerson = (String)attributes.get("legalPerson");

		if (legalPerson != null) {
			setLegalPerson(legalPerson);
		}

		String companyTel = (String)attributes.get("companyTel");

		if (companyTel != null) {
			setCompanyTel(companyTel);
		}

		String companyContacts = (String)attributes.get("companyContacts");

		if (companyContacts != null) {
			setCompanyContacts(companyContacts);
		}

		String companyContactPhone = (String)attributes.get(
				"companyContactPhone");

		if (companyContactPhone != null) {
			setCompanyContactPhone(companyContactPhone);
		}

		String companySite = (String)attributes.get("companySite");

		if (companySite != null) {
			setCompanySite(companySite);
		}

		String engineerCategory = (String)attributes.get("engineerCategory");

		if (engineerCategory != null) {
			setEngineerCategory(engineerCategory);
		}

		Long engineerAttribute = (Long)attributes.get("engineerAttribute");

		if (engineerAttribute != null) {
			setEngineerAttribute(engineerAttribute);
		}

		String engineerScale = (String)attributes.get("engineerScale");

		if (engineerScale != null) {
			setEngineerScale(engineerScale);
		}

		String nationalFundsPer = (String)attributes.get("nationalFundsPer");

		if (nationalFundsPer != null) {
			setNationalFundsPer(nationalFundsPer);
		}

		Double contractPrice = (Double)attributes.get("contractPrice");

		if (contractPrice != null) {
			setContractPrice(contractPrice);
		}

		Double contractSchedule = (Double)attributes.get("contractSchedule");

		if (contractSchedule != null) {
			setContractSchedule(contractSchedule);
		}

		Double bidPrice = (Double)attributes.get("bidPrice");

		if (bidPrice != null) {
			setBidPrice(bidPrice);
		}

		Double investBudget = (Double)attributes.get("investBudget");

		if (investBudget != null) {
			setInvestBudget(investBudget);
		}

		Date planStartDate = (Date)attributes.get("planStartDate");

		if (planStartDate != null) {
			setPlanStartDate(planStartDate);
		}

		Date planEndDate = (Date)attributes.get("planEndDate");

		if (planEndDate != null) {
			setPlanEndDate(planEndDate);
		}

		String workSituation = (String)attributes.get("workSituation");

		if (workSituation != null) {
			setWorkSituation(workSituation);
		}

		String otherInfo = (String)attributes.get("otherInfo");

		if (otherInfo != null) {
			setOtherInfo(otherInfo);
		}

		String applyMaterial = (String)attributes.get("applyMaterial");

		if (applyMaterial != null) {
			setApplyMaterial(applyMaterial);
		}

		String receiptNum = (String)attributes.get("receiptNum");

		if (receiptNum != null) {
			setReceiptNum(receiptNum);
		}

		Date certificationDate = (Date)attributes.get("certificationDate");

		if (certificationDate != null) {
			setCertificationDate(certificationDate);
		}
	}

	@JSON
	@Override
	public long getConstructionPermitId() {
		return _constructionPermitId;
	}

	@Override
	public void setConstructionPermitId(long constructionPermitId) {
		_constructionPermitId = constructionPermitId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateTime() {
		return _createTime;
	}

	@Override
	public void setCreateTime(Date createTime) {
		_createTime = createTime;
	}

	@JSON
	@Override
	public Date getModifiedTime() {
		return _modifiedTime;
	}

	@Override
	public void setModifiedTime(Date modifiedTime) {
		_modifiedTime = modifiedTime;
	}

	@JSON
	@Override
	public long getProjType() {
		return _projType;
	}

	@Override
	public void setProjType(long projType) {
		_projType = projType;
	}

	@JSON
	@Override
	public long getProjProperty() {
		return _projProperty;
	}

	@Override
	public void setProjProperty(long projProperty) {
		_projProperty = projProperty;
	}

	@JSON
	@Override
	public long getCounty() {
		return _county;
	}

	@Override
	public void setCounty(long county) {
		_county = county;
	}

	@JSON
	@Override
	public String getConstructionCode() {
		if (_constructionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _constructionCode;
		}
	}

	@Override
	public void setConstructionCode(String constructionCode) {
		_constructionCode = constructionCode;
	}

	@JSON
	@Override
	public String getBidingCode() {
		if (_bidingCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _bidingCode;
		}
	}

	@Override
	public void setBidingCode(String bidingCode) {
		_bidingCode = bidingCode;
	}

	@JSON
	@Override
	public String getBusinessCode() {
		if (_businessCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessCode;
		}
	}

	@Override
	public void setBusinessCode(String businessCode) {
		_businessCode = businessCode;
	}

	@JSON
	@Override
	public String getProjName() {
		if (_projName == null) {
			return StringPool.BLANK;
		}
		else {
			return _projName;
		}
	}

	@Override
	public void setProjName(String projName) {
		_projName = projName;
	}

	@JSON
	@Override
	public String getCompany() {
		if (_company == null) {
			return StringPool.BLANK;
		}
		else {
			return _company;
		}
	}

	@Override
	public void setCompany(String company) {
		_company = company;
	}

	@JSON
	@Override
	public String getCompanyProperty() {
		if (_companyProperty == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyProperty;
		}
	}

	@Override
	public void setCompanyProperty(String companyProperty) {
		_companyProperty = companyProperty;
	}

	@JSON
	@Override
	public String getCompanyAddress() {
		if (_companyAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyAddress;
		}
	}

	@Override
	public void setCompanyAddress(String companyAddress) {
		_companyAddress = companyAddress;
	}

	@JSON
	@Override
	public String getLegalPerson() {
		if (_legalPerson == null) {
			return StringPool.BLANK;
		}
		else {
			return _legalPerson;
		}
	}

	@Override
	public void setLegalPerson(String legalPerson) {
		_legalPerson = legalPerson;
	}

	@JSON
	@Override
	public String getCompanyTel() {
		if (_companyTel == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyTel;
		}
	}

	@Override
	public void setCompanyTel(String companyTel) {
		_companyTel = companyTel;
	}

	@JSON
	@Override
	public String getCompanyContacts() {
		if (_companyContacts == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyContacts;
		}
	}

	@Override
	public void setCompanyContacts(String companyContacts) {
		_companyContacts = companyContacts;
	}

	@JSON
	@Override
	public String getCompanyContactPhone() {
		if (_companyContactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyContactPhone;
		}
	}

	@Override
	public void setCompanyContactPhone(String companyContactPhone) {
		_companyContactPhone = companyContactPhone;
	}

	@JSON
	@Override
	public String getCompanySite() {
		if (_companySite == null) {
			return StringPool.BLANK;
		}
		else {
			return _companySite;
		}
	}

	@Override
	public void setCompanySite(String companySite) {
		_companySite = companySite;
	}

	@JSON
	@Override
	public String getEngineerCategory() {
		if (_engineerCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _engineerCategory;
		}
	}

	@Override
	public void setEngineerCategory(String engineerCategory) {
		_engineerCategory = engineerCategory;
	}

	@JSON
	@Override
	public long getEngineerAttribute() {
		return _engineerAttribute;
	}

	@Override
	public void setEngineerAttribute(long engineerAttribute) {
		_engineerAttribute = engineerAttribute;
	}

	@JSON
	@Override
	public String getEngineerScale() {
		if (_engineerScale == null) {
			return StringPool.BLANK;
		}
		else {
			return _engineerScale;
		}
	}

	@Override
	public void setEngineerScale(String engineerScale) {
		_engineerScale = engineerScale;
	}

	@JSON
	@Override
	public String getNationalFundsPer() {
		if (_nationalFundsPer == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationalFundsPer;
		}
	}

	@Override
	public void setNationalFundsPer(String nationalFundsPer) {
		_nationalFundsPer = nationalFundsPer;
	}

	@JSON
	@Override
	public double getContractPrice() {
		return _contractPrice;
	}

	@Override
	public void setContractPrice(double contractPrice) {
		_contractPrice = contractPrice;
	}

	@JSON
	@Override
	public double getContractSchedule() {
		return _contractSchedule;
	}

	@Override
	public void setContractSchedule(double contractSchedule) {
		_contractSchedule = contractSchedule;
	}

	@JSON
	@Override
	public double getBidPrice() {
		return _bidPrice;
	}

	@Override
	public void setBidPrice(double bidPrice) {
		_bidPrice = bidPrice;
	}

	@JSON
	@Override
	public double getInvestBudget() {
		return _investBudget;
	}

	@Override
	public void setInvestBudget(double investBudget) {
		_investBudget = investBudget;
	}

	@JSON
	@Override
	public Date getPlanStartDate() {
		return _planStartDate;
	}

	@Override
	public void setPlanStartDate(Date planStartDate) {
		_planStartDate = planStartDate;
	}

	@JSON
	@Override
	public Date getPlanEndDate() {
		return _planEndDate;
	}

	@Override
	public void setPlanEndDate(Date planEndDate) {
		_planEndDate = planEndDate;
	}

	@JSON
	@Override
	public String getWorkSituation() {
		if (_workSituation == null) {
			return StringPool.BLANK;
		}
		else {
			return _workSituation;
		}
	}

	@Override
	public void setWorkSituation(String workSituation) {
		_workSituation = workSituation;
	}

	@JSON
	@Override
	public String getOtherInfo() {
		if (_otherInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherInfo;
		}
	}

	@Override
	public void setOtherInfo(String otherInfo) {
		_otherInfo = otherInfo;
	}

	@JSON
	@Override
	public String getApplyMaterial() {
		if (_applyMaterial == null) {
			return StringPool.BLANK;
		}
		else {
			return _applyMaterial;
		}
	}

	@Override
	public void setApplyMaterial(String applyMaterial) {
		_applyMaterial = applyMaterial;
	}

	@JSON
	@Override
	public String getReceiptNum() {
		if (_receiptNum == null) {
			return StringPool.BLANK;
		}
		else {
			return _receiptNum;
		}
	}

	@Override
	public void setReceiptNum(String receiptNum) {
		_receiptNum = receiptNum;
	}

	@JSON
	@Override
	public Date getCertificationDate() {
		return _certificationDate;
	}

	@Override
	public void setCertificationDate(Date certificationDate) {
		_certificationDate = certificationDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ConstructionPermit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConstructionPermit toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ConstructionPermit)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConstructionPermitImpl constructionPermitImpl = new ConstructionPermitImpl();

		constructionPermitImpl.setConstructionPermitId(getConstructionPermitId());
		constructionPermitImpl.setUserId(getUserId());
		constructionPermitImpl.setUserName(getUserName());
		constructionPermitImpl.setCreateTime(getCreateTime());
		constructionPermitImpl.setModifiedTime(getModifiedTime());
		constructionPermitImpl.setProjType(getProjType());
		constructionPermitImpl.setProjProperty(getProjProperty());
		constructionPermitImpl.setCounty(getCounty());
		constructionPermitImpl.setConstructionCode(getConstructionCode());
		constructionPermitImpl.setBidingCode(getBidingCode());
		constructionPermitImpl.setBusinessCode(getBusinessCode());
		constructionPermitImpl.setProjName(getProjName());
		constructionPermitImpl.setCompany(getCompany());
		constructionPermitImpl.setCompanyProperty(getCompanyProperty());
		constructionPermitImpl.setCompanyAddress(getCompanyAddress());
		constructionPermitImpl.setLegalPerson(getLegalPerson());
		constructionPermitImpl.setCompanyTel(getCompanyTel());
		constructionPermitImpl.setCompanyContacts(getCompanyContacts());
		constructionPermitImpl.setCompanyContactPhone(getCompanyContactPhone());
		constructionPermitImpl.setCompanySite(getCompanySite());
		constructionPermitImpl.setEngineerCategory(getEngineerCategory());
		constructionPermitImpl.setEngineerAttribute(getEngineerAttribute());
		constructionPermitImpl.setEngineerScale(getEngineerScale());
		constructionPermitImpl.setNationalFundsPer(getNationalFundsPer());
		constructionPermitImpl.setContractPrice(getContractPrice());
		constructionPermitImpl.setContractSchedule(getContractSchedule());
		constructionPermitImpl.setBidPrice(getBidPrice());
		constructionPermitImpl.setInvestBudget(getInvestBudget());
		constructionPermitImpl.setPlanStartDate(getPlanStartDate());
		constructionPermitImpl.setPlanEndDate(getPlanEndDate());
		constructionPermitImpl.setWorkSituation(getWorkSituation());
		constructionPermitImpl.setOtherInfo(getOtherInfo());
		constructionPermitImpl.setApplyMaterial(getApplyMaterial());
		constructionPermitImpl.setReceiptNum(getReceiptNum());
		constructionPermitImpl.setCertificationDate(getCertificationDate());

		constructionPermitImpl.resetOriginalValues();

		return constructionPermitImpl;
	}

	@Override
	public int compareTo(ConstructionPermit constructionPermit) {
		long primaryKey = constructionPermit.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ConstructionPermit)) {
			return false;
		}

		ConstructionPermit constructionPermit = (ConstructionPermit)obj;

		long primaryKey = constructionPermit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ConstructionPermitModelImpl constructionPermitModelImpl = this;

		constructionPermitModelImpl._originalUserId = constructionPermitModelImpl._userId;

		constructionPermitModelImpl._setOriginalUserId = false;

		constructionPermitModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ConstructionPermit> toCacheModel() {
		ConstructionPermitCacheModel constructionPermitCacheModel = new ConstructionPermitCacheModel();

		constructionPermitCacheModel.constructionPermitId = getConstructionPermitId();

		constructionPermitCacheModel.userId = getUserId();

		constructionPermitCacheModel.userName = getUserName();

		String userName = constructionPermitCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			constructionPermitCacheModel.userName = null;
		}

		Date createTime = getCreateTime();

		if (createTime != null) {
			constructionPermitCacheModel.createTime = createTime.getTime();
		}
		else {
			constructionPermitCacheModel.createTime = Long.MIN_VALUE;
		}

		Date modifiedTime = getModifiedTime();

		if (modifiedTime != null) {
			constructionPermitCacheModel.modifiedTime = modifiedTime.getTime();
		}
		else {
			constructionPermitCacheModel.modifiedTime = Long.MIN_VALUE;
		}

		constructionPermitCacheModel.projType = getProjType();

		constructionPermitCacheModel.projProperty = getProjProperty();

		constructionPermitCacheModel.county = getCounty();

		constructionPermitCacheModel.constructionCode = getConstructionCode();

		String constructionCode = constructionPermitCacheModel.constructionCode;

		if ((constructionCode != null) && (constructionCode.length() == 0)) {
			constructionPermitCacheModel.constructionCode = null;
		}

		constructionPermitCacheModel.bidingCode = getBidingCode();

		String bidingCode = constructionPermitCacheModel.bidingCode;

		if ((bidingCode != null) && (bidingCode.length() == 0)) {
			constructionPermitCacheModel.bidingCode = null;
		}

		constructionPermitCacheModel.businessCode = getBusinessCode();

		String businessCode = constructionPermitCacheModel.businessCode;

		if ((businessCode != null) && (businessCode.length() == 0)) {
			constructionPermitCacheModel.businessCode = null;
		}

		constructionPermitCacheModel.projName = getProjName();

		String projName = constructionPermitCacheModel.projName;

		if ((projName != null) && (projName.length() == 0)) {
			constructionPermitCacheModel.projName = null;
		}

		constructionPermitCacheModel.company = getCompany();

		String company = constructionPermitCacheModel.company;

		if ((company != null) && (company.length() == 0)) {
			constructionPermitCacheModel.company = null;
		}

		constructionPermitCacheModel.companyProperty = getCompanyProperty();

		String companyProperty = constructionPermitCacheModel.companyProperty;

		if ((companyProperty != null) && (companyProperty.length() == 0)) {
			constructionPermitCacheModel.companyProperty = null;
		}

		constructionPermitCacheModel.companyAddress = getCompanyAddress();

		String companyAddress = constructionPermitCacheModel.companyAddress;

		if ((companyAddress != null) && (companyAddress.length() == 0)) {
			constructionPermitCacheModel.companyAddress = null;
		}

		constructionPermitCacheModel.legalPerson = getLegalPerson();

		String legalPerson = constructionPermitCacheModel.legalPerson;

		if ((legalPerson != null) && (legalPerson.length() == 0)) {
			constructionPermitCacheModel.legalPerson = null;
		}

		constructionPermitCacheModel.companyTel = getCompanyTel();

		String companyTel = constructionPermitCacheModel.companyTel;

		if ((companyTel != null) && (companyTel.length() == 0)) {
			constructionPermitCacheModel.companyTel = null;
		}

		constructionPermitCacheModel.companyContacts = getCompanyContacts();

		String companyContacts = constructionPermitCacheModel.companyContacts;

		if ((companyContacts != null) && (companyContacts.length() == 0)) {
			constructionPermitCacheModel.companyContacts = null;
		}

		constructionPermitCacheModel.companyContactPhone = getCompanyContactPhone();

		String companyContactPhone = constructionPermitCacheModel.companyContactPhone;

		if ((companyContactPhone != null) &&
				(companyContactPhone.length() == 0)) {
			constructionPermitCacheModel.companyContactPhone = null;
		}

		constructionPermitCacheModel.companySite = getCompanySite();

		String companySite = constructionPermitCacheModel.companySite;

		if ((companySite != null) && (companySite.length() == 0)) {
			constructionPermitCacheModel.companySite = null;
		}

		constructionPermitCacheModel.engineerCategory = getEngineerCategory();

		String engineerCategory = constructionPermitCacheModel.engineerCategory;

		if ((engineerCategory != null) && (engineerCategory.length() == 0)) {
			constructionPermitCacheModel.engineerCategory = null;
		}

		constructionPermitCacheModel.engineerAttribute = getEngineerAttribute();

		constructionPermitCacheModel.engineerScale = getEngineerScale();

		String engineerScale = constructionPermitCacheModel.engineerScale;

		if ((engineerScale != null) && (engineerScale.length() == 0)) {
			constructionPermitCacheModel.engineerScale = null;
		}

		constructionPermitCacheModel.nationalFundsPer = getNationalFundsPer();

		String nationalFundsPer = constructionPermitCacheModel.nationalFundsPer;

		if ((nationalFundsPer != null) && (nationalFundsPer.length() == 0)) {
			constructionPermitCacheModel.nationalFundsPer = null;
		}

		constructionPermitCacheModel.contractPrice = getContractPrice();

		constructionPermitCacheModel.contractSchedule = getContractSchedule();

		constructionPermitCacheModel.bidPrice = getBidPrice();

		constructionPermitCacheModel.investBudget = getInvestBudget();

		Date planStartDate = getPlanStartDate();

		if (planStartDate != null) {
			constructionPermitCacheModel.planStartDate = planStartDate.getTime();
		}
		else {
			constructionPermitCacheModel.planStartDate = Long.MIN_VALUE;
		}

		Date planEndDate = getPlanEndDate();

		if (planEndDate != null) {
			constructionPermitCacheModel.planEndDate = planEndDate.getTime();
		}
		else {
			constructionPermitCacheModel.planEndDate = Long.MIN_VALUE;
		}

		constructionPermitCacheModel.workSituation = getWorkSituation();

		String workSituation = constructionPermitCacheModel.workSituation;

		if ((workSituation != null) && (workSituation.length() == 0)) {
			constructionPermitCacheModel.workSituation = null;
		}

		constructionPermitCacheModel.otherInfo = getOtherInfo();

		String otherInfo = constructionPermitCacheModel.otherInfo;

		if ((otherInfo != null) && (otherInfo.length() == 0)) {
			constructionPermitCacheModel.otherInfo = null;
		}

		constructionPermitCacheModel.applyMaterial = getApplyMaterial();

		String applyMaterial = constructionPermitCacheModel.applyMaterial;

		if ((applyMaterial != null) && (applyMaterial.length() == 0)) {
			constructionPermitCacheModel.applyMaterial = null;
		}

		constructionPermitCacheModel.receiptNum = getReceiptNum();

		String receiptNum = constructionPermitCacheModel.receiptNum;

		if ((receiptNum != null) && (receiptNum.length() == 0)) {
			constructionPermitCacheModel.receiptNum = null;
		}

		Date certificationDate = getCertificationDate();

		if (certificationDate != null) {
			constructionPermitCacheModel.certificationDate = certificationDate.getTime();
		}
		else {
			constructionPermitCacheModel.certificationDate = Long.MIN_VALUE;
		}

		return constructionPermitCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(71);

		sb.append("{constructionPermitId=");
		sb.append(getConstructionPermitId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createTime=");
		sb.append(getCreateTime());
		sb.append(", modifiedTime=");
		sb.append(getModifiedTime());
		sb.append(", projType=");
		sb.append(getProjType());
		sb.append(", projProperty=");
		sb.append(getProjProperty());
		sb.append(", county=");
		sb.append(getCounty());
		sb.append(", constructionCode=");
		sb.append(getConstructionCode());
		sb.append(", bidingCode=");
		sb.append(getBidingCode());
		sb.append(", businessCode=");
		sb.append(getBusinessCode());
		sb.append(", projName=");
		sb.append(getProjName());
		sb.append(", company=");
		sb.append(getCompany());
		sb.append(", companyProperty=");
		sb.append(getCompanyProperty());
		sb.append(", companyAddress=");
		sb.append(getCompanyAddress());
		sb.append(", legalPerson=");
		sb.append(getLegalPerson());
		sb.append(", companyTel=");
		sb.append(getCompanyTel());
		sb.append(", companyContacts=");
		sb.append(getCompanyContacts());
		sb.append(", companyContactPhone=");
		sb.append(getCompanyContactPhone());
		sb.append(", companySite=");
		sb.append(getCompanySite());
		sb.append(", engineerCategory=");
		sb.append(getEngineerCategory());
		sb.append(", engineerAttribute=");
		sb.append(getEngineerAttribute());
		sb.append(", engineerScale=");
		sb.append(getEngineerScale());
		sb.append(", nationalFundsPer=");
		sb.append(getNationalFundsPer());
		sb.append(", contractPrice=");
		sb.append(getContractPrice());
		sb.append(", contractSchedule=");
		sb.append(getContractSchedule());
		sb.append(", bidPrice=");
		sb.append(getBidPrice());
		sb.append(", investBudget=");
		sb.append(getInvestBudget());
		sb.append(", planStartDate=");
		sb.append(getPlanStartDate());
		sb.append(", planEndDate=");
		sb.append(getPlanEndDate());
		sb.append(", workSituation=");
		sb.append(getWorkSituation());
		sb.append(", otherInfo=");
		sb.append(getOtherInfo());
		sb.append(", applyMaterial=");
		sb.append(getApplyMaterial());
		sb.append(", receiptNum=");
		sb.append(getReceiptNum());
		sb.append(", certificationDate=");
		sb.append(getCertificationDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(109);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.projApproval.model.ConstructionPermit");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>constructionPermitId</column-name><column-value><![CDATA[");
		sb.append(getConstructionPermitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createTime</column-name><column-value><![CDATA[");
		sb.append(getCreateTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedTime</column-name><column-value><![CDATA[");
		sb.append(getModifiedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projType</column-name><column-value><![CDATA[");
		sb.append(getProjType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projProperty</column-name><column-value><![CDATA[");
		sb.append(getProjProperty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>county</column-name><column-value><![CDATA[");
		sb.append(getCounty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>constructionCode</column-name><column-value><![CDATA[");
		sb.append(getConstructionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bidingCode</column-name><column-value><![CDATA[");
		sb.append(getBidingCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessCode</column-name><column-value><![CDATA[");
		sb.append(getBusinessCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projName</column-name><column-value><![CDATA[");
		sb.append(getProjName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>company</column-name><column-value><![CDATA[");
		sb.append(getCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyProperty</column-name><column-value><![CDATA[");
		sb.append(getCompanyProperty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyAddress</column-name><column-value><![CDATA[");
		sb.append(getCompanyAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>legalPerson</column-name><column-value><![CDATA[");
		sb.append(getLegalPerson());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyTel</column-name><column-value><![CDATA[");
		sb.append(getCompanyTel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyContacts</column-name><column-value><![CDATA[");
		sb.append(getCompanyContacts());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyContactPhone</column-name><column-value><![CDATA[");
		sb.append(getCompanyContactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companySite</column-name><column-value><![CDATA[");
		sb.append(getCompanySite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engineerCategory</column-name><column-value><![CDATA[");
		sb.append(getEngineerCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engineerAttribute</column-name><column-value><![CDATA[");
		sb.append(getEngineerAttribute());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engineerScale</column-name><column-value><![CDATA[");
		sb.append(getEngineerScale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationalFundsPer</column-name><column-value><![CDATA[");
		sb.append(getNationalFundsPer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractPrice</column-name><column-value><![CDATA[");
		sb.append(getContractPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractSchedule</column-name><column-value><![CDATA[");
		sb.append(getContractSchedule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bidPrice</column-name><column-value><![CDATA[");
		sb.append(getBidPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>investBudget</column-name><column-value><![CDATA[");
		sb.append(getInvestBudget());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>planStartDate</column-name><column-value><![CDATA[");
		sb.append(getPlanStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>planEndDate</column-name><column-value><![CDATA[");
		sb.append(getPlanEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workSituation</column-name><column-value><![CDATA[");
		sb.append(getWorkSituation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherInfo</column-name><column-value><![CDATA[");
		sb.append(getOtherInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applyMaterial</column-name><column-value><![CDATA[");
		sb.append(getApplyMaterial());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receiptNum</column-name><column-value><![CDATA[");
		sb.append(getReceiptNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificationDate</column-name><column-value><![CDATA[");
		sb.append(getCertificationDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ConstructionPermit.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ConstructionPermit.class
		};
	private long _constructionPermitId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createTime;
	private Date _modifiedTime;
	private long _projType;
	private long _projProperty;
	private long _county;
	private String _constructionCode;
	private String _bidingCode;
	private String _businessCode;
	private String _projName;
	private String _company;
	private String _companyProperty;
	private String _companyAddress;
	private String _legalPerson;
	private String _companyTel;
	private String _companyContacts;
	private String _companyContactPhone;
	private String _companySite;
	private String _engineerCategory;
	private long _engineerAttribute;
	private String _engineerScale;
	private String _nationalFundsPer;
	private double _contractPrice;
	private double _contractSchedule;
	private double _bidPrice;
	private double _investBudget;
	private Date _planStartDate;
	private Date _planEndDate;
	private String _workSituation;
	private String _otherInfo;
	private String _applyMaterial;
	private String _receiptNum;
	private Date _certificationDate;
	private long _columnBitmask;
	private ConstructionPermit _escapedModel;
}