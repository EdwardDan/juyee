/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.sys.model.impl;

import com.justonetech.sys.model.Dictionary;
import com.justonetech.sys.model.DictionaryModel;
import com.justonetech.sys.model.DictionarySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Dictionary service. Represents a row in the &quot;sys_Dictionary&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.sys.model.DictionaryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DictionaryImpl}.
 * </p>
 *
 * @author fanqi
 * @see DictionaryImpl
 * @see com.justonetech.sys.model.Dictionary
 * @see com.justonetech.sys.model.DictionaryModel
 * @generated
 */
@JSON(strict = true)
public class DictionaryModelImpl extends BaseModelImpl<Dictionary>
	implements DictionaryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dictionary model instance should use the {@link com.justonetech.sys.model.Dictionary} interface instead.
	 */
	public static final String TABLE_NAME = "sys_Dictionary";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dictionaryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "code_", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "isLeaf", Types.BOOLEAN },
			{ "sortNo", Types.VARCHAR },
			{ "desc_", Types.VARCHAR },
			{ "tag", Types.INTEGER },
			{ "isValid", Types.BOOLEAN },
			{ "parentId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table sys_Dictionary (dictionaryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,code_ VARCHAR(75) null,name VARCHAR(75) null,isLeaf BOOLEAN,sortNo VARCHAR(75) null,desc_ VARCHAR(75) null,tag INTEGER,isValid BOOLEAN,parentId LONG)";
	public static final String TABLE_SQL_DROP = "drop table sys_Dictionary";
	public static final String ORDER_BY_JPQL = " ORDER BY dictionary.sortNo ASC, dictionary.dictionaryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sys_Dictionary.sortNo ASC, sys_Dictionary.dictionaryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.sys.model.Dictionary"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.sys.model.Dictionary"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.justonetech.sys.model.Dictionary"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long ISVALID_COLUMN_BITMASK = 4L;
	public static long PARENTID_COLUMN_BITMASK = 8L;
	public static long SORTNO_COLUMN_BITMASK = 16L;
	public static long DICTIONARYID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Dictionary toModel(DictionarySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Dictionary model = new DictionaryImpl();

		model.setDictionaryId(soapModel.getDictionaryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCode(soapModel.getCode());
		model.setName(soapModel.getName());
		model.setIsLeaf(soapModel.getIsLeaf());
		model.setSortNo(soapModel.getSortNo());
		model.setDesc(soapModel.getDesc());
		model.setTag(soapModel.getTag());
		model.setIsValid(soapModel.getIsValid());
		model.setParentId(soapModel.getParentId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Dictionary> toModels(DictionarySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Dictionary> models = new ArrayList<Dictionary>(soapModels.length);

		for (DictionarySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.sys.model.Dictionary"));

	public DictionaryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dictionaryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDictionaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dictionaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Dictionary.class;
	}

	@Override
	public String getModelClassName() {
		return Dictionary.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dictionaryId", getDictionaryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("code", getCode());
		attributes.put("name", getName());
		attributes.put("isLeaf", getIsLeaf());
		attributes.put("sortNo", getSortNo());
		attributes.put("desc", getDesc());
		attributes.put("tag", getTag());
		attributes.put("isValid", getIsValid());
		attributes.put("parentId", getParentId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dictionaryId = (Long)attributes.get("dictionaryId");

		if (dictionaryId != null) {
			setDictionaryId(dictionaryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Boolean isLeaf = (Boolean)attributes.get("isLeaf");

		if (isLeaf != null) {
			setIsLeaf(isLeaf);
		}

		String sortNo = (String)attributes.get("sortNo");

		if (sortNo != null) {
			setSortNo(sortNo);
		}

		String desc = (String)attributes.get("desc");

		if (desc != null) {
			setDesc(desc);
		}

		Integer tag = (Integer)attributes.get("tag");

		if (tag != null) {
			setTag(tag);
		}

		Boolean isValid = (Boolean)attributes.get("isValid");

		if (isValid != null) {
			setIsValid(isValid);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}
	}

	@JSON
	@Override
	public long getDictionaryId() {
		return _dictionaryId;
	}

	@Override
	public void setDictionaryId(long dictionaryId) {
		_columnBitmask = -1L;

		_dictionaryId = dictionaryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public boolean getIsLeaf() {
		return _isLeaf;
	}

	@Override
	public boolean isIsLeaf() {
		return _isLeaf;
	}

	@Override
	public void setIsLeaf(boolean isLeaf) {
		_isLeaf = isLeaf;
	}

	@JSON
	@Override
	public String getSortNo() {
		if (_sortNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _sortNo;
		}
	}

	@Override
	public void setSortNo(String sortNo) {
		_columnBitmask = -1L;

		_sortNo = sortNo;
	}

	@JSON
	@Override
	public String getDesc() {
		if (_desc == null) {
			return StringPool.BLANK;
		}
		else {
			return _desc;
		}
	}

	@Override
	public void setDesc(String desc) {
		_desc = desc;
	}

	@JSON
	@Override
	public int getTag() {
		return _tag;
	}

	@Override
	public void setTag(int tag) {
		_tag = tag;
	}

	@JSON
	@Override
	public boolean getIsValid() {
		return _isValid;
	}

	@Override
	public boolean isIsValid() {
		return _isValid;
	}

	@Override
	public void setIsValid(boolean isValid) {
		_columnBitmask |= ISVALID_COLUMN_BITMASK;

		if (!_setOriginalIsValid) {
			_setOriginalIsValid = true;

			_originalIsValid = _isValid;
		}

		_isValid = isValid;
	}

	public boolean getOriginalIsValid() {
		return _originalIsValid;
	}

	@JSON
	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_columnBitmask |= PARENTID_COLUMN_BITMASK;

		if (!_setOriginalParentId) {
			_setOriginalParentId = true;

			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public long getOriginalParentId() {
		return _originalParentId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Dictionary.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Dictionary toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Dictionary)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DictionaryImpl dictionaryImpl = new DictionaryImpl();

		dictionaryImpl.setDictionaryId(getDictionaryId());
		dictionaryImpl.setGroupId(getGroupId());
		dictionaryImpl.setCompanyId(getCompanyId());
		dictionaryImpl.setUserId(getUserId());
		dictionaryImpl.setUserName(getUserName());
		dictionaryImpl.setCreateDate(getCreateDate());
		dictionaryImpl.setModifiedDate(getModifiedDate());
		dictionaryImpl.setCode(getCode());
		dictionaryImpl.setName(getName());
		dictionaryImpl.setIsLeaf(getIsLeaf());
		dictionaryImpl.setSortNo(getSortNo());
		dictionaryImpl.setDesc(getDesc());
		dictionaryImpl.setTag(getTag());
		dictionaryImpl.setIsValid(getIsValid());
		dictionaryImpl.setParentId(getParentId());

		dictionaryImpl.resetOriginalValues();

		return dictionaryImpl;
	}

	@Override
	public int compareTo(Dictionary dictionary) {
		int value = 0;

		value = getSortNo().compareTo(dictionary.getSortNo());

		if (value != 0) {
			return value;
		}

		if (getDictionaryId() < dictionary.getDictionaryId()) {
			value = -1;
		}
		else if (getDictionaryId() > dictionary.getDictionaryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Dictionary)) {
			return false;
		}

		Dictionary dictionary = (Dictionary)obj;

		long primaryKey = dictionary.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DictionaryModelImpl dictionaryModelImpl = this;

		dictionaryModelImpl._originalGroupId = dictionaryModelImpl._groupId;

		dictionaryModelImpl._setOriginalGroupId = false;

		dictionaryModelImpl._originalCode = dictionaryModelImpl._code;

		dictionaryModelImpl._originalIsValid = dictionaryModelImpl._isValid;

		dictionaryModelImpl._setOriginalIsValid = false;

		dictionaryModelImpl._originalParentId = dictionaryModelImpl._parentId;

		dictionaryModelImpl._setOriginalParentId = false;

		dictionaryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Dictionary> toCacheModel() {
		DictionaryCacheModel dictionaryCacheModel = new DictionaryCacheModel();

		dictionaryCacheModel.dictionaryId = getDictionaryId();

		dictionaryCacheModel.groupId = getGroupId();

		dictionaryCacheModel.companyId = getCompanyId();

		dictionaryCacheModel.userId = getUserId();

		dictionaryCacheModel.userName = getUserName();

		String userName = dictionaryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dictionaryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dictionaryCacheModel.createDate = createDate.getTime();
		}
		else {
			dictionaryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dictionaryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dictionaryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dictionaryCacheModel.code = getCode();

		String code = dictionaryCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			dictionaryCacheModel.code = null;
		}

		dictionaryCacheModel.name = getName();

		String name = dictionaryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dictionaryCacheModel.name = null;
		}

		dictionaryCacheModel.isLeaf = getIsLeaf();

		dictionaryCacheModel.sortNo = getSortNo();

		String sortNo = dictionaryCacheModel.sortNo;

		if ((sortNo != null) && (sortNo.length() == 0)) {
			dictionaryCacheModel.sortNo = null;
		}

		dictionaryCacheModel.desc = getDesc();

		String desc = dictionaryCacheModel.desc;

		if ((desc != null) && (desc.length() == 0)) {
			dictionaryCacheModel.desc = null;
		}

		dictionaryCacheModel.tag = getTag();

		dictionaryCacheModel.isValid = getIsValid();

		dictionaryCacheModel.parentId = getParentId();

		return dictionaryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{dictionaryId=");
		sb.append(getDictionaryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", isLeaf=");
		sb.append(getIsLeaf());
		sb.append(", sortNo=");
		sb.append(getSortNo());
		sb.append(", desc=");
		sb.append(getDesc());
		sb.append(", tag=");
		sb.append(getTag());
		sb.append(", isValid=");
		sb.append(getIsValid());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.sys.model.Dictionary");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dictionaryId</column-name><column-value><![CDATA[");
		sb.append(getDictionaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isLeaf</column-name><column-value><![CDATA[");
		sb.append(getIsLeaf());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sortNo</column-name><column-value><![CDATA[");
		sb.append(getSortNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>desc</column-name><column-value><![CDATA[");
		sb.append(getDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tag</column-name><column-value><![CDATA[");
		sb.append(getTag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isValid</column-name><column-value><![CDATA[");
		sb.append(getIsValid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Dictionary.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Dictionary.class
		};
	private long _dictionaryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _code;
	private String _originalCode;
	private String _name;
	private boolean _isLeaf;
	private String _sortNo;
	private String _desc;
	private int _tag;
	private boolean _isValid;
	private boolean _originalIsValid;
	private boolean _setOriginalIsValid;
	private long _parentId;
	private long _originalParentId;
	private boolean _setOriginalParentId;
	private long _columnBitmask;
	private Dictionary _escapedModel;
}