/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.sys.model.impl;

import com.justonetech.sys.model.SMS;
import com.justonetech.sys.model.SMSModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SMS service. Represents a row in the &quot;sys_SMS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.sys.model.SMSModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SMSImpl}.
 * </p>
 *
 * @author justonetech
 * @see SMSImpl
 * @see com.justonetech.sys.model.SMS
 * @see com.justonetech.sys.model.SMSModel
 * @generated
 */
public class SMSModelImpl extends BaseModelImpl<SMS> implements SMSModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s m s model instance should use the {@link com.justonetech.sys.model.SMS} interface instead.
	 */
	public static final String TABLE_NAME = "sys_SMS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "smsId", Types.BIGINT },
			{ "createTime", Types.TIMESTAMP },
			{ "modifiedTime", Types.TIMESTAMP },
			{ "content", Types.VARCHAR },
			{ "senderId", Types.BIGINT },
			{ "senderName", Types.VARCHAR },
			{ "receiver", Types.VARCHAR },
			{ "sendTime", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table sys_SMS (smsId LONG not null primary key,createTime DATE null,modifiedTime DATE null,content VARCHAR(200) null,senderId LONG,senderName VARCHAR(75) null,receiver STRING null,sendTime DATE null)";
	public static final String TABLE_SQL_DROP = "drop table sys_SMS";
	public static final String ORDER_BY_JPQL = " ORDER BY sms.createTime DESC";
	public static final String ORDER_BY_SQL = " ORDER BY sys_SMS.createTime DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.sys.model.SMS"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.sys.model.SMS"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.sys.model.SMS"));

	public SMSModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _smsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSmsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _smsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SMS.class;
	}

	@Override
	public String getModelClassName() {
		return SMS.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("smsId", getSmsId());
		attributes.put("createTime", getCreateTime());
		attributes.put("modifiedTime", getModifiedTime());
		attributes.put("content", getContent());
		attributes.put("senderId", getSenderId());
		attributes.put("senderName", getSenderName());
		attributes.put("receiver", getReceiver());
		attributes.put("sendTime", getSendTime());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long smsId = (Long)attributes.get("smsId");

		if (smsId != null) {
			setSmsId(smsId);
		}

		Date createTime = (Date)attributes.get("createTime");

		if (createTime != null) {
			setCreateTime(createTime);
		}

		Date modifiedTime = (Date)attributes.get("modifiedTime");

		if (modifiedTime != null) {
			setModifiedTime(modifiedTime);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Long senderId = (Long)attributes.get("senderId");

		if (senderId != null) {
			setSenderId(senderId);
		}

		String senderName = (String)attributes.get("senderName");

		if (senderName != null) {
			setSenderName(senderName);
		}

		String receiver = (String)attributes.get("receiver");

		if (receiver != null) {
			setReceiver(receiver);
		}

		Date sendTime = (Date)attributes.get("sendTime");

		if (sendTime != null) {
			setSendTime(sendTime);
		}
	}

	@Override
	public long getSmsId() {
		return _smsId;
	}

	@Override
	public void setSmsId(long smsId) {
		_smsId = smsId;
	}

	@Override
	public Date getCreateTime() {
		return _createTime;
	}

	@Override
	public void setCreateTime(Date createTime) {
		_createTime = createTime;
	}

	@Override
	public Date getModifiedTime() {
		return _modifiedTime;
	}

	@Override
	public void setModifiedTime(Date modifiedTime) {
		_modifiedTime = modifiedTime;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public long getSenderId() {
		return _senderId;
	}

	@Override
	public void setSenderId(long senderId) {
		_senderId = senderId;
	}

	@Override
	public String getSenderName() {
		if (_senderName == null) {
			return StringPool.BLANK;
		}
		else {
			return _senderName;
		}
	}

	@Override
	public void setSenderName(String senderName) {
		_senderName = senderName;
	}

	@Override
	public String getReceiver() {
		if (_receiver == null) {
			return StringPool.BLANK;
		}
		else {
			return _receiver;
		}
	}

	@Override
	public void setReceiver(String receiver) {
		_receiver = receiver;
	}

	@Override
	public Date getSendTime() {
		return _sendTime;
	}

	@Override
	public void setSendTime(Date sendTime) {
		_sendTime = sendTime;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SMS.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SMS toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SMS)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SMSImpl smsImpl = new SMSImpl();

		smsImpl.setSmsId(getSmsId());
		smsImpl.setCreateTime(getCreateTime());
		smsImpl.setModifiedTime(getModifiedTime());
		smsImpl.setContent(getContent());
		smsImpl.setSenderId(getSenderId());
		smsImpl.setSenderName(getSenderName());
		smsImpl.setReceiver(getReceiver());
		smsImpl.setSendTime(getSendTime());

		smsImpl.resetOriginalValues();

		return smsImpl;
	}

	@Override
	public int compareTo(SMS sms) {
		int value = 0;

		value = DateUtil.compareTo(getCreateTime(), sms.getCreateTime());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SMS)) {
			return false;
		}

		SMS sms = (SMS)obj;

		long primaryKey = sms.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SMS> toCacheModel() {
		SMSCacheModel smsCacheModel = new SMSCacheModel();

		smsCacheModel.smsId = getSmsId();

		Date createTime = getCreateTime();

		if (createTime != null) {
			smsCacheModel.createTime = createTime.getTime();
		}
		else {
			smsCacheModel.createTime = Long.MIN_VALUE;
		}

		Date modifiedTime = getModifiedTime();

		if (modifiedTime != null) {
			smsCacheModel.modifiedTime = modifiedTime.getTime();
		}
		else {
			smsCacheModel.modifiedTime = Long.MIN_VALUE;
		}

		smsCacheModel.content = getContent();

		String content = smsCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			smsCacheModel.content = null;
		}

		smsCacheModel.senderId = getSenderId();

		smsCacheModel.senderName = getSenderName();

		String senderName = smsCacheModel.senderName;

		if ((senderName != null) && (senderName.length() == 0)) {
			smsCacheModel.senderName = null;
		}

		smsCacheModel.receiver = getReceiver();

		String receiver = smsCacheModel.receiver;

		if ((receiver != null) && (receiver.length() == 0)) {
			smsCacheModel.receiver = null;
		}

		Date sendTime = getSendTime();

		if (sendTime != null) {
			smsCacheModel.sendTime = sendTime.getTime();
		}
		else {
			smsCacheModel.sendTime = Long.MIN_VALUE;
		}

		return smsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{smsId=");
		sb.append(getSmsId());
		sb.append(", createTime=");
		sb.append(getCreateTime());
		sb.append(", modifiedTime=");
		sb.append(getModifiedTime());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", senderId=");
		sb.append(getSenderId());
		sb.append(", senderName=");
		sb.append(getSenderName());
		sb.append(", receiver=");
		sb.append(getReceiver());
		sb.append(", sendTime=");
		sb.append(getSendTime());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.sys.model.SMS");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>smsId</column-name><column-value><![CDATA[");
		sb.append(getSmsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createTime</column-name><column-value><![CDATA[");
		sb.append(getCreateTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedTime</column-name><column-value><![CDATA[");
		sb.append(getModifiedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>senderId</column-name><column-value><![CDATA[");
		sb.append(getSenderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>senderName</column-name><column-value><![CDATA[");
		sb.append(getSenderName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receiver</column-name><column-value><![CDATA[");
		sb.append(getReceiver());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendTime</column-name><column-value><![CDATA[");
		sb.append(getSendTime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SMS.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { SMS.class };
	private long _smsId;
	private Date _createTime;
	private Date _modifiedTime;
	private String _content;
	private long _senderId;
	private String _senderName;
	private String _receiver;
	private Date _sendTime;
	private SMS _escapedModel;
}