/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.cyzt.leo.model.impl;

import com.justonetech.cyzt.leo.model.LEOTraining;
import com.justonetech.cyzt.leo.model.LEOTrainingModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LEOTraining service. Represents a row in the &quot;cyzt_LEOTraining&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.cyzt.leo.model.LEOTrainingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LEOTrainingImpl}.
 * </p>
 *
 * @author fanqi
 * @see LEOTrainingImpl
 * @see com.justonetech.cyzt.leo.model.LEOTraining
 * @see com.justonetech.cyzt.leo.model.LEOTrainingModel
 * @generated
 */
public class LEOTrainingModelImpl extends BaseModelImpl<LEOTraining>
	implements LEOTrainingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l e o training model instance should use the {@link com.justonetech.cyzt.leo.model.LEOTraining} interface instead.
	 */
	public static final String TABLE_NAME = "cyzt_LEOTraining";
	public static final Object[][] TABLE_COLUMNS = {
			{ "trainingId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "zjbh", Types.VARCHAR },
			{ "pxsj", Types.TIMESTAMP },
			{ "xcjysj", Types.TIMESTAMP },
			{ "pxnr", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table cyzt_LEOTraining (trainingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,zjbh VARCHAR(75) null,pxsj DATE null,xcjysj DATE null,pxnr VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table cyzt_LEOTraining";
	public static final String ORDER_BY_JPQL = " ORDER BY leoTraining.trainingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cyzt_LEOTraining.trainingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.cyzt.leo.model.LEOTraining"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.cyzt.leo.model.LEOTraining"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.justonetech.cyzt.leo.model.LEOTraining"),
			true);
	public static long ZJBH_COLUMN_BITMASK = 1L;
	public static long TRAININGID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.cyzt.leo.model.LEOTraining"));

	public LEOTrainingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _trainingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTrainingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _trainingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LEOTraining.class;
	}

	@Override
	public String getModelClassName() {
		return LEOTraining.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("trainingId", getTrainingId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("zjbh", getZjbh());
		attributes.put("pxsj", getPxsj());
		attributes.put("xcjysj", getXcjysj());
		attributes.put("pxnr", getPxnr());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long trainingId = (Long)attributes.get("trainingId");

		if (trainingId != null) {
			setTrainingId(trainingId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String zjbh = (String)attributes.get("zjbh");

		if (zjbh != null) {
			setZjbh(zjbh);
		}

		Date pxsj = (Date)attributes.get("pxsj");

		if (pxsj != null) {
			setPxsj(pxsj);
		}

		Date xcjysj = (Date)attributes.get("xcjysj");

		if (xcjysj != null) {
			setXcjysj(xcjysj);
		}

		String pxnr = (String)attributes.get("pxnr");

		if (pxnr != null) {
			setPxnr(pxnr);
		}
	}

	@Override
	public long getTrainingId() {
		return _trainingId;
	}

	@Override
	public void setTrainingId(long trainingId) {
		_trainingId = trainingId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getZjbh() {
		if (_zjbh == null) {
			return StringPool.BLANK;
		}
		else {
			return _zjbh;
		}
	}

	@Override
	public void setZjbh(String zjbh) {
		_columnBitmask |= ZJBH_COLUMN_BITMASK;

		if (_originalZjbh == null) {
			_originalZjbh = _zjbh;
		}

		_zjbh = zjbh;
	}

	public String getOriginalZjbh() {
		return GetterUtil.getString(_originalZjbh);
	}

	@Override
	public Date getPxsj() {
		return _pxsj;
	}

	@Override
	public void setPxsj(Date pxsj) {
		_pxsj = pxsj;
	}

	@Override
	public Date getXcjysj() {
		return _xcjysj;
	}

	@Override
	public void setXcjysj(Date xcjysj) {
		_xcjysj = xcjysj;
	}

	@Override
	public String getPxnr() {
		if (_pxnr == null) {
			return StringPool.BLANK;
		}
		else {
			return _pxnr;
		}
	}

	@Override
	public void setPxnr(String pxnr) {
		_pxnr = pxnr;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LEOTraining.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LEOTraining toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LEOTraining)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LEOTrainingImpl leoTrainingImpl = new LEOTrainingImpl();

		leoTrainingImpl.setTrainingId(getTrainingId());
		leoTrainingImpl.setGroupId(getGroupId());
		leoTrainingImpl.setCompanyId(getCompanyId());
		leoTrainingImpl.setUserId(getUserId());
		leoTrainingImpl.setUserName(getUserName());
		leoTrainingImpl.setCreateDate(getCreateDate());
		leoTrainingImpl.setModifiedDate(getModifiedDate());
		leoTrainingImpl.setZjbh(getZjbh());
		leoTrainingImpl.setPxsj(getPxsj());
		leoTrainingImpl.setXcjysj(getXcjysj());
		leoTrainingImpl.setPxnr(getPxnr());

		leoTrainingImpl.resetOriginalValues();

		return leoTrainingImpl;
	}

	@Override
	public int compareTo(LEOTraining leoTraining) {
		long primaryKey = leoTraining.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LEOTraining)) {
			return false;
		}

		LEOTraining leoTraining = (LEOTraining)obj;

		long primaryKey = leoTraining.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LEOTrainingModelImpl leoTrainingModelImpl = this;

		leoTrainingModelImpl._originalZjbh = leoTrainingModelImpl._zjbh;

		leoTrainingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LEOTraining> toCacheModel() {
		LEOTrainingCacheModel leoTrainingCacheModel = new LEOTrainingCacheModel();

		leoTrainingCacheModel.trainingId = getTrainingId();

		leoTrainingCacheModel.groupId = getGroupId();

		leoTrainingCacheModel.companyId = getCompanyId();

		leoTrainingCacheModel.userId = getUserId();

		leoTrainingCacheModel.userName = getUserName();

		String userName = leoTrainingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			leoTrainingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			leoTrainingCacheModel.createDate = createDate.getTime();
		}
		else {
			leoTrainingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			leoTrainingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			leoTrainingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		leoTrainingCacheModel.zjbh = getZjbh();

		String zjbh = leoTrainingCacheModel.zjbh;

		if ((zjbh != null) && (zjbh.length() == 0)) {
			leoTrainingCacheModel.zjbh = null;
		}

		Date pxsj = getPxsj();

		if (pxsj != null) {
			leoTrainingCacheModel.pxsj = pxsj.getTime();
		}
		else {
			leoTrainingCacheModel.pxsj = Long.MIN_VALUE;
		}

		Date xcjysj = getXcjysj();

		if (xcjysj != null) {
			leoTrainingCacheModel.xcjysj = xcjysj.getTime();
		}
		else {
			leoTrainingCacheModel.xcjysj = Long.MIN_VALUE;
		}

		leoTrainingCacheModel.pxnr = getPxnr();

		String pxnr = leoTrainingCacheModel.pxnr;

		if ((pxnr != null) && (pxnr.length() == 0)) {
			leoTrainingCacheModel.pxnr = null;
		}

		return leoTrainingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{trainingId=");
		sb.append(getTrainingId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", zjbh=");
		sb.append(getZjbh());
		sb.append(", pxsj=");
		sb.append(getPxsj());
		sb.append(", xcjysj=");
		sb.append(getXcjysj());
		sb.append(", pxnr=");
		sb.append(getPxnr());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.cyzt.leo.model.LEOTraining");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>trainingId</column-name><column-value><![CDATA[");
		sb.append(getTrainingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zjbh</column-name><column-value><![CDATA[");
		sb.append(getZjbh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pxsj</column-name><column-value><![CDATA[");
		sb.append(getPxsj());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xcjysj</column-name><column-value><![CDATA[");
		sb.append(getXcjysj());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pxnr</column-name><column-value><![CDATA[");
		sb.append(getPxnr());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LEOTraining.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LEOTraining.class
		};
	private long _trainingId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _zjbh;
	private String _originalZjbh;
	private Date _pxsj;
	private Date _xcjysj;
	private String _pxnr;
	private long _columnBitmask;
	private LEOTraining _escapedModel;
}