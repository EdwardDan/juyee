/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.expert.model.impl;

import com.justonetech.expert.model.Xlxx;
import com.justonetech.expert.model.XlxxModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Xlxx service. Represents a row in the &quot;expert_Xlxx&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.expert.model.XlxxModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link XlxxImpl}.
 * </p>
 *
 * @author fanqi
 * @see XlxxImpl
 * @see com.justonetech.expert.model.Xlxx
 * @see com.justonetech.expert.model.XlxxModel
 * @generated
 */
public class XlxxModelImpl extends BaseModelImpl<Xlxx> implements XlxxModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a xlxx model instance should use the {@link com.justonetech.expert.model.Xlxx} interface instead.
	 */
	public static final String TABLE_NAME = "expert_Xlxx";
	public static final Object[][] TABLE_COLUMNS = {
			{ "xlxxId", Types.BIGINT },
			{ "expertId", Types.VARCHAR },
			{ "byyx", Types.VARCHAR },
			{ "sxzy", Types.VARCHAR },
			{ "xlhxw", Types.VARCHAR },
			{ "zxsj", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table expert_Xlxx (xlxxId LONG not null primary key,expertId VARCHAR(75) null,byyx VARCHAR(75) null,sxzy VARCHAR(75) null,xlhxw VARCHAR(75) null,zxsj VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table expert_Xlxx";
	public static final String ORDER_BY_JPQL = " ORDER BY xlxx.xlxxId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY expert_Xlxx.xlxxId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.expert.model.Xlxx"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.expert.model.Xlxx"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.expert.model.Xlxx"));

	public XlxxModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _xlxxId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setXlxxId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _xlxxId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Xlxx.class;
	}

	@Override
	public String getModelClassName() {
		return Xlxx.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("xlxxId", getXlxxId());
		attributes.put("expertId", getExpertId());
		attributes.put("byyx", getByyx());
		attributes.put("sxzy", getSxzy());
		attributes.put("xlhxw", getXlhxw());
		attributes.put("zxsj", getZxsj());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long xlxxId = (Long)attributes.get("xlxxId");

		if (xlxxId != null) {
			setXlxxId(xlxxId);
		}

		String expertId = (String)attributes.get("expertId");

		if (expertId != null) {
			setExpertId(expertId);
		}

		String byyx = (String)attributes.get("byyx");

		if (byyx != null) {
			setByyx(byyx);
		}

		String sxzy = (String)attributes.get("sxzy");

		if (sxzy != null) {
			setSxzy(sxzy);
		}

		String xlhxw = (String)attributes.get("xlhxw");

		if (xlhxw != null) {
			setXlhxw(xlhxw);
		}

		String zxsj = (String)attributes.get("zxsj");

		if (zxsj != null) {
			setZxsj(zxsj);
		}
	}

	@Override
	public long getXlxxId() {
		return _xlxxId;
	}

	@Override
	public void setXlxxId(long xlxxId) {
		_xlxxId = xlxxId;
	}

	@Override
	public String getExpertId() {
		if (_expertId == null) {
			return StringPool.BLANK;
		}
		else {
			return _expertId;
		}
	}

	@Override
	public void setExpertId(String expertId) {
		_expertId = expertId;
	}

	@Override
	public String getByyx() {
		if (_byyx == null) {
			return StringPool.BLANK;
		}
		else {
			return _byyx;
		}
	}

	@Override
	public void setByyx(String byyx) {
		_byyx = byyx;
	}

	@Override
	public String getSxzy() {
		if (_sxzy == null) {
			return StringPool.BLANK;
		}
		else {
			return _sxzy;
		}
	}

	@Override
	public void setSxzy(String sxzy) {
		_sxzy = sxzy;
	}

	@Override
	public String getXlhxw() {
		if (_xlhxw == null) {
			return StringPool.BLANK;
		}
		else {
			return _xlhxw;
		}
	}

	@Override
	public void setXlhxw(String xlhxw) {
		_xlhxw = xlhxw;
	}

	@Override
	public String getZxsj() {
		if (_zxsj == null) {
			return StringPool.BLANK;
		}
		else {
			return _zxsj;
		}
	}

	@Override
	public void setZxsj(String zxsj) {
		_zxsj = zxsj;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Xlxx.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Xlxx toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Xlxx)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		XlxxImpl xlxxImpl = new XlxxImpl();

		xlxxImpl.setXlxxId(getXlxxId());
		xlxxImpl.setExpertId(getExpertId());
		xlxxImpl.setByyx(getByyx());
		xlxxImpl.setSxzy(getSxzy());
		xlxxImpl.setXlhxw(getXlhxw());
		xlxxImpl.setZxsj(getZxsj());

		xlxxImpl.resetOriginalValues();

		return xlxxImpl;
	}

	@Override
	public int compareTo(Xlxx xlxx) {
		int value = 0;

		if (getXlxxId() < xlxx.getXlxxId()) {
			value = -1;
		}
		else if (getXlxxId() > xlxx.getXlxxId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Xlxx)) {
			return false;
		}

		Xlxx xlxx = (Xlxx)obj;

		long primaryKey = xlxx.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Xlxx> toCacheModel() {
		XlxxCacheModel xlxxCacheModel = new XlxxCacheModel();

		xlxxCacheModel.xlxxId = getXlxxId();

		xlxxCacheModel.expertId = getExpertId();

		String expertId = xlxxCacheModel.expertId;

		if ((expertId != null) && (expertId.length() == 0)) {
			xlxxCacheModel.expertId = null;
		}

		xlxxCacheModel.byyx = getByyx();

		String byyx = xlxxCacheModel.byyx;

		if ((byyx != null) && (byyx.length() == 0)) {
			xlxxCacheModel.byyx = null;
		}

		xlxxCacheModel.sxzy = getSxzy();

		String sxzy = xlxxCacheModel.sxzy;

		if ((sxzy != null) && (sxzy.length() == 0)) {
			xlxxCacheModel.sxzy = null;
		}

		xlxxCacheModel.xlhxw = getXlhxw();

		String xlhxw = xlxxCacheModel.xlhxw;

		if ((xlhxw != null) && (xlhxw.length() == 0)) {
			xlxxCacheModel.xlhxw = null;
		}

		xlxxCacheModel.zxsj = getZxsj();

		String zxsj = xlxxCacheModel.zxsj;

		if ((zxsj != null) && (zxsj.length() == 0)) {
			xlxxCacheModel.zxsj = null;
		}

		return xlxxCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{xlxxId=");
		sb.append(getXlxxId());
		sb.append(", expertId=");
		sb.append(getExpertId());
		sb.append(", byyx=");
		sb.append(getByyx());
		sb.append(", sxzy=");
		sb.append(getSxzy());
		sb.append(", xlhxw=");
		sb.append(getXlhxw());
		sb.append(", zxsj=");
		sb.append(getZxsj());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.expert.model.Xlxx");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>xlxxId</column-name><column-value><![CDATA[");
		sb.append(getXlxxId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expertId</column-name><column-value><![CDATA[");
		sb.append(getExpertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>byyx</column-name><column-value><![CDATA[");
		sb.append(getByyx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sxzy</column-name><column-value><![CDATA[");
		sb.append(getSxzy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xlhxw</column-name><column-value><![CDATA[");
		sb.append(getXlhxw());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zxsj</column-name><column-value><![CDATA[");
		sb.append(getZxsj());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Xlxx.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Xlxx.class };
	private long _xlxxId;
	private String _expertId;
	private String _byyx;
	private String _sxzy;
	private String _xlhxw;
	private String _zxsj;
	private Xlxx _escapedModel;
}