/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.expert.model.impl;

import com.justonetech.expert.model.Jbxx;
import com.justonetech.expert.model.JbxxModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Jbxx service. Represents a row in the &quot;expert_Jbxx&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.expert.model.JbxxModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JbxxImpl}.
 * </p>
 *
 * @author fanqi
 * @see JbxxImpl
 * @see com.justonetech.expert.model.Jbxx
 * @see com.justonetech.expert.model.JbxxModel
 * @generated
 */
public class JbxxModelImpl extends BaseModelImpl<Jbxx> implements JbxxModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a jbxx model instance should use the {@link com.justonetech.expert.model.Jbxx} interface instead.
	 */
	public static final String TABLE_NAME = "expert_Jbxx";
	public static final Object[][] TABLE_COLUMNS = {
			{ "jbxxId", Types.BIGINT },
			{ "xm", Types.VARCHAR },
			{ "xb", Types.VARCHAR },
			{ "sfzh", Types.VARCHAR },
			{ "csny", Types.TIMESTAMP },
			{ "gzdw", Types.VARCHAR },
			{ "dzyx", Types.VARCHAR },
			{ "txdz", Types.VARCHAR },
			{ "yzbm", Types.VARCHAR },
			{ "xrzw", Types.VARCHAR },
			{ "zc", Types.VARCHAR },
			{ "zyzg", Types.VARCHAR },
			{ "cszy", Types.VARCHAR },
			{ "zygznx", Types.VARCHAR },
			{ "sjhm", Types.VARCHAR },
			{ "lxdh", Types.VARCHAR },
			{ "cz", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table expert_Jbxx (jbxxId LONG not null primary key,xm VARCHAR(75) null,xb VARCHAR(75) null,sfzh VARCHAR(75) null,csny DATE null,gzdw VARCHAR(75) null,dzyx VARCHAR(75) null,txdz VARCHAR(75) null,yzbm VARCHAR(75) null,xrzw VARCHAR(75) null,zc VARCHAR(75) null,zyzg VARCHAR(75) null,cszy VARCHAR(75) null,zygznx VARCHAR(75) null,sjhm VARCHAR(75) null,lxdh VARCHAR(75) null,cz VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table expert_Jbxx";
	public static final String ORDER_BY_JPQL = " ORDER BY jbxx.jbxxId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY expert_Jbxx.jbxxId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.expert.model.Jbxx"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.expert.model.Jbxx"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.expert.model.Jbxx"));

	public JbxxModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jbxxId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJbxxId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jbxxId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Jbxx.class;
	}

	@Override
	public String getModelClassName() {
		return Jbxx.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("jbxxId", getJbxxId());
		attributes.put("xm", getXm());
		attributes.put("xb", getXb());
		attributes.put("sfzh", getSfzh());
		attributes.put("csny", getCsny());
		attributes.put("gzdw", getGzdw());
		attributes.put("dzyx", getDzyx());
		attributes.put("txdz", getTxdz());
		attributes.put("yzbm", getYzbm());
		attributes.put("xrzw", getXrzw());
		attributes.put("zc", getZc());
		attributes.put("zyzg", getZyzg());
		attributes.put("cszy", getCszy());
		attributes.put("zygznx", getZygznx());
		attributes.put("sjhm", getSjhm());
		attributes.put("lxdh", getLxdh());
		attributes.put("cz", getCz());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long jbxxId = (Long)attributes.get("jbxxId");

		if (jbxxId != null) {
			setJbxxId(jbxxId);
		}

		String xm = (String)attributes.get("xm");

		if (xm != null) {
			setXm(xm);
		}

		String xb = (String)attributes.get("xb");

		if (xb != null) {
			setXb(xb);
		}

		String sfzh = (String)attributes.get("sfzh");

		if (sfzh != null) {
			setSfzh(sfzh);
		}

		Date csny = (Date)attributes.get("csny");

		if (csny != null) {
			setCsny(csny);
		}

		String gzdw = (String)attributes.get("gzdw");

		if (gzdw != null) {
			setGzdw(gzdw);
		}

		String dzyx = (String)attributes.get("dzyx");

		if (dzyx != null) {
			setDzyx(dzyx);
		}

		String txdz = (String)attributes.get("txdz");

		if (txdz != null) {
			setTxdz(txdz);
		}

		String yzbm = (String)attributes.get("yzbm");

		if (yzbm != null) {
			setYzbm(yzbm);
		}

		String xrzw = (String)attributes.get("xrzw");

		if (xrzw != null) {
			setXrzw(xrzw);
		}

		String zc = (String)attributes.get("zc");

		if (zc != null) {
			setZc(zc);
		}

		String zyzg = (String)attributes.get("zyzg");

		if (zyzg != null) {
			setZyzg(zyzg);
		}

		String cszy = (String)attributes.get("cszy");

		if (cszy != null) {
			setCszy(cszy);
		}

		String zygznx = (String)attributes.get("zygznx");

		if (zygznx != null) {
			setZygznx(zygznx);
		}

		String sjhm = (String)attributes.get("sjhm");

		if (sjhm != null) {
			setSjhm(sjhm);
		}

		String lxdh = (String)attributes.get("lxdh");

		if (lxdh != null) {
			setLxdh(lxdh);
		}

		String cz = (String)attributes.get("cz");

		if (cz != null) {
			setCz(cz);
		}
	}

	@Override
	public long getJbxxId() {
		return _jbxxId;
	}

	@Override
	public void setJbxxId(long jbxxId) {
		_jbxxId = jbxxId;
	}

	@Override
	public String getXm() {
		if (_xm == null) {
			return StringPool.BLANK;
		}
		else {
			return _xm;
		}
	}

	@Override
	public void setXm(String xm) {
		_xm = xm;
	}

	@Override
	public String getXb() {
		if (_xb == null) {
			return StringPool.BLANK;
		}
		else {
			return _xb;
		}
	}

	@Override
	public void setXb(String xb) {
		_xb = xb;
	}

	@Override
	public String getSfzh() {
		if (_sfzh == null) {
			return StringPool.BLANK;
		}
		else {
			return _sfzh;
		}
	}

	@Override
	public void setSfzh(String sfzh) {
		_sfzh = sfzh;
	}

	@Override
	public Date getCsny() {
		return _csny;
	}

	@Override
	public void setCsny(Date csny) {
		_csny = csny;
	}

	@Override
	public String getGzdw() {
		if (_gzdw == null) {
			return StringPool.BLANK;
		}
		else {
			return _gzdw;
		}
	}

	@Override
	public void setGzdw(String gzdw) {
		_gzdw = gzdw;
	}

	@Override
	public String getDzyx() {
		if (_dzyx == null) {
			return StringPool.BLANK;
		}
		else {
			return _dzyx;
		}
	}

	@Override
	public void setDzyx(String dzyx) {
		_dzyx = dzyx;
	}

	@Override
	public String getTxdz() {
		if (_txdz == null) {
			return StringPool.BLANK;
		}
		else {
			return _txdz;
		}
	}

	@Override
	public void setTxdz(String txdz) {
		_txdz = txdz;
	}

	@Override
	public String getYzbm() {
		if (_yzbm == null) {
			return StringPool.BLANK;
		}
		else {
			return _yzbm;
		}
	}

	@Override
	public void setYzbm(String yzbm) {
		_yzbm = yzbm;
	}

	@Override
	public String getXrzw() {
		if (_xrzw == null) {
			return StringPool.BLANK;
		}
		else {
			return _xrzw;
		}
	}

	@Override
	public void setXrzw(String xrzw) {
		_xrzw = xrzw;
	}

	@Override
	public String getZc() {
		if (_zc == null) {
			return StringPool.BLANK;
		}
		else {
			return _zc;
		}
	}

	@Override
	public void setZc(String zc) {
		_zc = zc;
	}

	@Override
	public String getZyzg() {
		if (_zyzg == null) {
			return StringPool.BLANK;
		}
		else {
			return _zyzg;
		}
	}

	@Override
	public void setZyzg(String zyzg) {
		_zyzg = zyzg;
	}

	@Override
	public String getCszy() {
		if (_cszy == null) {
			return StringPool.BLANK;
		}
		else {
			return _cszy;
		}
	}

	@Override
	public void setCszy(String cszy) {
		_cszy = cszy;
	}

	@Override
	public String getZygznx() {
		if (_zygznx == null) {
			return StringPool.BLANK;
		}
		else {
			return _zygznx;
		}
	}

	@Override
	public void setZygznx(String zygznx) {
		_zygznx = zygznx;
	}

	@Override
	public String getSjhm() {
		if (_sjhm == null) {
			return StringPool.BLANK;
		}
		else {
			return _sjhm;
		}
	}

	@Override
	public void setSjhm(String sjhm) {
		_sjhm = sjhm;
	}

	@Override
	public String getLxdh() {
		if (_lxdh == null) {
			return StringPool.BLANK;
		}
		else {
			return _lxdh;
		}
	}

	@Override
	public void setLxdh(String lxdh) {
		_lxdh = lxdh;
	}

	@Override
	public String getCz() {
		if (_cz == null) {
			return StringPool.BLANK;
		}
		else {
			return _cz;
		}
	}

	@Override
	public void setCz(String cz) {
		_cz = cz;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Jbxx.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Jbxx toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Jbxx)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JbxxImpl jbxxImpl = new JbxxImpl();

		jbxxImpl.setJbxxId(getJbxxId());
		jbxxImpl.setXm(getXm());
		jbxxImpl.setXb(getXb());
		jbxxImpl.setSfzh(getSfzh());
		jbxxImpl.setCsny(getCsny());
		jbxxImpl.setGzdw(getGzdw());
		jbxxImpl.setDzyx(getDzyx());
		jbxxImpl.setTxdz(getTxdz());
		jbxxImpl.setYzbm(getYzbm());
		jbxxImpl.setXrzw(getXrzw());
		jbxxImpl.setZc(getZc());
		jbxxImpl.setZyzg(getZyzg());
		jbxxImpl.setCszy(getCszy());
		jbxxImpl.setZygznx(getZygznx());
		jbxxImpl.setSjhm(getSjhm());
		jbxxImpl.setLxdh(getLxdh());
		jbxxImpl.setCz(getCz());

		jbxxImpl.resetOriginalValues();

		return jbxxImpl;
	}

	@Override
	public int compareTo(Jbxx jbxx) {
		int value = 0;

		if (getJbxxId() < jbxx.getJbxxId()) {
			value = -1;
		}
		else if (getJbxxId() > jbxx.getJbxxId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Jbxx)) {
			return false;
		}

		Jbxx jbxx = (Jbxx)obj;

		long primaryKey = jbxx.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Jbxx> toCacheModel() {
		JbxxCacheModel jbxxCacheModel = new JbxxCacheModel();

		jbxxCacheModel.jbxxId = getJbxxId();

		jbxxCacheModel.xm = getXm();

		String xm = jbxxCacheModel.xm;

		if ((xm != null) && (xm.length() == 0)) {
			jbxxCacheModel.xm = null;
		}

		jbxxCacheModel.xb = getXb();

		String xb = jbxxCacheModel.xb;

		if ((xb != null) && (xb.length() == 0)) {
			jbxxCacheModel.xb = null;
		}

		jbxxCacheModel.sfzh = getSfzh();

		String sfzh = jbxxCacheModel.sfzh;

		if ((sfzh != null) && (sfzh.length() == 0)) {
			jbxxCacheModel.sfzh = null;
		}

		Date csny = getCsny();

		if (csny != null) {
			jbxxCacheModel.csny = csny.getTime();
		}
		else {
			jbxxCacheModel.csny = Long.MIN_VALUE;
		}

		jbxxCacheModel.gzdw = getGzdw();

		String gzdw = jbxxCacheModel.gzdw;

		if ((gzdw != null) && (gzdw.length() == 0)) {
			jbxxCacheModel.gzdw = null;
		}

		jbxxCacheModel.dzyx = getDzyx();

		String dzyx = jbxxCacheModel.dzyx;

		if ((dzyx != null) && (dzyx.length() == 0)) {
			jbxxCacheModel.dzyx = null;
		}

		jbxxCacheModel.txdz = getTxdz();

		String txdz = jbxxCacheModel.txdz;

		if ((txdz != null) && (txdz.length() == 0)) {
			jbxxCacheModel.txdz = null;
		}

		jbxxCacheModel.yzbm = getYzbm();

		String yzbm = jbxxCacheModel.yzbm;

		if ((yzbm != null) && (yzbm.length() == 0)) {
			jbxxCacheModel.yzbm = null;
		}

		jbxxCacheModel.xrzw = getXrzw();

		String xrzw = jbxxCacheModel.xrzw;

		if ((xrzw != null) && (xrzw.length() == 0)) {
			jbxxCacheModel.xrzw = null;
		}

		jbxxCacheModel.zc = getZc();

		String zc = jbxxCacheModel.zc;

		if ((zc != null) && (zc.length() == 0)) {
			jbxxCacheModel.zc = null;
		}

		jbxxCacheModel.zyzg = getZyzg();

		String zyzg = jbxxCacheModel.zyzg;

		if ((zyzg != null) && (zyzg.length() == 0)) {
			jbxxCacheModel.zyzg = null;
		}

		jbxxCacheModel.cszy = getCszy();

		String cszy = jbxxCacheModel.cszy;

		if ((cszy != null) && (cszy.length() == 0)) {
			jbxxCacheModel.cszy = null;
		}

		jbxxCacheModel.zygznx = getZygznx();

		String zygznx = jbxxCacheModel.zygznx;

		if ((zygznx != null) && (zygznx.length() == 0)) {
			jbxxCacheModel.zygznx = null;
		}

		jbxxCacheModel.sjhm = getSjhm();

		String sjhm = jbxxCacheModel.sjhm;

		if ((sjhm != null) && (sjhm.length() == 0)) {
			jbxxCacheModel.sjhm = null;
		}

		jbxxCacheModel.lxdh = getLxdh();

		String lxdh = jbxxCacheModel.lxdh;

		if ((lxdh != null) && (lxdh.length() == 0)) {
			jbxxCacheModel.lxdh = null;
		}

		jbxxCacheModel.cz = getCz();

		String cz = jbxxCacheModel.cz;

		if ((cz != null) && (cz.length() == 0)) {
			jbxxCacheModel.cz = null;
		}

		return jbxxCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{jbxxId=");
		sb.append(getJbxxId());
		sb.append(", xm=");
		sb.append(getXm());
		sb.append(", xb=");
		sb.append(getXb());
		sb.append(", sfzh=");
		sb.append(getSfzh());
		sb.append(", csny=");
		sb.append(getCsny());
		sb.append(", gzdw=");
		sb.append(getGzdw());
		sb.append(", dzyx=");
		sb.append(getDzyx());
		sb.append(", txdz=");
		sb.append(getTxdz());
		sb.append(", yzbm=");
		sb.append(getYzbm());
		sb.append(", xrzw=");
		sb.append(getXrzw());
		sb.append(", zc=");
		sb.append(getZc());
		sb.append(", zyzg=");
		sb.append(getZyzg());
		sb.append(", cszy=");
		sb.append(getCszy());
		sb.append(", zygznx=");
		sb.append(getZygznx());
		sb.append(", sjhm=");
		sb.append(getSjhm());
		sb.append(", lxdh=");
		sb.append(getLxdh());
		sb.append(", cz=");
		sb.append(getCz());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.expert.model.Jbxx");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>jbxxId</column-name><column-value><![CDATA[");
		sb.append(getJbxxId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xm</column-name><column-value><![CDATA[");
		sb.append(getXm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xb</column-name><column-value><![CDATA[");
		sb.append(getXb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfzh</column-name><column-value><![CDATA[");
		sb.append(getSfzh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>csny</column-name><column-value><![CDATA[");
		sb.append(getCsny());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gzdw</column-name><column-value><![CDATA[");
		sb.append(getGzdw());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dzyx</column-name><column-value><![CDATA[");
		sb.append(getDzyx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>txdz</column-name><column-value><![CDATA[");
		sb.append(getTxdz());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>yzbm</column-name><column-value><![CDATA[");
		sb.append(getYzbm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xrzw</column-name><column-value><![CDATA[");
		sb.append(getXrzw());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zc</column-name><column-value><![CDATA[");
		sb.append(getZc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zyzg</column-name><column-value><![CDATA[");
		sb.append(getZyzg());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cszy</column-name><column-value><![CDATA[");
		sb.append(getCszy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zygznx</column-name><column-value><![CDATA[");
		sb.append(getZygznx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sjhm</column-name><column-value><![CDATA[");
		sb.append(getSjhm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lxdh</column-name><column-value><![CDATA[");
		sb.append(getLxdh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cz</column-name><column-value><![CDATA[");
		sb.append(getCz());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Jbxx.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Jbxx.class };
	private long _jbxxId;
	private String _xm;
	private String _xb;
	private String _sfzh;
	private Date _csny;
	private String _gzdw;
	private String _dzyx;
	private String _txdz;
	private String _yzbm;
	private String _xrzw;
	private String _zc;
	private String _zyzg;
	private String _cszy;
	private String _zygznx;
	private String _sjhm;
	private String _lxdh;
	private String _cz;
	private Jbxx _escapedModel;
}