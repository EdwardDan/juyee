/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.expert.model.impl;

import com.justonetech.expert.model.Zzjl;
import com.justonetech.expert.model.ZzjlModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Zzjl service. Represents a row in the &quot;expert_Zzjl&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.expert.model.ZzjlModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ZzjlImpl}.
 * </p>
 *
 * @author fanqi
 * @see ZzjlImpl
 * @see com.justonetech.expert.model.Zzjl
 * @see com.justonetech.expert.model.ZzjlModel
 * @generated
 */
public class ZzjlModelImpl extends BaseModelImpl<Zzjl> implements ZzjlModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a zzjl model instance should use the {@link com.justonetech.expert.model.Zzjl} interface instead.
	 */
	public static final String TABLE_NAME = "expert_Zzjl";
	public static final Object[][] TABLE_COLUMNS = {
			{ "zzjlId", Types.BIGINT },
			{ "expertId", Types.VARCHAR },
			{ "zzdw", Types.VARCHAR },
			{ "qzny", Types.VARCHAR },
			{ "cszyzygz", Types.VARCHAR },
			{ "zw", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table expert_Zzjl (zzjlId LONG not null primary key,expertId VARCHAR(75) null,zzdw VARCHAR(75) null,qzny VARCHAR(75) null,cszyzygz VARCHAR(75) null,zw VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table expert_Zzjl";
	public static final String ORDER_BY_JPQL = " ORDER BY zzjl.zzjlId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY expert_Zzjl.zzjlId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.expert.model.Zzjl"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.expert.model.Zzjl"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.expert.model.Zzjl"));

	public ZzjlModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _zzjlId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setZzjlId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _zzjlId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Zzjl.class;
	}

	@Override
	public String getModelClassName() {
		return Zzjl.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("zzjlId", getZzjlId());
		attributes.put("expertId", getExpertId());
		attributes.put("zzdw", getZzdw());
		attributes.put("qzny", getQzny());
		attributes.put("cszyzygz", getCszyzygz());
		attributes.put("zw", getZw());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long zzjlId = (Long)attributes.get("zzjlId");

		if (zzjlId != null) {
			setZzjlId(zzjlId);
		}

		String expertId = (String)attributes.get("expertId");

		if (expertId != null) {
			setExpertId(expertId);
		}

		String zzdw = (String)attributes.get("zzdw");

		if (zzdw != null) {
			setZzdw(zzdw);
		}

		String qzny = (String)attributes.get("qzny");

		if (qzny != null) {
			setQzny(qzny);
		}

		String cszyzygz = (String)attributes.get("cszyzygz");

		if (cszyzygz != null) {
			setCszyzygz(cszyzygz);
		}

		String zw = (String)attributes.get("zw");

		if (zw != null) {
			setZw(zw);
		}
	}

	@Override
	public long getZzjlId() {
		return _zzjlId;
	}

	@Override
	public void setZzjlId(long zzjlId) {
		_zzjlId = zzjlId;
	}

	@Override
	public String getExpertId() {
		if (_expertId == null) {
			return StringPool.BLANK;
		}
		else {
			return _expertId;
		}
	}

	@Override
	public void setExpertId(String expertId) {
		_expertId = expertId;
	}

	@Override
	public String getZzdw() {
		if (_zzdw == null) {
			return StringPool.BLANK;
		}
		else {
			return _zzdw;
		}
	}

	@Override
	public void setZzdw(String zzdw) {
		_zzdw = zzdw;
	}

	@Override
	public String getQzny() {
		if (_qzny == null) {
			return StringPool.BLANK;
		}
		else {
			return _qzny;
		}
	}

	@Override
	public void setQzny(String qzny) {
		_qzny = qzny;
	}

	@Override
	public String getCszyzygz() {
		if (_cszyzygz == null) {
			return StringPool.BLANK;
		}
		else {
			return _cszyzygz;
		}
	}

	@Override
	public void setCszyzygz(String cszyzygz) {
		_cszyzygz = cszyzygz;
	}

	@Override
	public String getZw() {
		if (_zw == null) {
			return StringPool.BLANK;
		}
		else {
			return _zw;
		}
	}

	@Override
	public void setZw(String zw) {
		_zw = zw;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Zzjl.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Zzjl toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Zzjl)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ZzjlImpl zzjlImpl = new ZzjlImpl();

		zzjlImpl.setZzjlId(getZzjlId());
		zzjlImpl.setExpertId(getExpertId());
		zzjlImpl.setZzdw(getZzdw());
		zzjlImpl.setQzny(getQzny());
		zzjlImpl.setCszyzygz(getCszyzygz());
		zzjlImpl.setZw(getZw());

		zzjlImpl.resetOriginalValues();

		return zzjlImpl;
	}

	@Override
	public int compareTo(Zzjl zzjl) {
		int value = 0;

		if (getZzjlId() < zzjl.getZzjlId()) {
			value = -1;
		}
		else if (getZzjlId() > zzjl.getZzjlId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Zzjl)) {
			return false;
		}

		Zzjl zzjl = (Zzjl)obj;

		long primaryKey = zzjl.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Zzjl> toCacheModel() {
		ZzjlCacheModel zzjlCacheModel = new ZzjlCacheModel();

		zzjlCacheModel.zzjlId = getZzjlId();

		zzjlCacheModel.expertId = getExpertId();

		String expertId = zzjlCacheModel.expertId;

		if ((expertId != null) && (expertId.length() == 0)) {
			zzjlCacheModel.expertId = null;
		}

		zzjlCacheModel.zzdw = getZzdw();

		String zzdw = zzjlCacheModel.zzdw;

		if ((zzdw != null) && (zzdw.length() == 0)) {
			zzjlCacheModel.zzdw = null;
		}

		zzjlCacheModel.qzny = getQzny();

		String qzny = zzjlCacheModel.qzny;

		if ((qzny != null) && (qzny.length() == 0)) {
			zzjlCacheModel.qzny = null;
		}

		zzjlCacheModel.cszyzygz = getCszyzygz();

		String cszyzygz = zzjlCacheModel.cszyzygz;

		if ((cszyzygz != null) && (cszyzygz.length() == 0)) {
			zzjlCacheModel.cszyzygz = null;
		}

		zzjlCacheModel.zw = getZw();

		String zw = zzjlCacheModel.zw;

		if ((zw != null) && (zw.length() == 0)) {
			zzjlCacheModel.zw = null;
		}

		return zzjlCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{zzjlId=");
		sb.append(getZzjlId());
		sb.append(", expertId=");
		sb.append(getExpertId());
		sb.append(", zzdw=");
		sb.append(getZzdw());
		sb.append(", qzny=");
		sb.append(getQzny());
		sb.append(", cszyzygz=");
		sb.append(getCszyzygz());
		sb.append(", zw=");
		sb.append(getZw());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.expert.model.Zzjl");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>zzjlId</column-name><column-value><![CDATA[");
		sb.append(getZzjlId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expertId</column-name><column-value><![CDATA[");
		sb.append(getExpertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zzdw</column-name><column-value><![CDATA[");
		sb.append(getZzdw());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qzny</column-name><column-value><![CDATA[");
		sb.append(getQzny());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cszyzygz</column-name><column-value><![CDATA[");
		sb.append(getCszyzygz());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zw</column-name><column-value><![CDATA[");
		sb.append(getZw());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Zzjl.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Zzjl.class };
	private long _zzjlId;
	private String _expertId;
	private String _zzdw;
	private String _qzny;
	private String _cszyzygz;
	private String _zw;
	private Zzjl _escapedModel;
}