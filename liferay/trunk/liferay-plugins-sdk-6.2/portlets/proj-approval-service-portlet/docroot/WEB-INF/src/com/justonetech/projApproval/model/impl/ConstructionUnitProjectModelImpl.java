/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.projApproval.model.impl;

import com.justonetech.projApproval.model.ConstructionUnitProject;
import com.justonetech.projApproval.model.ConstructionUnitProjectModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ConstructionUnitProject service. Represents a row in the &quot;projApproval_ConstructionUnitProject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.projApproval.model.ConstructionUnitProjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConstructionUnitProjectImpl}.
 * </p>
 *
 * @author justonetech
 * @see ConstructionUnitProjectImpl
 * @see com.justonetech.projApproval.model.ConstructionUnitProject
 * @see com.justonetech.projApproval.model.ConstructionUnitProjectModel
 * @generated
 */
public class ConstructionUnitProjectModelImpl extends BaseModelImpl<ConstructionUnitProject>
	implements ConstructionUnitProjectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a construction unit project model instance should use the {@link com.justonetech.projApproval.model.ConstructionUnitProject} interface instead.
	 */
	public static final String TABLE_NAME = "projApproval_ConstructionUnitProject";
	public static final Object[][] TABLE_COLUMNS = {
			{ "constructionUnitProjectId", Types.BIGINT },
			{ "sortNo", Types.INTEGER },
			{ "unitProjectNum", Types.VARCHAR },
			{ "unitProjectName", Types.VARCHAR },
			{ "constructionContent", Types.VARCHAR },
			{ "constructionPermitId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table projApproval_ConstructionUnitProject (constructionUnitProjectId LONG not null primary key,sortNo INTEGER,unitProjectNum VARCHAR(75) null,unitProjectName VARCHAR(200) null,constructionContent VARCHAR(1000) null,constructionPermitId LONG)";
	public static final String TABLE_SQL_DROP = "drop table projApproval_ConstructionUnitProject";
	public static final String ORDER_BY_JPQL = " ORDER BY constructionUnitProject.constructionUnitProjectId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY projApproval_ConstructionUnitProject.constructionUnitProjectId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.projApproval.model.ConstructionUnitProject"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.projApproval.model.ConstructionUnitProject"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.justonetech.projApproval.model.ConstructionUnitProject"),
			true);
	public static long CONSTRUCTIONPERMITID_COLUMN_BITMASK = 1L;
	public static long CONSTRUCTIONUNITPROJECTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.projApproval.model.ConstructionUnitProject"));

	public ConstructionUnitProjectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _constructionUnitProjectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConstructionUnitProjectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _constructionUnitProjectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConstructionUnitProject.class;
	}

	@Override
	public String getModelClassName() {
		return ConstructionUnitProject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("constructionUnitProjectId",
			getConstructionUnitProjectId());
		attributes.put("sortNo", getSortNo());
		attributes.put("unitProjectNum", getUnitProjectNum());
		attributes.put("unitProjectName", getUnitProjectName());
		attributes.put("constructionContent", getConstructionContent());
		attributes.put("constructionPermitId", getConstructionPermitId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long constructionUnitProjectId = (Long)attributes.get(
				"constructionUnitProjectId");

		if (constructionUnitProjectId != null) {
			setConstructionUnitProjectId(constructionUnitProjectId);
		}

		Integer sortNo = (Integer)attributes.get("sortNo");

		if (sortNo != null) {
			setSortNo(sortNo);
		}

		String unitProjectNum = (String)attributes.get("unitProjectNum");

		if (unitProjectNum != null) {
			setUnitProjectNum(unitProjectNum);
		}

		String unitProjectName = (String)attributes.get("unitProjectName");

		if (unitProjectName != null) {
			setUnitProjectName(unitProjectName);
		}

		String constructionContent = (String)attributes.get(
				"constructionContent");

		if (constructionContent != null) {
			setConstructionContent(constructionContent);
		}

		Long constructionPermitId = (Long)attributes.get("constructionPermitId");

		if (constructionPermitId != null) {
			setConstructionPermitId(constructionPermitId);
		}
	}

	@Override
	public long getConstructionUnitProjectId() {
		return _constructionUnitProjectId;
	}

	@Override
	public void setConstructionUnitProjectId(long constructionUnitProjectId) {
		_constructionUnitProjectId = constructionUnitProjectId;
	}

	@Override
	public int getSortNo() {
		return _sortNo;
	}

	@Override
	public void setSortNo(int sortNo) {
		_sortNo = sortNo;
	}

	@Override
	public String getUnitProjectNum() {
		if (_unitProjectNum == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitProjectNum;
		}
	}

	@Override
	public void setUnitProjectNum(String unitProjectNum) {
		_unitProjectNum = unitProjectNum;
	}

	@Override
	public String getUnitProjectName() {
		if (_unitProjectName == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitProjectName;
		}
	}

	@Override
	public void setUnitProjectName(String unitProjectName) {
		_unitProjectName = unitProjectName;
	}

	@Override
	public String getConstructionContent() {
		if (_constructionContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _constructionContent;
		}
	}

	@Override
	public void setConstructionContent(String constructionContent) {
		_constructionContent = constructionContent;
	}

	@Override
	public long getConstructionPermitId() {
		return _constructionPermitId;
	}

	@Override
	public void setConstructionPermitId(long constructionPermitId) {
		_columnBitmask |= CONSTRUCTIONPERMITID_COLUMN_BITMASK;

		if (!_setOriginalConstructionPermitId) {
			_setOriginalConstructionPermitId = true;

			_originalConstructionPermitId = _constructionPermitId;
		}

		_constructionPermitId = constructionPermitId;
	}

	public long getOriginalConstructionPermitId() {
		return _originalConstructionPermitId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ConstructionUnitProject.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConstructionUnitProject toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ConstructionUnitProject)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConstructionUnitProjectImpl constructionUnitProjectImpl = new ConstructionUnitProjectImpl();

		constructionUnitProjectImpl.setConstructionUnitProjectId(getConstructionUnitProjectId());
		constructionUnitProjectImpl.setSortNo(getSortNo());
		constructionUnitProjectImpl.setUnitProjectNum(getUnitProjectNum());
		constructionUnitProjectImpl.setUnitProjectName(getUnitProjectName());
		constructionUnitProjectImpl.setConstructionContent(getConstructionContent());
		constructionUnitProjectImpl.setConstructionPermitId(getConstructionPermitId());

		constructionUnitProjectImpl.resetOriginalValues();

		return constructionUnitProjectImpl;
	}

	@Override
	public int compareTo(ConstructionUnitProject constructionUnitProject) {
		long primaryKey = constructionUnitProject.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ConstructionUnitProject)) {
			return false;
		}

		ConstructionUnitProject constructionUnitProject = (ConstructionUnitProject)obj;

		long primaryKey = constructionUnitProject.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ConstructionUnitProjectModelImpl constructionUnitProjectModelImpl = this;

		constructionUnitProjectModelImpl._originalConstructionPermitId = constructionUnitProjectModelImpl._constructionPermitId;

		constructionUnitProjectModelImpl._setOriginalConstructionPermitId = false;

		constructionUnitProjectModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ConstructionUnitProject> toCacheModel() {
		ConstructionUnitProjectCacheModel constructionUnitProjectCacheModel = new ConstructionUnitProjectCacheModel();

		constructionUnitProjectCacheModel.constructionUnitProjectId = getConstructionUnitProjectId();

		constructionUnitProjectCacheModel.sortNo = getSortNo();

		constructionUnitProjectCacheModel.unitProjectNum = getUnitProjectNum();

		String unitProjectNum = constructionUnitProjectCacheModel.unitProjectNum;

		if ((unitProjectNum != null) && (unitProjectNum.length() == 0)) {
			constructionUnitProjectCacheModel.unitProjectNum = null;
		}

		constructionUnitProjectCacheModel.unitProjectName = getUnitProjectName();

		String unitProjectName = constructionUnitProjectCacheModel.unitProjectName;

		if ((unitProjectName != null) && (unitProjectName.length() == 0)) {
			constructionUnitProjectCacheModel.unitProjectName = null;
		}

		constructionUnitProjectCacheModel.constructionContent = getConstructionContent();

		String constructionContent = constructionUnitProjectCacheModel.constructionContent;

		if ((constructionContent != null) &&
				(constructionContent.length() == 0)) {
			constructionUnitProjectCacheModel.constructionContent = null;
		}

		constructionUnitProjectCacheModel.constructionPermitId = getConstructionPermitId();

		return constructionUnitProjectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{constructionUnitProjectId=");
		sb.append(getConstructionUnitProjectId());
		sb.append(", sortNo=");
		sb.append(getSortNo());
		sb.append(", unitProjectNum=");
		sb.append(getUnitProjectNum());
		sb.append(", unitProjectName=");
		sb.append(getUnitProjectName());
		sb.append(", constructionContent=");
		sb.append(getConstructionContent());
		sb.append(", constructionPermitId=");
		sb.append(getConstructionPermitId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.projApproval.model.ConstructionUnitProject");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>constructionUnitProjectId</column-name><column-value><![CDATA[");
		sb.append(getConstructionUnitProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sortNo</column-name><column-value><![CDATA[");
		sb.append(getSortNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitProjectNum</column-name><column-value><![CDATA[");
		sb.append(getUnitProjectNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitProjectName</column-name><column-value><![CDATA[");
		sb.append(getUnitProjectName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>constructionContent</column-name><column-value><![CDATA[");
		sb.append(getConstructionContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>constructionPermitId</column-name><column-value><![CDATA[");
		sb.append(getConstructionPermitId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ConstructionUnitProject.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ConstructionUnitProject.class
		};
	private long _constructionUnitProjectId;
	private int _sortNo;
	private String _unitProjectNum;
	private String _unitProjectName;
	private String _constructionContent;
	private long _constructionPermitId;
	private long _originalConstructionPermitId;
	private boolean _setOriginalConstructionPermitId;
	private long _columnBitmask;
	private ConstructionUnitProject _escapedModel;
}