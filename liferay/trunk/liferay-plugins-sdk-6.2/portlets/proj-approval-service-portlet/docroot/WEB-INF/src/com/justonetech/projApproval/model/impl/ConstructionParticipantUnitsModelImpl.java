/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.projApproval.model.impl;

import com.justonetech.projApproval.model.ConstructionParticipantUnits;
import com.justonetech.projApproval.model.ConstructionParticipantUnitsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ConstructionParticipantUnits service. Represents a row in the &quot;projApproval_ConstructionParticipantUnits&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.projApproval.model.ConstructionParticipantUnitsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConstructionParticipantUnitsImpl}.
 * </p>
 *
 * @author justonetech
 * @see ConstructionParticipantUnitsImpl
 * @see com.justonetech.projApproval.model.ConstructionParticipantUnits
 * @see com.justonetech.projApproval.model.ConstructionParticipantUnitsModel
 * @generated
 */
public class ConstructionParticipantUnitsModelImpl extends BaseModelImpl<ConstructionParticipantUnits>
	implements ConstructionParticipantUnitsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a construction participant units model instance should use the {@link com.justonetech.projApproval.model.ConstructionParticipantUnits} interface instead.
	 */
	public static final String TABLE_NAME = "projApproval_ConstructionParticipantUnits";
	public static final Object[][] TABLE_COLUMNS = {
			{ "constructionParticipantUnitsId", Types.BIGINT },
			{ "sortNo", Types.INTEGER },
			{ "contractInfoSubmitNum", Types.VARCHAR },
			{ "unitType", Types.BIGINT },
			{ "unitName", Types.VARCHAR },
			{ "projectLeader", Types.VARCHAR },
			{ "telephoneNum", Types.VARCHAR },
			{ "constructionPermitId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table projApproval_ConstructionParticipantUnits (constructionParticipantUnitsId LONG not null primary key,sortNo INTEGER,contractInfoSubmitNum VARCHAR(75) null,unitType LONG,unitName VARCHAR(200) null,projectLeader VARCHAR(75) null,telephoneNum VARCHAR(75) null,constructionPermitId LONG)";
	public static final String TABLE_SQL_DROP = "drop table projApproval_ConstructionParticipantUnits";
	public static final String ORDER_BY_JPQL = " ORDER BY constructionParticipantUnits.constructionParticipantUnitsId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY projApproval_ConstructionParticipantUnits.constructionParticipantUnitsId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.projApproval.model.ConstructionParticipantUnits"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.projApproval.model.ConstructionParticipantUnits"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.justonetech.projApproval.model.ConstructionParticipantUnits"),
			true);
	public static long CONSTRUCTIONPERMITID_COLUMN_BITMASK = 1L;
	public static long CONSTRUCTIONPARTICIPANTUNITSID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.projApproval.model.ConstructionParticipantUnits"));

	public ConstructionParticipantUnitsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _constructionParticipantUnitsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConstructionParticipantUnitsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _constructionParticipantUnitsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConstructionParticipantUnits.class;
	}

	@Override
	public String getModelClassName() {
		return ConstructionParticipantUnits.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("constructionParticipantUnitsId",
			getConstructionParticipantUnitsId());
		attributes.put("sortNo", getSortNo());
		attributes.put("contractInfoSubmitNum", getContractInfoSubmitNum());
		attributes.put("unitType", getUnitType());
		attributes.put("unitName", getUnitName());
		attributes.put("projectLeader", getProjectLeader());
		attributes.put("telephoneNum", getTelephoneNum());
		attributes.put("constructionPermitId", getConstructionPermitId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long constructionParticipantUnitsId = (Long)attributes.get(
				"constructionParticipantUnitsId");

		if (constructionParticipantUnitsId != null) {
			setConstructionParticipantUnitsId(constructionParticipantUnitsId);
		}

		Integer sortNo = (Integer)attributes.get("sortNo");

		if (sortNo != null) {
			setSortNo(sortNo);
		}

		String contractInfoSubmitNum = (String)attributes.get(
				"contractInfoSubmitNum");

		if (contractInfoSubmitNum != null) {
			setContractInfoSubmitNum(contractInfoSubmitNum);
		}

		Long unitType = (Long)attributes.get("unitType");

		if (unitType != null) {
			setUnitType(unitType);
		}

		String unitName = (String)attributes.get("unitName");

		if (unitName != null) {
			setUnitName(unitName);
		}

		String projectLeader = (String)attributes.get("projectLeader");

		if (projectLeader != null) {
			setProjectLeader(projectLeader);
		}

		String telephoneNum = (String)attributes.get("telephoneNum");

		if (telephoneNum != null) {
			setTelephoneNum(telephoneNum);
		}

		Long constructionPermitId = (Long)attributes.get("constructionPermitId");

		if (constructionPermitId != null) {
			setConstructionPermitId(constructionPermitId);
		}
	}

	@Override
	public long getConstructionParticipantUnitsId() {
		return _constructionParticipantUnitsId;
	}

	@Override
	public void setConstructionParticipantUnitsId(
		long constructionParticipantUnitsId) {
		_constructionParticipantUnitsId = constructionParticipantUnitsId;
	}

	@Override
	public int getSortNo() {
		return _sortNo;
	}

	@Override
	public void setSortNo(int sortNo) {
		_sortNo = sortNo;
	}

	@Override
	public String getContractInfoSubmitNum() {
		if (_contractInfoSubmitNum == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractInfoSubmitNum;
		}
	}

	@Override
	public void setContractInfoSubmitNum(String contractInfoSubmitNum) {
		_contractInfoSubmitNum = contractInfoSubmitNum;
	}

	@Override
	public long getUnitType() {
		return _unitType;
	}

	@Override
	public void setUnitType(long unitType) {
		_unitType = unitType;
	}

	@Override
	public String getUnitName() {
		if (_unitName == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitName;
		}
	}

	@Override
	public void setUnitName(String unitName) {
		_unitName = unitName;
	}

	@Override
	public String getProjectLeader() {
		if (_projectLeader == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectLeader;
		}
	}

	@Override
	public void setProjectLeader(String projectLeader) {
		_projectLeader = projectLeader;
	}

	@Override
	public String getTelephoneNum() {
		if (_telephoneNum == null) {
			return StringPool.BLANK;
		}
		else {
			return _telephoneNum;
		}
	}

	@Override
	public void setTelephoneNum(String telephoneNum) {
		_telephoneNum = telephoneNum;
	}

	@Override
	public long getConstructionPermitId() {
		return _constructionPermitId;
	}

	@Override
	public void setConstructionPermitId(long constructionPermitId) {
		_columnBitmask |= CONSTRUCTIONPERMITID_COLUMN_BITMASK;

		if (!_setOriginalConstructionPermitId) {
			_setOriginalConstructionPermitId = true;

			_originalConstructionPermitId = _constructionPermitId;
		}

		_constructionPermitId = constructionPermitId;
	}

	public long getOriginalConstructionPermitId() {
		return _originalConstructionPermitId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ConstructionParticipantUnits.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConstructionParticipantUnits toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ConstructionParticipantUnits)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConstructionParticipantUnitsImpl constructionParticipantUnitsImpl = new ConstructionParticipantUnitsImpl();

		constructionParticipantUnitsImpl.setConstructionParticipantUnitsId(getConstructionParticipantUnitsId());
		constructionParticipantUnitsImpl.setSortNo(getSortNo());
		constructionParticipantUnitsImpl.setContractInfoSubmitNum(getContractInfoSubmitNum());
		constructionParticipantUnitsImpl.setUnitType(getUnitType());
		constructionParticipantUnitsImpl.setUnitName(getUnitName());
		constructionParticipantUnitsImpl.setProjectLeader(getProjectLeader());
		constructionParticipantUnitsImpl.setTelephoneNum(getTelephoneNum());
		constructionParticipantUnitsImpl.setConstructionPermitId(getConstructionPermitId());

		constructionParticipantUnitsImpl.resetOriginalValues();

		return constructionParticipantUnitsImpl;
	}

	@Override
	public int compareTo(
		ConstructionParticipantUnits constructionParticipantUnits) {
		long primaryKey = constructionParticipantUnits.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ConstructionParticipantUnits)) {
			return false;
		}

		ConstructionParticipantUnits constructionParticipantUnits = (ConstructionParticipantUnits)obj;

		long primaryKey = constructionParticipantUnits.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ConstructionParticipantUnitsModelImpl constructionParticipantUnitsModelImpl =
			this;

		constructionParticipantUnitsModelImpl._originalConstructionPermitId = constructionParticipantUnitsModelImpl._constructionPermitId;

		constructionParticipantUnitsModelImpl._setOriginalConstructionPermitId = false;

		constructionParticipantUnitsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ConstructionParticipantUnits> toCacheModel() {
		ConstructionParticipantUnitsCacheModel constructionParticipantUnitsCacheModel =
			new ConstructionParticipantUnitsCacheModel();

		constructionParticipantUnitsCacheModel.constructionParticipantUnitsId = getConstructionParticipantUnitsId();

		constructionParticipantUnitsCacheModel.sortNo = getSortNo();

		constructionParticipantUnitsCacheModel.contractInfoSubmitNum = getContractInfoSubmitNum();

		String contractInfoSubmitNum = constructionParticipantUnitsCacheModel.contractInfoSubmitNum;

		if ((contractInfoSubmitNum != null) &&
				(contractInfoSubmitNum.length() == 0)) {
			constructionParticipantUnitsCacheModel.contractInfoSubmitNum = null;
		}

		constructionParticipantUnitsCacheModel.unitType = getUnitType();

		constructionParticipantUnitsCacheModel.unitName = getUnitName();

		String unitName = constructionParticipantUnitsCacheModel.unitName;

		if ((unitName != null) && (unitName.length() == 0)) {
			constructionParticipantUnitsCacheModel.unitName = null;
		}

		constructionParticipantUnitsCacheModel.projectLeader = getProjectLeader();

		String projectLeader = constructionParticipantUnitsCacheModel.projectLeader;

		if ((projectLeader != null) && (projectLeader.length() == 0)) {
			constructionParticipantUnitsCacheModel.projectLeader = null;
		}

		constructionParticipantUnitsCacheModel.telephoneNum = getTelephoneNum();

		String telephoneNum = constructionParticipantUnitsCacheModel.telephoneNum;

		if ((telephoneNum != null) && (telephoneNum.length() == 0)) {
			constructionParticipantUnitsCacheModel.telephoneNum = null;
		}

		constructionParticipantUnitsCacheModel.constructionPermitId = getConstructionPermitId();

		return constructionParticipantUnitsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{constructionParticipantUnitsId=");
		sb.append(getConstructionParticipantUnitsId());
		sb.append(", sortNo=");
		sb.append(getSortNo());
		sb.append(", contractInfoSubmitNum=");
		sb.append(getContractInfoSubmitNum());
		sb.append(", unitType=");
		sb.append(getUnitType());
		sb.append(", unitName=");
		sb.append(getUnitName());
		sb.append(", projectLeader=");
		sb.append(getProjectLeader());
		sb.append(", telephoneNum=");
		sb.append(getTelephoneNum());
		sb.append(", constructionPermitId=");
		sb.append(getConstructionPermitId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append(
			"com.justonetech.projApproval.model.ConstructionParticipantUnits");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>constructionParticipantUnitsId</column-name><column-value><![CDATA[");
		sb.append(getConstructionParticipantUnitsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sortNo</column-name><column-value><![CDATA[");
		sb.append(getSortNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractInfoSubmitNum</column-name><column-value><![CDATA[");
		sb.append(getContractInfoSubmitNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitType</column-name><column-value><![CDATA[");
		sb.append(getUnitType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitName</column-name><column-value><![CDATA[");
		sb.append(getUnitName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectLeader</column-name><column-value><![CDATA[");
		sb.append(getProjectLeader());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>telephoneNum</column-name><column-value><![CDATA[");
		sb.append(getTelephoneNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>constructionPermitId</column-name><column-value><![CDATA[");
		sb.append(getConstructionPermitId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ConstructionParticipantUnits.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ConstructionParticipantUnits.class
		};
	private long _constructionParticipantUnitsId;
	private int _sortNo;
	private String _contractInfoSubmitNum;
	private long _unitType;
	private String _unitName;
	private String _projectLeader;
	private String _telephoneNum;
	private long _constructionPermitId;
	private long _originalConstructionPermitId;
	private boolean _setOriginalConstructionPermitId;
	private long _columnBitmask;
	private ConstructionParticipantUnits _escapedModel;
}