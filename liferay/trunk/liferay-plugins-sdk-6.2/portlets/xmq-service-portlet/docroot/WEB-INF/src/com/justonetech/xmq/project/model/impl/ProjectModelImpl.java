/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.xmq.project.model.impl;

import com.justonetech.xmq.project.model.Project;
import com.justonetech.xmq.project.model.ProjectModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Project service. Represents a row in the &quot;xmq_Project&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.xmq.project.model.ProjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectImpl}.
 * </p>
 *
 * @author fanqi
 * @see ProjectImpl
 * @see com.justonetech.xmq.project.model.Project
 * @see com.justonetech.xmq.project.model.ProjectModel
 * @generated
 */
public class ProjectModelImpl extends BaseModelImpl<Project>
	implements ProjectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project model instance should use the {@link com.justonetech.xmq.project.model.Project} interface instead.
	 */
	public static final String TABLE_NAME = "xmq_Project";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bjbh", Types.VARCHAR },
			{ "bjrq", Types.TIMESTAMP },
			{ "bjWebid", Types.VARCHAR },
			{ "xmmc", Types.VARCHAR },
			{ "bjwcbj", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table xmq_Project (bjbh VARCHAR(75) not null primary key,bjrq DATE null,bjWebid VARCHAR(75) null,xmmc VARCHAR(75) null,bjwcbj VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table xmq_Project";
	public static final String ORDER_BY_JPQL = " ORDER BY project.bjrq DESC";
	public static final String ORDER_BY_SQL = " ORDER BY xmq_Project.bjrq DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.xmq.project.model.Project"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.xmq.project.model.Project"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.xmq.project.model.Project"));

	public ProjectModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _bjbh;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setBjbh(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bjbh;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Project.class;
	}

	@Override
	public String getModelClassName() {
		return Project.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bjbh", getBjbh());
		attributes.put("bjrq", getBjrq());
		attributes.put("bjWebid", getBjWebid());
		attributes.put("xmmc", getXmmc());
		attributes.put("bjwcbj", getBjwcbj());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String bjbh = (String)attributes.get("bjbh");

		if (bjbh != null) {
			setBjbh(bjbh);
		}

		Date bjrq = (Date)attributes.get("bjrq");

		if (bjrq != null) {
			setBjrq(bjrq);
		}

		String bjWebid = (String)attributes.get("bjWebid");

		if (bjWebid != null) {
			setBjWebid(bjWebid);
		}

		String xmmc = (String)attributes.get("xmmc");

		if (xmmc != null) {
			setXmmc(xmmc);
		}

		String bjwcbj = (String)attributes.get("bjwcbj");

		if (bjwcbj != null) {
			setBjwcbj(bjwcbj);
		}
	}

	@Override
	public String getBjbh() {
		if (_bjbh == null) {
			return StringPool.BLANK;
		}
		else {
			return _bjbh;
		}
	}

	@Override
	public void setBjbh(String bjbh) {
		_bjbh = bjbh;
	}

	@Override
	public Date getBjrq() {
		return _bjrq;
	}

	@Override
	public void setBjrq(Date bjrq) {
		_bjrq = bjrq;
	}

	@Override
	public String getBjWebid() {
		if (_bjWebid == null) {
			return StringPool.BLANK;
		}
		else {
			return _bjWebid;
		}
	}

	@Override
	public void setBjWebid(String bjWebid) {
		_bjWebid = bjWebid;
	}

	@Override
	public String getXmmc() {
		if (_xmmc == null) {
			return StringPool.BLANK;
		}
		else {
			return _xmmc;
		}
	}

	@Override
	public void setXmmc(String xmmc) {
		_xmmc = xmmc;
	}

	@Override
	public String getBjwcbj() {
		if (_bjwcbj == null) {
			return StringPool.BLANK;
		}
		else {
			return _bjwcbj;
		}
	}

	@Override
	public void setBjwcbj(String bjwcbj) {
		_bjwcbj = bjwcbj;
	}

	@Override
	public Project toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Project)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectImpl projectImpl = new ProjectImpl();

		projectImpl.setBjbh(getBjbh());
		projectImpl.setBjrq(getBjrq());
		projectImpl.setBjWebid(getBjWebid());
		projectImpl.setXmmc(getXmmc());
		projectImpl.setBjwcbj(getBjwcbj());

		projectImpl.resetOriginalValues();

		return projectImpl;
	}

	@Override
	public int compareTo(Project project) {
		int value = 0;

		value = DateUtil.compareTo(getBjrq(), project.getBjrq());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Project)) {
			return false;
		}

		Project project = (Project)obj;

		String primaryKey = project.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Project> toCacheModel() {
		ProjectCacheModel projectCacheModel = new ProjectCacheModel();

		projectCacheModel.bjbh = getBjbh();

		String bjbh = projectCacheModel.bjbh;

		if ((bjbh != null) && (bjbh.length() == 0)) {
			projectCacheModel.bjbh = null;
		}

		Date bjrq = getBjrq();

		if (bjrq != null) {
			projectCacheModel.bjrq = bjrq.getTime();
		}
		else {
			projectCacheModel.bjrq = Long.MIN_VALUE;
		}

		projectCacheModel.bjWebid = getBjWebid();

		String bjWebid = projectCacheModel.bjWebid;

		if ((bjWebid != null) && (bjWebid.length() == 0)) {
			projectCacheModel.bjWebid = null;
		}

		projectCacheModel.xmmc = getXmmc();

		String xmmc = projectCacheModel.xmmc;

		if ((xmmc != null) && (xmmc.length() == 0)) {
			projectCacheModel.xmmc = null;
		}

		projectCacheModel.bjwcbj = getBjwcbj();

		String bjwcbj = projectCacheModel.bjwcbj;

		if ((bjwcbj != null) && (bjwcbj.length() == 0)) {
			projectCacheModel.bjwcbj = null;
		}

		return projectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{bjbh=");
		sb.append(getBjbh());
		sb.append(", bjrq=");
		sb.append(getBjrq());
		sb.append(", bjWebid=");
		sb.append(getBjWebid());
		sb.append(", xmmc=");
		sb.append(getXmmc());
		sb.append(", bjwcbj=");
		sb.append(getBjwcbj());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.xmq.project.model.Project");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bjbh</column-name><column-value><![CDATA[");
		sb.append(getBjbh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bjrq</column-name><column-value><![CDATA[");
		sb.append(getBjrq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bjWebid</column-name><column-value><![CDATA[");
		sb.append(getBjWebid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xmmc</column-name><column-value><![CDATA[");
		sb.append(getXmmc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bjwcbj</column-name><column-value><![CDATA[");
		sb.append(getBjwcbj());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Project.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Project.class
		};
	private String _bjbh;
	private Date _bjrq;
	private String _bjWebid;
	private String _xmmc;
	private String _bjwcbj;
	private Project _escapedModel;
}