/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.cp.contract.model.impl;

import com.justonetech.cp.contract.model.Contract;
import com.justonetech.cp.contract.model.ContractModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Contract service. Represents a row in the &quot;cp_Contract&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.cp.contract.model.ContractModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContractImpl}.
 * </p>
 *
 * @author fanqi
 * @see ContractImpl
 * @see com.justonetech.cp.contract.model.Contract
 * @see com.justonetech.cp.contract.model.ContractModel
 * @generated
 */
public class ContractModelImpl extends BaseModelImpl<Contract>
	implements ContractModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contract model instance should use the {@link com.justonetech.cp.contract.model.Contract} interface instead.
	 */
	public static final String TABLE_NAME = "cp_Contract";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contractId", Types.VARCHAR },
			{ "htlb", Types.VARCHAR },
			{ "bjbh", Types.VARCHAR },
			{ "bdh", Types.VARCHAR },
			{ "cbfs", Types.VARCHAR },
			{ "htmc", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table cp_Contract (contractId VARCHAR(75) not null primary key,htlb VARCHAR(75) null,bjbh VARCHAR(75) null,bdh VARCHAR(75) null,cbfs VARCHAR(75) null,htmc VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table cp_Contract";
	public static final String ORDER_BY_JPQL = " ORDER BY contract.contractId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cp_Contract.contractId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.cp.contract.model.Contract"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.cp.contract.model.Contract"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.cp.contract.model.Contract"));

	public ContractModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _contractId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setContractId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contractId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Contract.class;
	}

	@Override
	public String getModelClassName() {
		return Contract.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contractId", getContractId());
		attributes.put("htlb", getHtlb());
		attributes.put("bjbh", getBjbh());
		attributes.put("bdh", getBdh());
		attributes.put("cbfs", getCbfs());
		attributes.put("htmc", getHtmc());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String contractId = (String)attributes.get("contractId");

		if (contractId != null) {
			setContractId(contractId);
		}

		String htlb = (String)attributes.get("htlb");

		if (htlb != null) {
			setHtlb(htlb);
		}

		String bjbh = (String)attributes.get("bjbh");

		if (bjbh != null) {
			setBjbh(bjbh);
		}

		String bdh = (String)attributes.get("bdh");

		if (bdh != null) {
			setBdh(bdh);
		}

		String cbfs = (String)attributes.get("cbfs");

		if (cbfs != null) {
			setCbfs(cbfs);
		}

		String htmc = (String)attributes.get("htmc");

		if (htmc != null) {
			setHtmc(htmc);
		}
	}

	@Override
	public String getContractId() {
		if (_contractId == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractId;
		}
	}

	@Override
	public void setContractId(String contractId) {
		_contractId = contractId;
	}

	@Override
	public String getHtlb() {
		if (_htlb == null) {
			return StringPool.BLANK;
		}
		else {
			return _htlb;
		}
	}

	@Override
	public void setHtlb(String htlb) {
		_htlb = htlb;
	}

	@Override
	public String getBjbh() {
		if (_bjbh == null) {
			return StringPool.BLANK;
		}
		else {
			return _bjbh;
		}
	}

	@Override
	public void setBjbh(String bjbh) {
		_bjbh = bjbh;
	}

	@Override
	public String getBdh() {
		if (_bdh == null) {
			return StringPool.BLANK;
		}
		else {
			return _bdh;
		}
	}

	@Override
	public void setBdh(String bdh) {
		_bdh = bdh;
	}

	@Override
	public String getCbfs() {
		if (_cbfs == null) {
			return StringPool.BLANK;
		}
		else {
			return _cbfs;
		}
	}

	@Override
	public void setCbfs(String cbfs) {
		_cbfs = cbfs;
	}

	@Override
	public String getHtmc() {
		if (_htmc == null) {
			return StringPool.BLANK;
		}
		else {
			return _htmc;
		}
	}

	@Override
	public void setHtmc(String htmc) {
		_htmc = htmc;
	}

	@Override
	public Contract toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Contract)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContractImpl contractImpl = new ContractImpl();

		contractImpl.setContractId(getContractId());
		contractImpl.setHtlb(getHtlb());
		contractImpl.setBjbh(getBjbh());
		contractImpl.setBdh(getBdh());
		contractImpl.setCbfs(getCbfs());
		contractImpl.setHtmc(getHtmc());

		contractImpl.resetOriginalValues();

		return contractImpl;
	}

	@Override
	public int compareTo(Contract contract) {
		String primaryKey = contract.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Contract)) {
			return false;
		}

		Contract contract = (Contract)obj;

		String primaryKey = contract.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Contract> toCacheModel() {
		ContractCacheModel contractCacheModel = new ContractCacheModel();

		contractCacheModel.contractId = getContractId();

		String contractId = contractCacheModel.contractId;

		if ((contractId != null) && (contractId.length() == 0)) {
			contractCacheModel.contractId = null;
		}

		contractCacheModel.htlb = getHtlb();

		String htlb = contractCacheModel.htlb;

		if ((htlb != null) && (htlb.length() == 0)) {
			contractCacheModel.htlb = null;
		}

		contractCacheModel.bjbh = getBjbh();

		String bjbh = contractCacheModel.bjbh;

		if ((bjbh != null) && (bjbh.length() == 0)) {
			contractCacheModel.bjbh = null;
		}

		contractCacheModel.bdh = getBdh();

		String bdh = contractCacheModel.bdh;

		if ((bdh != null) && (bdh.length() == 0)) {
			contractCacheModel.bdh = null;
		}

		contractCacheModel.cbfs = getCbfs();

		String cbfs = contractCacheModel.cbfs;

		if ((cbfs != null) && (cbfs.length() == 0)) {
			contractCacheModel.cbfs = null;
		}

		contractCacheModel.htmc = getHtmc();

		String htmc = contractCacheModel.htmc;

		if ((htmc != null) && (htmc.length() == 0)) {
			contractCacheModel.htmc = null;
		}

		return contractCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{contractId=");
		sb.append(getContractId());
		sb.append(", htlb=");
		sb.append(getHtlb());
		sb.append(", bjbh=");
		sb.append(getBjbh());
		sb.append(", bdh=");
		sb.append(getBdh());
		sb.append(", cbfs=");
		sb.append(getCbfs());
		sb.append(", htmc=");
		sb.append(getHtmc());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.cp.contract.model.Contract");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contractId</column-name><column-value><![CDATA[");
		sb.append(getContractId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>htlb</column-name><column-value><![CDATA[");
		sb.append(getHtlb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bjbh</column-name><column-value><![CDATA[");
		sb.append(getBjbh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bdh</column-name><column-value><![CDATA[");
		sb.append(getBdh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cbfs</column-name><column-value><![CDATA[");
		sb.append(getCbfs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>htmc</column-name><column-value><![CDATA[");
		sb.append(getHtmc());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Contract.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Contract.class
		};
	private String _contractId;
	private String _htlb;
	private String _bjbh;
	private String _bdh;
	private String _cbfs;
	private String _htmc;
	private Contract _escapedModel;
}