/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.cp.permit.model.impl;

import com.justonetech.cp.permit.model.ApplyMaterial;
import com.justonetech.cp.permit.model.ApplyMaterialModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ApplyMaterial service. Represents a row in the &quot;cp_ApplyMaterial&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.cp.permit.model.ApplyMaterialModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplyMaterialImpl}.
 * </p>
 *
 * @author fanqi
 * @see ApplyMaterialImpl
 * @see com.justonetech.cp.permit.model.ApplyMaterial
 * @see com.justonetech.cp.permit.model.ApplyMaterialModel
 * @generated
 */
public class ApplyMaterialModelImpl extends BaseModelImpl<ApplyMaterial>
	implements ApplyMaterialModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a apply material model instance should use the {@link com.justonetech.cp.permit.model.ApplyMaterial} interface instead.
	 */
	public static final String TABLE_NAME = "cp_ApplyMaterial";
	public static final Object[][] TABLE_COLUMNS = {
			{ "materialId", Types.BIGINT },
			{ "permitId", Types.VARCHAR },
			{ "xh", Types.INTEGER },
			{ "clmc", Types.VARCHAR },
			{ "yjfs", Types.INTEGER },
			{ "sjfs", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table cp_ApplyMaterial (materialId LONG not null primary key,permitId VARCHAR(75) null,xh INTEGER,clmc VARCHAR(75) null,yjfs INTEGER,sjfs INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table cp_ApplyMaterial";
	public static final String ORDER_BY_JPQL = " ORDER BY applyMaterial.xh ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cp_ApplyMaterial.xh ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.cp.permit.model.ApplyMaterial"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.cp.permit.model.ApplyMaterial"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.justonetech.cp.permit.model.ApplyMaterial"),
			true);
	public static long PERMITID_COLUMN_BITMASK = 1L;
	public static long XH_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.cp.permit.model.ApplyMaterial"));

	public ApplyMaterialModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _materialId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMaterialId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _materialId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ApplyMaterial.class;
	}

	@Override
	public String getModelClassName() {
		return ApplyMaterial.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("materialId", getMaterialId());
		attributes.put("permitId", getPermitId());
		attributes.put("xh", getXh());
		attributes.put("clmc", getClmc());
		attributes.put("yjfs", getYjfs());
		attributes.put("sjfs", getSjfs());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long materialId = (Long)attributes.get("materialId");

		if (materialId != null) {
			setMaterialId(materialId);
		}

		String permitId = (String)attributes.get("permitId");

		if (permitId != null) {
			setPermitId(permitId);
		}

		Integer xh = (Integer)attributes.get("xh");

		if (xh != null) {
			setXh(xh);
		}

		String clmc = (String)attributes.get("clmc");

		if (clmc != null) {
			setClmc(clmc);
		}

		Integer yjfs = (Integer)attributes.get("yjfs");

		if (yjfs != null) {
			setYjfs(yjfs);
		}

		Integer sjfs = (Integer)attributes.get("sjfs");

		if (sjfs != null) {
			setSjfs(sjfs);
		}
	}

	@Override
	public long getMaterialId() {
		return _materialId;
	}

	@Override
	public void setMaterialId(long materialId) {
		_materialId = materialId;
	}

	@Override
	public String getPermitId() {
		if (_permitId == null) {
			return StringPool.BLANK;
		}
		else {
			return _permitId;
		}
	}

	@Override
	public void setPermitId(String permitId) {
		_columnBitmask |= PERMITID_COLUMN_BITMASK;

		if (_originalPermitId == null) {
			_originalPermitId = _permitId;
		}

		_permitId = permitId;
	}

	public String getOriginalPermitId() {
		return GetterUtil.getString(_originalPermitId);
	}

	@Override
	public int getXh() {
		return _xh;
	}

	@Override
	public void setXh(int xh) {
		_columnBitmask = -1L;

		_xh = xh;
	}

	@Override
	public String getClmc() {
		if (_clmc == null) {
			return StringPool.BLANK;
		}
		else {
			return _clmc;
		}
	}

	@Override
	public void setClmc(String clmc) {
		_clmc = clmc;
	}

	@Override
	public int getYjfs() {
		return _yjfs;
	}

	@Override
	public void setYjfs(int yjfs) {
		_yjfs = yjfs;
	}

	@Override
	public int getSjfs() {
		return _sjfs;
	}

	@Override
	public void setSjfs(int sjfs) {
		_sjfs = sjfs;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ApplyMaterial.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ApplyMaterial toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ApplyMaterial)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplyMaterialImpl applyMaterialImpl = new ApplyMaterialImpl();

		applyMaterialImpl.setMaterialId(getMaterialId());
		applyMaterialImpl.setPermitId(getPermitId());
		applyMaterialImpl.setXh(getXh());
		applyMaterialImpl.setClmc(getClmc());
		applyMaterialImpl.setYjfs(getYjfs());
		applyMaterialImpl.setSjfs(getSjfs());

		applyMaterialImpl.resetOriginalValues();

		return applyMaterialImpl;
	}

	@Override
	public int compareTo(ApplyMaterial applyMaterial) {
		int value = 0;

		if (getXh() < applyMaterial.getXh()) {
			value = -1;
		}
		else if (getXh() > applyMaterial.getXh()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ApplyMaterial)) {
			return false;
		}

		ApplyMaterial applyMaterial = (ApplyMaterial)obj;

		long primaryKey = applyMaterial.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ApplyMaterialModelImpl applyMaterialModelImpl = this;

		applyMaterialModelImpl._originalPermitId = applyMaterialModelImpl._permitId;

		applyMaterialModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ApplyMaterial> toCacheModel() {
		ApplyMaterialCacheModel applyMaterialCacheModel = new ApplyMaterialCacheModel();

		applyMaterialCacheModel.materialId = getMaterialId();

		applyMaterialCacheModel.permitId = getPermitId();

		String permitId = applyMaterialCacheModel.permitId;

		if ((permitId != null) && (permitId.length() == 0)) {
			applyMaterialCacheModel.permitId = null;
		}

		applyMaterialCacheModel.xh = getXh();

		applyMaterialCacheModel.clmc = getClmc();

		String clmc = applyMaterialCacheModel.clmc;

		if ((clmc != null) && (clmc.length() == 0)) {
			applyMaterialCacheModel.clmc = null;
		}

		applyMaterialCacheModel.yjfs = getYjfs();

		applyMaterialCacheModel.sjfs = getSjfs();

		return applyMaterialCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{materialId=");
		sb.append(getMaterialId());
		sb.append(", permitId=");
		sb.append(getPermitId());
		sb.append(", xh=");
		sb.append(getXh());
		sb.append(", clmc=");
		sb.append(getClmc());
		sb.append(", yjfs=");
		sb.append(getYjfs());
		sb.append(", sjfs=");
		sb.append(getSjfs());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.cp.permit.model.ApplyMaterial");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>materialId</column-name><column-value><![CDATA[");
		sb.append(getMaterialId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permitId</column-name><column-value><![CDATA[");
		sb.append(getPermitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xh</column-name><column-value><![CDATA[");
		sb.append(getXh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clmc</column-name><column-value><![CDATA[");
		sb.append(getClmc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>yjfs</column-name><column-value><![CDATA[");
		sb.append(getYjfs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sjfs</column-name><column-value><![CDATA[");
		sb.append(getSjfs());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ApplyMaterial.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ApplyMaterial.class
		};
	private long _materialId;
	private String _permitId;
	private String _originalPermitId;
	private int _xh;
	private String _clmc;
	private int _yjfs;
	private int _sjfs;
	private long _columnBitmask;
	private ApplyMaterial _escapedModel;
}