/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.cp.permit.model.impl;

import com.justonetech.cp.permit.model.Permit;
import com.justonetech.cp.permit.model.PermitModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Permit service. Represents a row in the &quot;cp_Permit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.cp.permit.model.PermitModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PermitImpl}.
 * </p>
 *
 * @author fanqi
 * @see PermitImpl
 * @see com.justonetech.cp.permit.model.Permit
 * @see com.justonetech.cp.permit.model.PermitModel
 * @generated
 */
public class PermitModelImpl extends BaseModelImpl<Permit>
	implements PermitModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a permit model instance should use the {@link com.justonetech.cp.permit.model.Permit} interface instead.
	 */
	public static final String TABLE_NAME = "cp_Permit";
	public static final Object[][] TABLE_COLUMNS = {
			{ "permitId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "zzjgdm", Types.VARCHAR },
			{ "bjbh", Types.VARCHAR },
			{ "htxxbsbh", Types.VARCHAR },
			{ "sqbz", Types.INTEGER },
			{ "sqzt", Types.INTEGER },
			{ "bdh", Types.VARCHAR },
			{ "ywbh", Types.VARCHAR },
			{ "sgxkzbh", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table cp_Permit (permitId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,zzjgdm VARCHAR(75) null,bjbh VARCHAR(75) null,htxxbsbh VARCHAR(75) null,sqbz INTEGER,sqzt INTEGER,bdh VARCHAR(75) null,ywbh VARCHAR(75) null,sgxkzbh VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table cp_Permit";
	public static final String ORDER_BY_JPQL = " ORDER BY permit.permitId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cp_Permit.permitId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.cp.permit.model.Permit"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.cp.permit.model.Permit"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.justonetech.cp.permit.model.Permit"),
			true);
	public static long ZZJGDM_COLUMN_BITMASK = 1L;
	public static long PERMITID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.cp.permit.model.Permit"));

	public PermitModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _permitId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPermitId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _permitId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Permit.class;
	}

	@Override
	public String getModelClassName() {
		return Permit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("permitId", getPermitId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("zzjgdm", getZzjgdm());
		attributes.put("bjbh", getBjbh());
		attributes.put("htxxbsbh", getHtxxbsbh());
		attributes.put("sqbz", getSqbz());
		attributes.put("sqzt", getSqzt());
		attributes.put("bdh", getBdh());
		attributes.put("ywbh", getYwbh());
		attributes.put("sgxkzbh", getSgxkzbh());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long permitId = (Long)attributes.get("permitId");

		if (permitId != null) {
			setPermitId(permitId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String zzjgdm = (String)attributes.get("zzjgdm");

		if (zzjgdm != null) {
			setZzjgdm(zzjgdm);
		}

		String bjbh = (String)attributes.get("bjbh");

		if (bjbh != null) {
			setBjbh(bjbh);
		}

		String htxxbsbh = (String)attributes.get("htxxbsbh");

		if (htxxbsbh != null) {
			setHtxxbsbh(htxxbsbh);
		}

		Integer sqbz = (Integer)attributes.get("sqbz");

		if (sqbz != null) {
			setSqbz(sqbz);
		}

		Integer sqzt = (Integer)attributes.get("sqzt");

		if (sqzt != null) {
			setSqzt(sqzt);
		}

		String bdh = (String)attributes.get("bdh");

		if (bdh != null) {
			setBdh(bdh);
		}

		String ywbh = (String)attributes.get("ywbh");

		if (ywbh != null) {
			setYwbh(ywbh);
		}

		String sgxkzbh = (String)attributes.get("sgxkzbh");

		if (sgxkzbh != null) {
			setSgxkzbh(sgxkzbh);
		}
	}

	@Override
	public long getPermitId() {
		return _permitId;
	}

	@Override
	public void setPermitId(long permitId) {
		_permitId = permitId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getZzjgdm() {
		if (_zzjgdm == null) {
			return StringPool.BLANK;
		}
		else {
			return _zzjgdm;
		}
	}

	@Override
	public void setZzjgdm(String zzjgdm) {
		_columnBitmask |= ZZJGDM_COLUMN_BITMASK;

		if (_originalZzjgdm == null) {
			_originalZzjgdm = _zzjgdm;
		}

		_zzjgdm = zzjgdm;
	}

	public String getOriginalZzjgdm() {
		return GetterUtil.getString(_originalZzjgdm);
	}

	@Override
	public String getBjbh() {
		if (_bjbh == null) {
			return StringPool.BLANK;
		}
		else {
			return _bjbh;
		}
	}

	@Override
	public void setBjbh(String bjbh) {
		_bjbh = bjbh;
	}

	@Override
	public String getHtxxbsbh() {
		if (_htxxbsbh == null) {
			return StringPool.BLANK;
		}
		else {
			return _htxxbsbh;
		}
	}

	@Override
	public void setHtxxbsbh(String htxxbsbh) {
		_htxxbsbh = htxxbsbh;
	}

	@Override
	public int getSqbz() {
		return _sqbz;
	}

	@Override
	public void setSqbz(int sqbz) {
		_sqbz = sqbz;
	}

	@Override
	public int getSqzt() {
		return _sqzt;
	}

	@Override
	public void setSqzt(int sqzt) {
		_sqzt = sqzt;
	}

	@Override
	public String getBdh() {
		if (_bdh == null) {
			return StringPool.BLANK;
		}
		else {
			return _bdh;
		}
	}

	@Override
	public void setBdh(String bdh) {
		_bdh = bdh;
	}

	@Override
	public String getYwbh() {
		if (_ywbh == null) {
			return StringPool.BLANK;
		}
		else {
			return _ywbh;
		}
	}

	@Override
	public void setYwbh(String ywbh) {
		_ywbh = ywbh;
	}

	@Override
	public String getSgxkzbh() {
		if (_sgxkzbh == null) {
			return StringPool.BLANK;
		}
		else {
			return _sgxkzbh;
		}
	}

	@Override
	public void setSgxkzbh(String sgxkzbh) {
		_sgxkzbh = sgxkzbh;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Permit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Permit toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Permit)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PermitImpl permitImpl = new PermitImpl();

		permitImpl.setPermitId(getPermitId());
		permitImpl.setGroupId(getGroupId());
		permitImpl.setCompanyId(getCompanyId());
		permitImpl.setUserId(getUserId());
		permitImpl.setUserName(getUserName());
		permitImpl.setCreateDate(getCreateDate());
		permitImpl.setModifiedDate(getModifiedDate());
		permitImpl.setZzjgdm(getZzjgdm());
		permitImpl.setBjbh(getBjbh());
		permitImpl.setHtxxbsbh(getHtxxbsbh());
		permitImpl.setSqbz(getSqbz());
		permitImpl.setSqzt(getSqzt());
		permitImpl.setBdh(getBdh());
		permitImpl.setYwbh(getYwbh());
		permitImpl.setSgxkzbh(getSgxkzbh());

		permitImpl.resetOriginalValues();

		return permitImpl;
	}

	@Override
	public int compareTo(Permit permit) {
		long primaryKey = permit.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Permit)) {
			return false;
		}

		Permit permit = (Permit)obj;

		long primaryKey = permit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PermitModelImpl permitModelImpl = this;

		permitModelImpl._originalZzjgdm = permitModelImpl._zzjgdm;

		permitModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Permit> toCacheModel() {
		PermitCacheModel permitCacheModel = new PermitCacheModel();

		permitCacheModel.permitId = getPermitId();

		permitCacheModel.groupId = getGroupId();

		permitCacheModel.companyId = getCompanyId();

		permitCacheModel.userId = getUserId();

		permitCacheModel.userName = getUserName();

		String userName = permitCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			permitCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			permitCacheModel.createDate = createDate.getTime();
		}
		else {
			permitCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			permitCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			permitCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		permitCacheModel.zzjgdm = getZzjgdm();

		String zzjgdm = permitCacheModel.zzjgdm;

		if ((zzjgdm != null) && (zzjgdm.length() == 0)) {
			permitCacheModel.zzjgdm = null;
		}

		permitCacheModel.bjbh = getBjbh();

		String bjbh = permitCacheModel.bjbh;

		if ((bjbh != null) && (bjbh.length() == 0)) {
			permitCacheModel.bjbh = null;
		}

		permitCacheModel.htxxbsbh = getHtxxbsbh();

		String htxxbsbh = permitCacheModel.htxxbsbh;

		if ((htxxbsbh != null) && (htxxbsbh.length() == 0)) {
			permitCacheModel.htxxbsbh = null;
		}

		permitCacheModel.sqbz = getSqbz();

		permitCacheModel.sqzt = getSqzt();

		permitCacheModel.bdh = getBdh();

		String bdh = permitCacheModel.bdh;

		if ((bdh != null) && (bdh.length() == 0)) {
			permitCacheModel.bdh = null;
		}

		permitCacheModel.ywbh = getYwbh();

		String ywbh = permitCacheModel.ywbh;

		if ((ywbh != null) && (ywbh.length() == 0)) {
			permitCacheModel.ywbh = null;
		}

		permitCacheModel.sgxkzbh = getSgxkzbh();

		String sgxkzbh = permitCacheModel.sgxkzbh;

		if ((sgxkzbh != null) && (sgxkzbh.length() == 0)) {
			permitCacheModel.sgxkzbh = null;
		}

		return permitCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{permitId=");
		sb.append(getPermitId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", zzjgdm=");
		sb.append(getZzjgdm());
		sb.append(", bjbh=");
		sb.append(getBjbh());
		sb.append(", htxxbsbh=");
		sb.append(getHtxxbsbh());
		sb.append(", sqbz=");
		sb.append(getSqbz());
		sb.append(", sqzt=");
		sb.append(getSqzt());
		sb.append(", bdh=");
		sb.append(getBdh());
		sb.append(", ywbh=");
		sb.append(getYwbh());
		sb.append(", sgxkzbh=");
		sb.append(getSgxkzbh());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.cp.permit.model.Permit");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>permitId</column-name><column-value><![CDATA[");
		sb.append(getPermitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zzjgdm</column-name><column-value><![CDATA[");
		sb.append(getZzjgdm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bjbh</column-name><column-value><![CDATA[");
		sb.append(getBjbh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>htxxbsbh</column-name><column-value><![CDATA[");
		sb.append(getHtxxbsbh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sqbz</column-name><column-value><![CDATA[");
		sb.append(getSqbz());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sqzt</column-name><column-value><![CDATA[");
		sb.append(getSqzt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bdh</column-name><column-value><![CDATA[");
		sb.append(getBdh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ywbh</column-name><column-value><![CDATA[");
		sb.append(getYwbh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sgxkzbh</column-name><column-value><![CDATA[");
		sb.append(getSgxkzbh());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Permit.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Permit.class };
	private long _permitId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _zzjgdm;
	private String _originalZzjgdm;
	private String _bjbh;
	private String _htxxbsbh;
	private int _sqbz;
	private int _sqzt;
	private String _bdh;
	private String _ywbh;
	private String _sgxkzbh;
	private long _columnBitmask;
	private Permit _escapedModel;
}