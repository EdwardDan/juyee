/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.cp.complete.model.impl;

import com.justonetech.cp.complete.model.CompleteApplyMaterial;
import com.justonetech.cp.complete.model.CompleteApplyMaterialModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CompleteApplyMaterial service. Represents a row in the &quot;cp_CompleteApplyMaterial&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.cp.complete.model.CompleteApplyMaterialModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CompleteApplyMaterialImpl}.
 * </p>
 *
 * @author fanqi
 * @see CompleteApplyMaterialImpl
 * @see com.justonetech.cp.complete.model.CompleteApplyMaterial
 * @see com.justonetech.cp.complete.model.CompleteApplyMaterialModel
 * @generated
 */
public class CompleteApplyMaterialModelImpl extends BaseModelImpl<CompleteApplyMaterial>
	implements CompleteApplyMaterialModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a complete apply material model instance should use the {@link com.justonetech.cp.complete.model.CompleteApplyMaterial} interface instead.
	 */
	public static final String TABLE_NAME = "cp_CompleteApplyMaterial";
	public static final Object[][] TABLE_COLUMNS = {
			{ "materialId", Types.BIGINT },
			{ "completeId", Types.BIGINT },
			{ "xh", Types.VARCHAR },
			{ "clmc", Types.VARCHAR },
			{ "fileEntryIds", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table cp_CompleteApplyMaterial (materialId LONG not null primary key,completeId LONG,xh VARCHAR(75) null,clmc VARCHAR(75) null,fileEntryIds VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table cp_CompleteApplyMaterial";
	public static final String ORDER_BY_JPQL = " ORDER BY completeApplyMaterial.materialId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cp_CompleteApplyMaterial.materialId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.cp.complete.model.CompleteApplyMaterial"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.cp.complete.model.CompleteApplyMaterial"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.justonetech.cp.complete.model.CompleteApplyMaterial"),
			true);
	public static long COMPLETEID_COLUMN_BITMASK = 1L;
	public static long MATERIALID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.cp.complete.model.CompleteApplyMaterial"));

	public CompleteApplyMaterialModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _materialId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMaterialId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _materialId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CompleteApplyMaterial.class;
	}

	@Override
	public String getModelClassName() {
		return CompleteApplyMaterial.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("materialId", getMaterialId());
		attributes.put("completeId", getCompleteId());
		attributes.put("xh", getXh());
		attributes.put("clmc", getClmc());
		attributes.put("fileEntryIds", getFileEntryIds());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long materialId = (Long)attributes.get("materialId");

		if (materialId != null) {
			setMaterialId(materialId);
		}

		Long completeId = (Long)attributes.get("completeId");

		if (completeId != null) {
			setCompleteId(completeId);
		}

		String xh = (String)attributes.get("xh");

		if (xh != null) {
			setXh(xh);
		}

		String clmc = (String)attributes.get("clmc");

		if (clmc != null) {
			setClmc(clmc);
		}

		String fileEntryIds = (String)attributes.get("fileEntryIds");

		if (fileEntryIds != null) {
			setFileEntryIds(fileEntryIds);
		}
	}

	@Override
	public long getMaterialId() {
		return _materialId;
	}

	@Override
	public void setMaterialId(long materialId) {
		_columnBitmask = -1L;

		_materialId = materialId;
	}

	@Override
	public long getCompleteId() {
		return _completeId;
	}

	@Override
	public void setCompleteId(long completeId) {
		_columnBitmask |= COMPLETEID_COLUMN_BITMASK;

		if (!_setOriginalCompleteId) {
			_setOriginalCompleteId = true;

			_originalCompleteId = _completeId;
		}

		_completeId = completeId;
	}

	public long getOriginalCompleteId() {
		return _originalCompleteId;
	}

	@Override
	public String getXh() {
		if (_xh == null) {
			return StringPool.BLANK;
		}
		else {
			return _xh;
		}
	}

	@Override
	public void setXh(String xh) {
		_xh = xh;
	}

	@Override
	public String getClmc() {
		if (_clmc == null) {
			return StringPool.BLANK;
		}
		else {
			return _clmc;
		}
	}

	@Override
	public void setClmc(String clmc) {
		_clmc = clmc;
	}

	@Override
	public String getFileEntryIds() {
		if (_fileEntryIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileEntryIds;
		}
	}

	@Override
	public void setFileEntryIds(String fileEntryIds) {
		_fileEntryIds = fileEntryIds;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CompleteApplyMaterial.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CompleteApplyMaterial toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CompleteApplyMaterial)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CompleteApplyMaterialImpl completeApplyMaterialImpl = new CompleteApplyMaterialImpl();

		completeApplyMaterialImpl.setMaterialId(getMaterialId());
		completeApplyMaterialImpl.setCompleteId(getCompleteId());
		completeApplyMaterialImpl.setXh(getXh());
		completeApplyMaterialImpl.setClmc(getClmc());
		completeApplyMaterialImpl.setFileEntryIds(getFileEntryIds());

		completeApplyMaterialImpl.resetOriginalValues();

		return completeApplyMaterialImpl;
	}

	@Override
	public int compareTo(CompleteApplyMaterial completeApplyMaterial) {
		int value = 0;

		if (getMaterialId() < completeApplyMaterial.getMaterialId()) {
			value = -1;
		}
		else if (getMaterialId() > completeApplyMaterial.getMaterialId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CompleteApplyMaterial)) {
			return false;
		}

		CompleteApplyMaterial completeApplyMaterial = (CompleteApplyMaterial)obj;

		long primaryKey = completeApplyMaterial.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CompleteApplyMaterialModelImpl completeApplyMaterialModelImpl = this;

		completeApplyMaterialModelImpl._originalCompleteId = completeApplyMaterialModelImpl._completeId;

		completeApplyMaterialModelImpl._setOriginalCompleteId = false;

		completeApplyMaterialModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CompleteApplyMaterial> toCacheModel() {
		CompleteApplyMaterialCacheModel completeApplyMaterialCacheModel = new CompleteApplyMaterialCacheModel();

		completeApplyMaterialCacheModel.materialId = getMaterialId();

		completeApplyMaterialCacheModel.completeId = getCompleteId();

		completeApplyMaterialCacheModel.xh = getXh();

		String xh = completeApplyMaterialCacheModel.xh;

		if ((xh != null) && (xh.length() == 0)) {
			completeApplyMaterialCacheModel.xh = null;
		}

		completeApplyMaterialCacheModel.clmc = getClmc();

		String clmc = completeApplyMaterialCacheModel.clmc;

		if ((clmc != null) && (clmc.length() == 0)) {
			completeApplyMaterialCacheModel.clmc = null;
		}

		completeApplyMaterialCacheModel.fileEntryIds = getFileEntryIds();

		String fileEntryIds = completeApplyMaterialCacheModel.fileEntryIds;

		if ((fileEntryIds != null) && (fileEntryIds.length() == 0)) {
			completeApplyMaterialCacheModel.fileEntryIds = null;
		}

		return completeApplyMaterialCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{materialId=");
		sb.append(getMaterialId());
		sb.append(", completeId=");
		sb.append(getCompleteId());
		sb.append(", xh=");
		sb.append(getXh());
		sb.append(", clmc=");
		sb.append(getClmc());
		sb.append(", fileEntryIds=");
		sb.append(getFileEntryIds());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.cp.complete.model.CompleteApplyMaterial");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>materialId</column-name><column-value><![CDATA[");
		sb.append(getMaterialId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>completeId</column-name><column-value><![CDATA[");
		sb.append(getCompleteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xh</column-name><column-value><![CDATA[");
		sb.append(getXh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clmc</column-name><column-value><![CDATA[");
		sb.append(getClmc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryIds</column-name><column-value><![CDATA[");
		sb.append(getFileEntryIds());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CompleteApplyMaterial.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CompleteApplyMaterial.class
		};
	private long _materialId;
	private long _completeId;
	private long _originalCompleteId;
	private boolean _setOriginalCompleteId;
	private String _xh;
	private String _clmc;
	private String _fileEntryIds;
	private long _columnBitmask;
	private CompleteApplyMaterial _escapedModel;
}