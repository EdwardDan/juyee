/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.cp.complete.model.impl;

import com.justonetech.cp.complete.model.CompleteProjectProfile;
import com.justonetech.cp.complete.model.CompleteProjectProfileModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CompleteProjectProfile service. Represents a row in the &quot;cp_CompleteProjectProfile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.cp.complete.model.CompleteProjectProfileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CompleteProjectProfileImpl}.
 * </p>
 *
 * @author fanqi
 * @see CompleteProjectProfileImpl
 * @see com.justonetech.cp.complete.model.CompleteProjectProfile
 * @see com.justonetech.cp.complete.model.CompleteProjectProfileModel
 * @generated
 */
public class CompleteProjectProfileModelImpl extends BaseModelImpl<CompleteProjectProfile>
	implements CompleteProjectProfileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a complete project profile model instance should use the {@link com.justonetech.cp.complete.model.CompleteProjectProfile} interface instead.
	 */
	public static final String TABLE_NAME = "cp_CompleteProjectProfile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "completeId", Types.BIGINT },
			{ "bjbh", Types.VARCHAR },
			{ "gcmc", Types.VARCHAR },
			{ "jsdwmc", Types.VARCHAR },
			{ "jsdwdz", Types.VARCHAR },
			{ "jsdd", Types.VARCHAR },
			{ "szqx", Types.VARCHAR },
			{ "fddbr", Types.VARCHAR },
			{ "lxr", Types.VARCHAR },
			{ "lxdh", Types.VARCHAR },
			{ "bz", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table cp_CompleteProjectProfile (completeId LONG not null primary key,bjbh VARCHAR(75) null,gcmc VARCHAR(500) null,jsdwmc VARCHAR(500) null,jsdwdz VARCHAR(500) null,jsdd VARCHAR(500) null,szqx VARCHAR(75) null,fddbr VARCHAR(75) null,lxr VARCHAR(75) null,lxdh VARCHAR(75) null,bz VARCHAR(1000) null)";
	public static final String TABLE_SQL_DROP = "drop table cp_CompleteProjectProfile";
	public static final String ORDER_BY_JPQL = " ORDER BY completeProjectProfile.completeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cp_CompleteProjectProfile.completeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.cp.complete.model.CompleteProjectProfile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.cp.complete.model.CompleteProjectProfile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.cp.complete.model.CompleteProjectProfile"));

	public CompleteProjectProfileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _completeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCompleteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _completeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CompleteProjectProfile.class;
	}

	@Override
	public String getModelClassName() {
		return CompleteProjectProfile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("completeId", getCompleteId());
		attributes.put("bjbh", getBjbh());
		attributes.put("gcmc", getGcmc());
		attributes.put("jsdwmc", getJsdwmc());
		attributes.put("jsdwdz", getJsdwdz());
		attributes.put("jsdd", getJsdd());
		attributes.put("szqx", getSzqx());
		attributes.put("fddbr", getFddbr());
		attributes.put("lxr", getLxr());
		attributes.put("lxdh", getLxdh());
		attributes.put("bz", getBz());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long completeId = (Long)attributes.get("completeId");

		if (completeId != null) {
			setCompleteId(completeId);
		}

		String bjbh = (String)attributes.get("bjbh");

		if (bjbh != null) {
			setBjbh(bjbh);
		}

		String gcmc = (String)attributes.get("gcmc");

		if (gcmc != null) {
			setGcmc(gcmc);
		}

		String jsdwmc = (String)attributes.get("jsdwmc");

		if (jsdwmc != null) {
			setJsdwmc(jsdwmc);
		}

		String jsdwdz = (String)attributes.get("jsdwdz");

		if (jsdwdz != null) {
			setJsdwdz(jsdwdz);
		}

		String jsdd = (String)attributes.get("jsdd");

		if (jsdd != null) {
			setJsdd(jsdd);
		}

		String szqx = (String)attributes.get("szqx");

		if (szqx != null) {
			setSzqx(szqx);
		}

		String fddbr = (String)attributes.get("fddbr");

		if (fddbr != null) {
			setFddbr(fddbr);
		}

		String lxr = (String)attributes.get("lxr");

		if (lxr != null) {
			setLxr(lxr);
		}

		String lxdh = (String)attributes.get("lxdh");

		if (lxdh != null) {
			setLxdh(lxdh);
		}

		String bz = (String)attributes.get("bz");

		if (bz != null) {
			setBz(bz);
		}
	}

	@Override
	public long getCompleteId() {
		return _completeId;
	}

	@Override
	public void setCompleteId(long completeId) {
		_completeId = completeId;
	}

	@Override
	public String getBjbh() {
		if (_bjbh == null) {
			return StringPool.BLANK;
		}
		else {
			return _bjbh;
		}
	}

	@Override
	public void setBjbh(String bjbh) {
		_bjbh = bjbh;
	}

	@Override
	public String getGcmc() {
		if (_gcmc == null) {
			return StringPool.BLANK;
		}
		else {
			return _gcmc;
		}
	}

	@Override
	public void setGcmc(String gcmc) {
		_gcmc = gcmc;
	}

	@Override
	public String getJsdwmc() {
		if (_jsdwmc == null) {
			return StringPool.BLANK;
		}
		else {
			return _jsdwmc;
		}
	}

	@Override
	public void setJsdwmc(String jsdwmc) {
		_jsdwmc = jsdwmc;
	}

	@Override
	public String getJsdwdz() {
		if (_jsdwdz == null) {
			return StringPool.BLANK;
		}
		else {
			return _jsdwdz;
		}
	}

	@Override
	public void setJsdwdz(String jsdwdz) {
		_jsdwdz = jsdwdz;
	}

	@Override
	public String getJsdd() {
		if (_jsdd == null) {
			return StringPool.BLANK;
		}
		else {
			return _jsdd;
		}
	}

	@Override
	public void setJsdd(String jsdd) {
		_jsdd = jsdd;
	}

	@Override
	public String getSzqx() {
		if (_szqx == null) {
			return StringPool.BLANK;
		}
		else {
			return _szqx;
		}
	}

	@Override
	public void setSzqx(String szqx) {
		_szqx = szqx;
	}

	@Override
	public String getFddbr() {
		if (_fddbr == null) {
			return StringPool.BLANK;
		}
		else {
			return _fddbr;
		}
	}

	@Override
	public void setFddbr(String fddbr) {
		_fddbr = fddbr;
	}

	@Override
	public String getLxr() {
		if (_lxr == null) {
			return StringPool.BLANK;
		}
		else {
			return _lxr;
		}
	}

	@Override
	public void setLxr(String lxr) {
		_lxr = lxr;
	}

	@Override
	public String getLxdh() {
		if (_lxdh == null) {
			return StringPool.BLANK;
		}
		else {
			return _lxdh;
		}
	}

	@Override
	public void setLxdh(String lxdh) {
		_lxdh = lxdh;
	}

	@Override
	public String getBz() {
		if (_bz == null) {
			return StringPool.BLANK;
		}
		else {
			return _bz;
		}
	}

	@Override
	public void setBz(String bz) {
		_bz = bz;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CompleteProjectProfile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CompleteProjectProfile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CompleteProjectProfile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CompleteProjectProfileImpl completeProjectProfileImpl = new CompleteProjectProfileImpl();

		completeProjectProfileImpl.setCompleteId(getCompleteId());
		completeProjectProfileImpl.setBjbh(getBjbh());
		completeProjectProfileImpl.setGcmc(getGcmc());
		completeProjectProfileImpl.setJsdwmc(getJsdwmc());
		completeProjectProfileImpl.setJsdwdz(getJsdwdz());
		completeProjectProfileImpl.setJsdd(getJsdd());
		completeProjectProfileImpl.setSzqx(getSzqx());
		completeProjectProfileImpl.setFddbr(getFddbr());
		completeProjectProfileImpl.setLxr(getLxr());
		completeProjectProfileImpl.setLxdh(getLxdh());
		completeProjectProfileImpl.setBz(getBz());

		completeProjectProfileImpl.resetOriginalValues();

		return completeProjectProfileImpl;
	}

	@Override
	public int compareTo(CompleteProjectProfile completeProjectProfile) {
		long primaryKey = completeProjectProfile.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CompleteProjectProfile)) {
			return false;
		}

		CompleteProjectProfile completeProjectProfile = (CompleteProjectProfile)obj;

		long primaryKey = completeProjectProfile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CompleteProjectProfile> toCacheModel() {
		CompleteProjectProfileCacheModel completeProjectProfileCacheModel = new CompleteProjectProfileCacheModel();

		completeProjectProfileCacheModel.completeId = getCompleteId();

		completeProjectProfileCacheModel.bjbh = getBjbh();

		String bjbh = completeProjectProfileCacheModel.bjbh;

		if ((bjbh != null) && (bjbh.length() == 0)) {
			completeProjectProfileCacheModel.bjbh = null;
		}

		completeProjectProfileCacheModel.gcmc = getGcmc();

		String gcmc = completeProjectProfileCacheModel.gcmc;

		if ((gcmc != null) && (gcmc.length() == 0)) {
			completeProjectProfileCacheModel.gcmc = null;
		}

		completeProjectProfileCacheModel.jsdwmc = getJsdwmc();

		String jsdwmc = completeProjectProfileCacheModel.jsdwmc;

		if ((jsdwmc != null) && (jsdwmc.length() == 0)) {
			completeProjectProfileCacheModel.jsdwmc = null;
		}

		completeProjectProfileCacheModel.jsdwdz = getJsdwdz();

		String jsdwdz = completeProjectProfileCacheModel.jsdwdz;

		if ((jsdwdz != null) && (jsdwdz.length() == 0)) {
			completeProjectProfileCacheModel.jsdwdz = null;
		}

		completeProjectProfileCacheModel.jsdd = getJsdd();

		String jsdd = completeProjectProfileCacheModel.jsdd;

		if ((jsdd != null) && (jsdd.length() == 0)) {
			completeProjectProfileCacheModel.jsdd = null;
		}

		completeProjectProfileCacheModel.szqx = getSzqx();

		String szqx = completeProjectProfileCacheModel.szqx;

		if ((szqx != null) && (szqx.length() == 0)) {
			completeProjectProfileCacheModel.szqx = null;
		}

		completeProjectProfileCacheModel.fddbr = getFddbr();

		String fddbr = completeProjectProfileCacheModel.fddbr;

		if ((fddbr != null) && (fddbr.length() == 0)) {
			completeProjectProfileCacheModel.fddbr = null;
		}

		completeProjectProfileCacheModel.lxr = getLxr();

		String lxr = completeProjectProfileCacheModel.lxr;

		if ((lxr != null) && (lxr.length() == 0)) {
			completeProjectProfileCacheModel.lxr = null;
		}

		completeProjectProfileCacheModel.lxdh = getLxdh();

		String lxdh = completeProjectProfileCacheModel.lxdh;

		if ((lxdh != null) && (lxdh.length() == 0)) {
			completeProjectProfileCacheModel.lxdh = null;
		}

		completeProjectProfileCacheModel.bz = getBz();

		String bz = completeProjectProfileCacheModel.bz;

		if ((bz != null) && (bz.length() == 0)) {
			completeProjectProfileCacheModel.bz = null;
		}

		return completeProjectProfileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{completeId=");
		sb.append(getCompleteId());
		sb.append(", bjbh=");
		sb.append(getBjbh());
		sb.append(", gcmc=");
		sb.append(getGcmc());
		sb.append(", jsdwmc=");
		sb.append(getJsdwmc());
		sb.append(", jsdwdz=");
		sb.append(getJsdwdz());
		sb.append(", jsdd=");
		sb.append(getJsdd());
		sb.append(", szqx=");
		sb.append(getSzqx());
		sb.append(", fddbr=");
		sb.append(getFddbr());
		sb.append(", lxr=");
		sb.append(getLxr());
		sb.append(", lxdh=");
		sb.append(getLxdh());
		sb.append(", bz=");
		sb.append(getBz());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.cp.complete.model.CompleteProjectProfile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>completeId</column-name><column-value><![CDATA[");
		sb.append(getCompleteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bjbh</column-name><column-value><![CDATA[");
		sb.append(getBjbh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gcmc</column-name><column-value><![CDATA[");
		sb.append(getGcmc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jsdwmc</column-name><column-value><![CDATA[");
		sb.append(getJsdwmc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jsdwdz</column-name><column-value><![CDATA[");
		sb.append(getJsdwdz());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jsdd</column-name><column-value><![CDATA[");
		sb.append(getJsdd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>szqx</column-name><column-value><![CDATA[");
		sb.append(getSzqx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fddbr</column-name><column-value><![CDATA[");
		sb.append(getFddbr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lxr</column-name><column-value><![CDATA[");
		sb.append(getLxr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lxdh</column-name><column-value><![CDATA[");
		sb.append(getLxdh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bz</column-name><column-value><![CDATA[");
		sb.append(getBz());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CompleteProjectProfile.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CompleteProjectProfile.class
		};
	private long _completeId;
	private String _bjbh;
	private String _gcmc;
	private String _jsdwmc;
	private String _jsdwdz;
	private String _jsdd;
	private String _szqx;
	private String _fddbr;
	private String _lxr;
	private String _lxdh;
	private String _bz;
	private CompleteProjectProfile _escapedModel;
}