/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.cp.complete.service.base;

import com.justonetech.cp.complete.model.CompleteApplyMaterial;
import com.justonetech.cp.complete.service.CompleteApplyMaterialLocalService;
import com.justonetech.cp.complete.service.persistence.CompleteApplyMaterialPersistence;
import com.justonetech.cp.complete.service.persistence.CompletePersistence;
import com.justonetech.cp.complete.service.persistence.CompleteProjectProfilePersistence;
import com.justonetech.cp.complete.service.persistence.CompleteUnitProjectPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the complete apply material local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.justonetech.cp.complete.service.impl.CompleteApplyMaterialLocalServiceImpl}.
 * </p>
 *
 * @author fanqi
 * @see com.justonetech.cp.complete.service.impl.CompleteApplyMaterialLocalServiceImpl
 * @see com.justonetech.cp.complete.service.CompleteApplyMaterialLocalServiceUtil
 * @generated
 */
public abstract class CompleteApplyMaterialLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CompleteApplyMaterialLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.justonetech.cp.complete.service.CompleteApplyMaterialLocalServiceUtil} to access the complete apply material local service.
	 */

	/**
	 * Adds the complete apply material to the database. Also notifies the appropriate model listeners.
	 *
	 * @param completeApplyMaterial the complete apply material
	 * @return the complete apply material that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CompleteApplyMaterial addCompleteApplyMaterial(
		CompleteApplyMaterial completeApplyMaterial) throws SystemException {
		completeApplyMaterial.setNew(true);

		return completeApplyMaterialPersistence.update(completeApplyMaterial);
	}

	/**
	 * Creates a new complete apply material with the primary key. Does not add the complete apply material to the database.
	 *
	 * @param materialId the primary key for the new complete apply material
	 * @return the new complete apply material
	 */
	@Override
	public CompleteApplyMaterial createCompleteApplyMaterial(long materialId) {
		return completeApplyMaterialPersistence.create(materialId);
	}

	/**
	 * Deletes the complete apply material with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param materialId the primary key of the complete apply material
	 * @return the complete apply material that was removed
	 * @throws PortalException if a complete apply material with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CompleteApplyMaterial deleteCompleteApplyMaterial(long materialId)
		throws PortalException, SystemException {
		return completeApplyMaterialPersistence.remove(materialId);
	}

	/**
	 * Deletes the complete apply material from the database. Also notifies the appropriate model listeners.
	 *
	 * @param completeApplyMaterial the complete apply material
	 * @return the complete apply material that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CompleteApplyMaterial deleteCompleteApplyMaterial(
		CompleteApplyMaterial completeApplyMaterial) throws SystemException {
		return completeApplyMaterialPersistence.remove(completeApplyMaterial);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CompleteApplyMaterial.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return completeApplyMaterialPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.justonetech.cp.complete.model.impl.CompleteApplyMaterialModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return completeApplyMaterialPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.justonetech.cp.complete.model.impl.CompleteApplyMaterialModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return completeApplyMaterialPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return completeApplyMaterialPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return completeApplyMaterialPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CompleteApplyMaterial fetchCompleteApplyMaterial(long materialId)
		throws SystemException {
		return completeApplyMaterialPersistence.fetchByPrimaryKey(materialId);
	}

	/**
	 * Returns the complete apply material with the primary key.
	 *
	 * @param materialId the primary key of the complete apply material
	 * @return the complete apply material
	 * @throws PortalException if a complete apply material with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CompleteApplyMaterial getCompleteApplyMaterial(long materialId)
		throws PortalException, SystemException {
		return completeApplyMaterialPersistence.findByPrimaryKey(materialId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return completeApplyMaterialPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the complete apply materials.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.justonetech.cp.complete.model.impl.CompleteApplyMaterialModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of complete apply materials
	 * @param end the upper bound of the range of complete apply materials (not inclusive)
	 * @return the range of complete apply materials
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<CompleteApplyMaterial> getCompleteApplyMaterials(int start,
		int end) throws SystemException {
		return completeApplyMaterialPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of complete apply materials.
	 *
	 * @return the number of complete apply materials
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCompleteApplyMaterialsCount() throws SystemException {
		return completeApplyMaterialPersistence.countAll();
	}

	/**
	 * Updates the complete apply material in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param completeApplyMaterial the complete apply material
	 * @return the complete apply material that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CompleteApplyMaterial updateCompleteApplyMaterial(
		CompleteApplyMaterial completeApplyMaterial) throws SystemException {
		return completeApplyMaterialPersistence.update(completeApplyMaterial);
	}

	/**
	 * Returns the complete local service.
	 *
	 * @return the complete local service
	 */
	public com.justonetech.cp.complete.service.CompleteLocalService getCompleteLocalService() {
		return completeLocalService;
	}

	/**
	 * Sets the complete local service.
	 *
	 * @param completeLocalService the complete local service
	 */
	public void setCompleteLocalService(
		com.justonetech.cp.complete.service.CompleteLocalService completeLocalService) {
		this.completeLocalService = completeLocalService;
	}

	/**
	 * Returns the complete persistence.
	 *
	 * @return the complete persistence
	 */
	public CompletePersistence getCompletePersistence() {
		return completePersistence;
	}

	/**
	 * Sets the complete persistence.
	 *
	 * @param completePersistence the complete persistence
	 */
	public void setCompletePersistence(CompletePersistence completePersistence) {
		this.completePersistence = completePersistence;
	}

	/**
	 * Returns the complete apply material local service.
	 *
	 * @return the complete apply material local service
	 */
	public com.justonetech.cp.complete.service.CompleteApplyMaterialLocalService getCompleteApplyMaterialLocalService() {
		return completeApplyMaterialLocalService;
	}

	/**
	 * Sets the complete apply material local service.
	 *
	 * @param completeApplyMaterialLocalService the complete apply material local service
	 */
	public void setCompleteApplyMaterialLocalService(
		com.justonetech.cp.complete.service.CompleteApplyMaterialLocalService completeApplyMaterialLocalService) {
		this.completeApplyMaterialLocalService = completeApplyMaterialLocalService;
	}

	/**
	 * Returns the complete apply material persistence.
	 *
	 * @return the complete apply material persistence
	 */
	public CompleteApplyMaterialPersistence getCompleteApplyMaterialPersistence() {
		return completeApplyMaterialPersistence;
	}

	/**
	 * Sets the complete apply material persistence.
	 *
	 * @param completeApplyMaterialPersistence the complete apply material persistence
	 */
	public void setCompleteApplyMaterialPersistence(
		CompleteApplyMaterialPersistence completeApplyMaterialPersistence) {
		this.completeApplyMaterialPersistence = completeApplyMaterialPersistence;
	}

	/**
	 * Returns the complete project profile local service.
	 *
	 * @return the complete project profile local service
	 */
	public com.justonetech.cp.complete.service.CompleteProjectProfileLocalService getCompleteProjectProfileLocalService() {
		return completeProjectProfileLocalService;
	}

	/**
	 * Sets the complete project profile local service.
	 *
	 * @param completeProjectProfileLocalService the complete project profile local service
	 */
	public void setCompleteProjectProfileLocalService(
		com.justonetech.cp.complete.service.CompleteProjectProfileLocalService completeProjectProfileLocalService) {
		this.completeProjectProfileLocalService = completeProjectProfileLocalService;
	}

	/**
	 * Returns the complete project profile persistence.
	 *
	 * @return the complete project profile persistence
	 */
	public CompleteProjectProfilePersistence getCompleteProjectProfilePersistence() {
		return completeProjectProfilePersistence;
	}

	/**
	 * Sets the complete project profile persistence.
	 *
	 * @param completeProjectProfilePersistence the complete project profile persistence
	 */
	public void setCompleteProjectProfilePersistence(
		CompleteProjectProfilePersistence completeProjectProfilePersistence) {
		this.completeProjectProfilePersistence = completeProjectProfilePersistence;
	}

	/**
	 * Returns the complete unit project local service.
	 *
	 * @return the complete unit project local service
	 */
	public com.justonetech.cp.complete.service.CompleteUnitProjectLocalService getCompleteUnitProjectLocalService() {
		return completeUnitProjectLocalService;
	}

	/**
	 * Sets the complete unit project local service.
	 *
	 * @param completeUnitProjectLocalService the complete unit project local service
	 */
	public void setCompleteUnitProjectLocalService(
		com.justonetech.cp.complete.service.CompleteUnitProjectLocalService completeUnitProjectLocalService) {
		this.completeUnitProjectLocalService = completeUnitProjectLocalService;
	}

	/**
	 * Returns the complete unit project persistence.
	 *
	 * @return the complete unit project persistence
	 */
	public CompleteUnitProjectPersistence getCompleteUnitProjectPersistence() {
		return completeUnitProjectPersistence;
	}

	/**
	 * Sets the complete unit project persistence.
	 *
	 * @param completeUnitProjectPersistence the complete unit project persistence
	 */
	public void setCompleteUnitProjectPersistence(
		CompleteUnitProjectPersistence completeUnitProjectPersistence) {
		this.completeUnitProjectPersistence = completeUnitProjectPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.justonetech.cp.complete.model.CompleteApplyMaterial",
			completeApplyMaterialLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.justonetech.cp.complete.model.CompleteApplyMaterial");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return CompleteApplyMaterial.class;
	}

	protected String getModelClassName() {
		return CompleteApplyMaterial.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = completeApplyMaterialPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.justonetech.cp.complete.service.CompleteLocalService.class)
	protected com.justonetech.cp.complete.service.CompleteLocalService completeLocalService;
	@BeanReference(type = CompletePersistence.class)
	protected CompletePersistence completePersistence;
	@BeanReference(type = com.justonetech.cp.complete.service.CompleteApplyMaterialLocalService.class)
	protected com.justonetech.cp.complete.service.CompleteApplyMaterialLocalService completeApplyMaterialLocalService;
	@BeanReference(type = CompleteApplyMaterialPersistence.class)
	protected CompleteApplyMaterialPersistence completeApplyMaterialPersistence;
	@BeanReference(type = com.justonetech.cp.complete.service.CompleteProjectProfileLocalService.class)
	protected com.justonetech.cp.complete.service.CompleteProjectProfileLocalService completeProjectProfileLocalService;
	@BeanReference(type = CompleteProjectProfilePersistence.class)
	protected CompleteProjectProfilePersistence completeProjectProfilePersistence;
	@BeanReference(type = com.justonetech.cp.complete.service.CompleteUnitProjectLocalService.class)
	protected com.justonetech.cp.complete.service.CompleteUnitProjectLocalService completeUnitProjectLocalService;
	@BeanReference(type = CompleteUnitProjectPersistence.class)
	protected CompleteUnitProjectPersistence completeUnitProjectPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CompleteApplyMaterialLocalServiceClpInvoker _clpInvoker = new CompleteApplyMaterialLocalServiceClpInvoker();
}