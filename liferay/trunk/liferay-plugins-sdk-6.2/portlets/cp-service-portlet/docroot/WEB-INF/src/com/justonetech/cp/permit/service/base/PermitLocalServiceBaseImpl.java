/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.cp.permit.service.base;

import com.justonetech.cp.permit.model.Permit;
import com.justonetech.cp.permit.service.PermitLocalService;
import com.justonetech.cp.permit.service.persistence.ApplyMaterialPersistence;
import com.justonetech.cp.permit.service.persistence.ParticipationUnitPersistence;
import com.justonetech.cp.permit.service.persistence.PermitPersistence;
import com.justonetech.cp.permit.service.persistence.ProjectProfilePersistence;
import com.justonetech.cp.permit.service.persistence.UnitProjectPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the permit local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.justonetech.cp.permit.service.impl.PermitLocalServiceImpl}.
 * </p>
 *
 * @author fanqi
 * @see com.justonetech.cp.permit.service.impl.PermitLocalServiceImpl
 * @see com.justonetech.cp.permit.service.PermitLocalServiceUtil
 * @generated
 */
public abstract class PermitLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements PermitLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.justonetech.cp.permit.service.PermitLocalServiceUtil} to access the permit local service.
	 */

	/**
	 * Adds the permit to the database. Also notifies the appropriate model listeners.
	 *
	 * @param permit the permit
	 * @return the permit that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Permit addPermit(Permit permit) throws SystemException {
		permit.setNew(true);

		return permitPersistence.update(permit);
	}

	/**
	 * Creates a new permit with the primary key. Does not add the permit to the database.
	 *
	 * @param permitId the primary key for the new permit
	 * @return the new permit
	 */
	@Override
	public Permit createPermit(long permitId) {
		return permitPersistence.create(permitId);
	}

	/**
	 * Deletes the permit with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param permitId the primary key of the permit
	 * @return the permit that was removed
	 * @throws PortalException if a permit with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Permit deletePermit(long permitId)
		throws PortalException, SystemException {
		return permitPersistence.remove(permitId);
	}

	/**
	 * Deletes the permit from the database. Also notifies the appropriate model listeners.
	 *
	 * @param permit the permit
	 * @return the permit that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Permit deletePermit(Permit permit) throws SystemException {
		return permitPersistence.remove(permit);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Permit.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return permitPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.justonetech.cp.permit.model.impl.PermitModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return permitPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.justonetech.cp.permit.model.impl.PermitModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return permitPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return permitPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return permitPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Permit fetchPermit(long permitId) throws SystemException {
		return permitPersistence.fetchByPrimaryKey(permitId);
	}

	/**
	 * Returns the permit with the primary key.
	 *
	 * @param permitId the primary key of the permit
	 * @return the permit
	 * @throws PortalException if a permit with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Permit getPermit(long permitId)
		throws PortalException, SystemException {
		return permitPersistence.findByPrimaryKey(permitId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return permitPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the permits.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.justonetech.cp.permit.model.impl.PermitModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of permits
	 * @param end the upper bound of the range of permits (not inclusive)
	 * @return the range of permits
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Permit> getPermits(int start, int end)
		throws SystemException {
		return permitPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of permits.
	 *
	 * @return the number of permits
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getPermitsCount() throws SystemException {
		return permitPersistence.countAll();
	}

	/**
	 * Updates the permit in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param permit the permit
	 * @return the permit that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Permit updatePermit(Permit permit) throws SystemException {
		return permitPersistence.update(permit);
	}

	/**
	 * Returns the apply material local service.
	 *
	 * @return the apply material local service
	 */
	public com.justonetech.cp.permit.service.ApplyMaterialLocalService getApplyMaterialLocalService() {
		return applyMaterialLocalService;
	}

	/**
	 * Sets the apply material local service.
	 *
	 * @param applyMaterialLocalService the apply material local service
	 */
	public void setApplyMaterialLocalService(
		com.justonetech.cp.permit.service.ApplyMaterialLocalService applyMaterialLocalService) {
		this.applyMaterialLocalService = applyMaterialLocalService;
	}

	/**
	 * Returns the apply material persistence.
	 *
	 * @return the apply material persistence
	 */
	public ApplyMaterialPersistence getApplyMaterialPersistence() {
		return applyMaterialPersistence;
	}

	/**
	 * Sets the apply material persistence.
	 *
	 * @param applyMaterialPersistence the apply material persistence
	 */
	public void setApplyMaterialPersistence(
		ApplyMaterialPersistence applyMaterialPersistence) {
		this.applyMaterialPersistence = applyMaterialPersistence;
	}

	/**
	 * Returns the participation unit local service.
	 *
	 * @return the participation unit local service
	 */
	public com.justonetech.cp.permit.service.ParticipationUnitLocalService getParticipationUnitLocalService() {
		return participationUnitLocalService;
	}

	/**
	 * Sets the participation unit local service.
	 *
	 * @param participationUnitLocalService the participation unit local service
	 */
	public void setParticipationUnitLocalService(
		com.justonetech.cp.permit.service.ParticipationUnitLocalService participationUnitLocalService) {
		this.participationUnitLocalService = participationUnitLocalService;
	}

	/**
	 * Returns the participation unit persistence.
	 *
	 * @return the participation unit persistence
	 */
	public ParticipationUnitPersistence getParticipationUnitPersistence() {
		return participationUnitPersistence;
	}

	/**
	 * Sets the participation unit persistence.
	 *
	 * @param participationUnitPersistence the participation unit persistence
	 */
	public void setParticipationUnitPersistence(
		ParticipationUnitPersistence participationUnitPersistence) {
		this.participationUnitPersistence = participationUnitPersistence;
	}

	/**
	 * Returns the permit local service.
	 *
	 * @return the permit local service
	 */
	public com.justonetech.cp.permit.service.PermitLocalService getPermitLocalService() {
		return permitLocalService;
	}

	/**
	 * Sets the permit local service.
	 *
	 * @param permitLocalService the permit local service
	 */
	public void setPermitLocalService(
		com.justonetech.cp.permit.service.PermitLocalService permitLocalService) {
		this.permitLocalService = permitLocalService;
	}

	/**
	 * Returns the permit persistence.
	 *
	 * @return the permit persistence
	 */
	public PermitPersistence getPermitPersistence() {
		return permitPersistence;
	}

	/**
	 * Sets the permit persistence.
	 *
	 * @param permitPersistence the permit persistence
	 */
	public void setPermitPersistence(PermitPersistence permitPersistence) {
		this.permitPersistence = permitPersistence;
	}

	/**
	 * Returns the project profile local service.
	 *
	 * @return the project profile local service
	 */
	public com.justonetech.cp.permit.service.ProjectProfileLocalService getProjectProfileLocalService() {
		return projectProfileLocalService;
	}

	/**
	 * Sets the project profile local service.
	 *
	 * @param projectProfileLocalService the project profile local service
	 */
	public void setProjectProfileLocalService(
		com.justonetech.cp.permit.service.ProjectProfileLocalService projectProfileLocalService) {
		this.projectProfileLocalService = projectProfileLocalService;
	}

	/**
	 * Returns the project profile persistence.
	 *
	 * @return the project profile persistence
	 */
	public ProjectProfilePersistence getProjectProfilePersistence() {
		return projectProfilePersistence;
	}

	/**
	 * Sets the project profile persistence.
	 *
	 * @param projectProfilePersistence the project profile persistence
	 */
	public void setProjectProfilePersistence(
		ProjectProfilePersistence projectProfilePersistence) {
		this.projectProfilePersistence = projectProfilePersistence;
	}

	/**
	 * Returns the unit project local service.
	 *
	 * @return the unit project local service
	 */
	public com.justonetech.cp.permit.service.UnitProjectLocalService getUnitProjectLocalService() {
		return unitProjectLocalService;
	}

	/**
	 * Sets the unit project local service.
	 *
	 * @param unitProjectLocalService the unit project local service
	 */
	public void setUnitProjectLocalService(
		com.justonetech.cp.permit.service.UnitProjectLocalService unitProjectLocalService) {
		this.unitProjectLocalService = unitProjectLocalService;
	}

	/**
	 * Returns the unit project persistence.
	 *
	 * @return the unit project persistence
	 */
	public UnitProjectPersistence getUnitProjectPersistence() {
		return unitProjectPersistence;
	}

	/**
	 * Sets the unit project persistence.
	 *
	 * @param unitProjectPersistence the unit project persistence
	 */
	public void setUnitProjectPersistence(
		UnitProjectPersistence unitProjectPersistence) {
		this.unitProjectPersistence = unitProjectPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.justonetech.cp.permit.model.Permit",
			permitLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.justonetech.cp.permit.model.Permit");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Permit.class;
	}

	protected String getModelClassName() {
		return Permit.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = permitPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.justonetech.cp.permit.service.ApplyMaterialLocalService.class)
	protected com.justonetech.cp.permit.service.ApplyMaterialLocalService applyMaterialLocalService;
	@BeanReference(type = ApplyMaterialPersistence.class)
	protected ApplyMaterialPersistence applyMaterialPersistence;
	@BeanReference(type = com.justonetech.cp.permit.service.ParticipationUnitLocalService.class)
	protected com.justonetech.cp.permit.service.ParticipationUnitLocalService participationUnitLocalService;
	@BeanReference(type = ParticipationUnitPersistence.class)
	protected ParticipationUnitPersistence participationUnitPersistence;
	@BeanReference(type = com.justonetech.cp.permit.service.PermitLocalService.class)
	protected com.justonetech.cp.permit.service.PermitLocalService permitLocalService;
	@BeanReference(type = PermitPersistence.class)
	protected PermitPersistence permitPersistence;
	@BeanReference(type = com.justonetech.cp.permit.service.ProjectProfileLocalService.class)
	protected com.justonetech.cp.permit.service.ProjectProfileLocalService projectProfileLocalService;
	@BeanReference(type = ProjectProfilePersistence.class)
	protected ProjectProfilePersistence projectProfilePersistence;
	@BeanReference(type = com.justonetech.cp.permit.service.UnitProjectLocalService.class)
	protected com.justonetech.cp.permit.service.UnitProjectLocalService unitProjectLocalService;
	@BeanReference(type = UnitProjectPersistence.class)
	protected UnitProjectPersistence unitProjectPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private PermitLocalServiceClpInvoker _clpInvoker = new PermitLocalServiceClpInvoker();
}