/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.cp.permit.model.impl;

import com.justonetech.cp.permit.model.UnitProject;
import com.justonetech.cp.permit.model.UnitProjectModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UnitProject service. Represents a row in the &quot;cp_UnitProject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.cp.permit.model.UnitProjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UnitProjectImpl}.
 * </p>
 *
 * @author fanqi
 * @see UnitProjectImpl
 * @see com.justonetech.cp.permit.model.UnitProject
 * @see com.justonetech.cp.permit.model.UnitProjectModel
 * @generated
 */
public class UnitProjectModelImpl extends BaseModelImpl<UnitProject>
	implements UnitProjectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a unit project model instance should use the {@link com.justonetech.cp.permit.model.UnitProject} interface instead.
	 */
	public static final String TABLE_NAME = "cp_UnitProject";
	public static final Object[][] TABLE_COLUMNS = {
			{ "projectId", Types.BIGINT },
			{ "permitId", Types.BIGINT },
			{ "bjbh", Types.VARCHAR },
			{ "gcbh", Types.VARCHAR },
			{ "gcmc", Types.VARCHAR },
			{ "jsnr", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table cp_UnitProject (projectId LONG not null primary key,permitId LONG,bjbh VARCHAR(75) null,gcbh VARCHAR(75) null,gcmc VARCHAR(75) null,jsnr VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table cp_UnitProject";
	public static final String ORDER_BY_JPQL = " ORDER BY unitProject.gcbh ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cp_UnitProject.gcbh ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.cp.permit.model.UnitProject"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.cp.permit.model.UnitProject"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.justonetech.cp.permit.model.UnitProject"),
			true);
	public static long PERMITID_COLUMN_BITMASK = 1L;
	public static long GCBH_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.cp.permit.model.UnitProject"));

	public UnitProjectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UnitProject.class;
	}

	@Override
	public String getModelClassName() {
		return UnitProject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectId", getProjectId());
		attributes.put("permitId", getPermitId());
		attributes.put("bjbh", getBjbh());
		attributes.put("gcbh", getGcbh());
		attributes.put("gcmc", getGcmc());
		attributes.put("jsnr", getJsnr());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long permitId = (Long)attributes.get("permitId");

		if (permitId != null) {
			setPermitId(permitId);
		}

		String bjbh = (String)attributes.get("bjbh");

		if (bjbh != null) {
			setBjbh(bjbh);
		}

		String gcbh = (String)attributes.get("gcbh");

		if (gcbh != null) {
			setGcbh(gcbh);
		}

		String gcmc = (String)attributes.get("gcmc");

		if (gcmc != null) {
			setGcmc(gcmc);
		}

		String jsnr = (String)attributes.get("jsnr");

		if (jsnr != null) {
			setJsnr(jsnr);
		}
	}

	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@Override
	public long getPermitId() {
		return _permitId;
	}

	@Override
	public void setPermitId(long permitId) {
		_columnBitmask |= PERMITID_COLUMN_BITMASK;

		if (!_setOriginalPermitId) {
			_setOriginalPermitId = true;

			_originalPermitId = _permitId;
		}

		_permitId = permitId;
	}

	public long getOriginalPermitId() {
		return _originalPermitId;
	}

	@Override
	public String getBjbh() {
		if (_bjbh == null) {
			return StringPool.BLANK;
		}
		else {
			return _bjbh;
		}
	}

	@Override
	public void setBjbh(String bjbh) {
		_bjbh = bjbh;
	}

	@Override
	public String getGcbh() {
		if (_gcbh == null) {
			return StringPool.BLANK;
		}
		else {
			return _gcbh;
		}
	}

	@Override
	public void setGcbh(String gcbh) {
		_columnBitmask = -1L;

		_gcbh = gcbh;
	}

	@Override
	public String getGcmc() {
		if (_gcmc == null) {
			return StringPool.BLANK;
		}
		else {
			return _gcmc;
		}
	}

	@Override
	public void setGcmc(String gcmc) {
		_gcmc = gcmc;
	}

	@Override
	public String getJsnr() {
		if (_jsnr == null) {
			return StringPool.BLANK;
		}
		else {
			return _jsnr;
		}
	}

	@Override
	public void setJsnr(String jsnr) {
		_jsnr = jsnr;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UnitProject.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UnitProject toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UnitProject)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UnitProjectImpl unitProjectImpl = new UnitProjectImpl();

		unitProjectImpl.setProjectId(getProjectId());
		unitProjectImpl.setPermitId(getPermitId());
		unitProjectImpl.setBjbh(getBjbh());
		unitProjectImpl.setGcbh(getGcbh());
		unitProjectImpl.setGcmc(getGcmc());
		unitProjectImpl.setJsnr(getJsnr());

		unitProjectImpl.resetOriginalValues();

		return unitProjectImpl;
	}

	@Override
	public int compareTo(UnitProject unitProject) {
		int value = 0;

		value = getGcbh().compareTo(unitProject.getGcbh());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UnitProject)) {
			return false;
		}

		UnitProject unitProject = (UnitProject)obj;

		long primaryKey = unitProject.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UnitProjectModelImpl unitProjectModelImpl = this;

		unitProjectModelImpl._originalPermitId = unitProjectModelImpl._permitId;

		unitProjectModelImpl._setOriginalPermitId = false;

		unitProjectModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UnitProject> toCacheModel() {
		UnitProjectCacheModel unitProjectCacheModel = new UnitProjectCacheModel();

		unitProjectCacheModel.projectId = getProjectId();

		unitProjectCacheModel.permitId = getPermitId();

		unitProjectCacheModel.bjbh = getBjbh();

		String bjbh = unitProjectCacheModel.bjbh;

		if ((bjbh != null) && (bjbh.length() == 0)) {
			unitProjectCacheModel.bjbh = null;
		}

		unitProjectCacheModel.gcbh = getGcbh();

		String gcbh = unitProjectCacheModel.gcbh;

		if ((gcbh != null) && (gcbh.length() == 0)) {
			unitProjectCacheModel.gcbh = null;
		}

		unitProjectCacheModel.gcmc = getGcmc();

		String gcmc = unitProjectCacheModel.gcmc;

		if ((gcmc != null) && (gcmc.length() == 0)) {
			unitProjectCacheModel.gcmc = null;
		}

		unitProjectCacheModel.jsnr = getJsnr();

		String jsnr = unitProjectCacheModel.jsnr;

		if ((jsnr != null) && (jsnr.length() == 0)) {
			unitProjectCacheModel.jsnr = null;
		}

		return unitProjectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{projectId=");
		sb.append(getProjectId());
		sb.append(", permitId=");
		sb.append(getPermitId());
		sb.append(", bjbh=");
		sb.append(getBjbh());
		sb.append(", gcbh=");
		sb.append(getGcbh());
		sb.append(", gcmc=");
		sb.append(getGcmc());
		sb.append(", jsnr=");
		sb.append(getJsnr());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.cp.permit.model.UnitProject");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permitId</column-name><column-value><![CDATA[");
		sb.append(getPermitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bjbh</column-name><column-value><![CDATA[");
		sb.append(getBjbh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gcbh</column-name><column-value><![CDATA[");
		sb.append(getGcbh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gcmc</column-name><column-value><![CDATA[");
		sb.append(getGcmc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jsnr</column-name><column-value><![CDATA[");
		sb.append(getJsnr());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UnitProject.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UnitProject.class
		};
	private long _projectId;
	private long _permitId;
	private long _originalPermitId;
	private boolean _setOriginalPermitId;
	private String _bjbh;
	private String _gcbh;
	private String _gcmc;
	private String _jsnr;
	private long _columnBitmask;
	private UnitProject _escapedModel;
}