/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.proj.model.impl;

import com.justonetech.proj.model.Bidding;
import com.justonetech.proj.model.BiddingModel;
import com.justonetech.proj.model.BiddingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Bidding service. Represents a row in the &quot;proj_Bidding&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.proj.model.BiddingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BiddingImpl}.
 * </p>
 *
 * @author fanqi
 * @see BiddingImpl
 * @see com.justonetech.proj.model.Bidding
 * @see com.justonetech.proj.model.BiddingModel
 * @generated
 */
@JSON(strict = true)
public class BiddingModelImpl extends BaseModelImpl<Bidding>
	implements BiddingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bidding model instance should use the {@link com.justonetech.proj.model.Bidding} interface instead.
	 */
	public static final String TABLE_NAME = "proj_Bidding";
	public static final Object[][] TABLE_COLUMNS = {
			{ "biddingId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "bidCode", Types.VARCHAR },
			{ "sortNo", Types.INTEGER },
			{ "bidName", Types.VARCHAR },
			{ "bidCategoryCode", Types.VARCHAR },
			{ "buildMileage", Types.VARCHAR },
			{ "involveCounty", Types.VARCHAR },
			{ "projLinkman", Types.VARCHAR },
			{ "linkTel", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "projectId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table proj_Bidding (biddingId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,bidCode VARCHAR(75) null,sortNo INTEGER,bidName VARCHAR(75) null,bidCategoryCode VARCHAR(75) null,buildMileage VARCHAR(75) null,involveCounty VARCHAR(75) null,projLinkman VARCHAR(75) null,linkTel VARCHAR(75) null,startDate DATE null,projectId LONG)";
	public static final String TABLE_SQL_DROP = "drop table proj_Bidding";
	public static final String ORDER_BY_JPQL = " ORDER BY bidding.biddingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY proj_Bidding.biddingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.proj.model.Bidding"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.proj.model.Bidding"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Bidding toModel(BiddingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Bidding model = new BiddingImpl();

		model.setBiddingId(soapModel.getBiddingId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBidCode(soapModel.getBidCode());
		model.setSortNo(soapModel.getSortNo());
		model.setBidName(soapModel.getBidName());
		model.setBidCategoryCode(soapModel.getBidCategoryCode());
		model.setBuildMileage(soapModel.getBuildMileage());
		model.setInvolveCounty(soapModel.getInvolveCounty());
		model.setProjLinkman(soapModel.getProjLinkman());
		model.setLinkTel(soapModel.getLinkTel());
		model.setStartDate(soapModel.getStartDate());
		model.setProjectId(soapModel.getProjectId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Bidding> toModels(BiddingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Bidding> models = new ArrayList<Bidding>(soapModels.length);

		for (BiddingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.proj.model.Bidding"));

	public BiddingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _biddingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBiddingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _biddingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Bidding.class;
	}

	@Override
	public String getModelClassName() {
		return Bidding.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("biddingId", getBiddingId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("bidCode", getBidCode());
		attributes.put("sortNo", getSortNo());
		attributes.put("bidName", getBidName());
		attributes.put("bidCategoryCode", getBidCategoryCode());
		attributes.put("buildMileage", getBuildMileage());
		attributes.put("involveCounty", getInvolveCounty());
		attributes.put("projLinkman", getProjLinkman());
		attributes.put("linkTel", getLinkTel());
		attributes.put("startDate", getStartDate());
		attributes.put("projectId", getProjectId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long biddingId = (Long)attributes.get("biddingId");

		if (biddingId != null) {
			setBiddingId(biddingId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String bidCode = (String)attributes.get("bidCode");

		if (bidCode != null) {
			setBidCode(bidCode);
		}

		Integer sortNo = (Integer)attributes.get("sortNo");

		if (sortNo != null) {
			setSortNo(sortNo);
		}

		String bidName = (String)attributes.get("bidName");

		if (bidName != null) {
			setBidName(bidName);
		}

		String bidCategoryCode = (String)attributes.get("bidCategoryCode");

		if (bidCategoryCode != null) {
			setBidCategoryCode(bidCategoryCode);
		}

		String buildMileage = (String)attributes.get("buildMileage");

		if (buildMileage != null) {
			setBuildMileage(buildMileage);
		}

		String involveCounty = (String)attributes.get("involveCounty");

		if (involveCounty != null) {
			setInvolveCounty(involveCounty);
		}

		String projLinkman = (String)attributes.get("projLinkman");

		if (projLinkman != null) {
			setProjLinkman(projLinkman);
		}

		String linkTel = (String)attributes.get("linkTel");

		if (linkTel != null) {
			setLinkTel(linkTel);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}
	}

	@JSON
	@Override
	public long getBiddingId() {
		return _biddingId;
	}

	@Override
	public void setBiddingId(long biddingId) {
		_biddingId = biddingId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getBidCode() {
		if (_bidCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _bidCode;
		}
	}

	@Override
	public void setBidCode(String bidCode) {
		_bidCode = bidCode;
	}

	@JSON
	@Override
	public int getSortNo() {
		return _sortNo;
	}

	@Override
	public void setSortNo(int sortNo) {
		_sortNo = sortNo;
	}

	@JSON
	@Override
	public String getBidName() {
		if (_bidName == null) {
			return StringPool.BLANK;
		}
		else {
			return _bidName;
		}
	}

	@Override
	public void setBidName(String bidName) {
		_bidName = bidName;
	}

	@JSON
	@Override
	public String getBidCategoryCode() {
		if (_bidCategoryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _bidCategoryCode;
		}
	}

	@Override
	public void setBidCategoryCode(String bidCategoryCode) {
		_bidCategoryCode = bidCategoryCode;
	}

	@JSON
	@Override
	public String getBuildMileage() {
		if (_buildMileage == null) {
			return StringPool.BLANK;
		}
		else {
			return _buildMileage;
		}
	}

	@Override
	public void setBuildMileage(String buildMileage) {
		_buildMileage = buildMileage;
	}

	@JSON
	@Override
	public String getInvolveCounty() {
		if (_involveCounty == null) {
			return StringPool.BLANK;
		}
		else {
			return _involveCounty;
		}
	}

	@Override
	public void setInvolveCounty(String involveCounty) {
		_involveCounty = involveCounty;
	}

	@JSON
	@Override
	public String getProjLinkman() {
		if (_projLinkman == null) {
			return StringPool.BLANK;
		}
		else {
			return _projLinkman;
		}
	}

	@Override
	public void setProjLinkman(String projLinkman) {
		_projLinkman = projLinkman;
	}

	@JSON
	@Override
	public String getLinkTel() {
		if (_linkTel == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkTel;
		}
	}

	@Override
	public void setLinkTel(String linkTel) {
		_linkTel = linkTel;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Bidding.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Bidding toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Bidding)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BiddingImpl biddingImpl = new BiddingImpl();

		biddingImpl.setBiddingId(getBiddingId());
		biddingImpl.setUserId(getUserId());
		biddingImpl.setUserName(getUserName());
		biddingImpl.setCreateDate(getCreateDate());
		biddingImpl.setModifiedDate(getModifiedDate());
		biddingImpl.setBidCode(getBidCode());
		biddingImpl.setSortNo(getSortNo());
		biddingImpl.setBidName(getBidName());
		biddingImpl.setBidCategoryCode(getBidCategoryCode());
		biddingImpl.setBuildMileage(getBuildMileage());
		biddingImpl.setInvolveCounty(getInvolveCounty());
		biddingImpl.setProjLinkman(getProjLinkman());
		biddingImpl.setLinkTel(getLinkTel());
		biddingImpl.setStartDate(getStartDate());
		biddingImpl.setProjectId(getProjectId());

		biddingImpl.resetOriginalValues();

		return biddingImpl;
	}

	@Override
	public int compareTo(Bidding bidding) {
		int value = 0;

		if (getBiddingId() < bidding.getBiddingId()) {
			value = -1;
		}
		else if (getBiddingId() > bidding.getBiddingId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Bidding)) {
			return false;
		}

		Bidding bidding = (Bidding)obj;

		long primaryKey = bidding.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Bidding> toCacheModel() {
		BiddingCacheModel biddingCacheModel = new BiddingCacheModel();

		biddingCacheModel.biddingId = getBiddingId();

		biddingCacheModel.userId = getUserId();

		biddingCacheModel.userName = getUserName();

		String userName = biddingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			biddingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			biddingCacheModel.createDate = createDate.getTime();
		}
		else {
			biddingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			biddingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			biddingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		biddingCacheModel.bidCode = getBidCode();

		String bidCode = biddingCacheModel.bidCode;

		if ((bidCode != null) && (bidCode.length() == 0)) {
			biddingCacheModel.bidCode = null;
		}

		biddingCacheModel.sortNo = getSortNo();

		biddingCacheModel.bidName = getBidName();

		String bidName = biddingCacheModel.bidName;

		if ((bidName != null) && (bidName.length() == 0)) {
			biddingCacheModel.bidName = null;
		}

		biddingCacheModel.bidCategoryCode = getBidCategoryCode();

		String bidCategoryCode = biddingCacheModel.bidCategoryCode;

		if ((bidCategoryCode != null) && (bidCategoryCode.length() == 0)) {
			biddingCacheModel.bidCategoryCode = null;
		}

		biddingCacheModel.buildMileage = getBuildMileage();

		String buildMileage = biddingCacheModel.buildMileage;

		if ((buildMileage != null) && (buildMileage.length() == 0)) {
			biddingCacheModel.buildMileage = null;
		}

		biddingCacheModel.involveCounty = getInvolveCounty();

		String involveCounty = biddingCacheModel.involveCounty;

		if ((involveCounty != null) && (involveCounty.length() == 0)) {
			biddingCacheModel.involveCounty = null;
		}

		biddingCacheModel.projLinkman = getProjLinkman();

		String projLinkman = biddingCacheModel.projLinkman;

		if ((projLinkman != null) && (projLinkman.length() == 0)) {
			biddingCacheModel.projLinkman = null;
		}

		biddingCacheModel.linkTel = getLinkTel();

		String linkTel = biddingCacheModel.linkTel;

		if ((linkTel != null) && (linkTel.length() == 0)) {
			biddingCacheModel.linkTel = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			biddingCacheModel.startDate = startDate.getTime();
		}
		else {
			biddingCacheModel.startDate = Long.MIN_VALUE;
		}

		biddingCacheModel.projectId = getProjectId();

		return biddingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{biddingId=");
		sb.append(getBiddingId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", bidCode=");
		sb.append(getBidCode());
		sb.append(", sortNo=");
		sb.append(getSortNo());
		sb.append(", bidName=");
		sb.append(getBidName());
		sb.append(", bidCategoryCode=");
		sb.append(getBidCategoryCode());
		sb.append(", buildMileage=");
		sb.append(getBuildMileage());
		sb.append(", involveCounty=");
		sb.append(getInvolveCounty());
		sb.append(", projLinkman=");
		sb.append(getProjLinkman());
		sb.append(", linkTel=");
		sb.append(getLinkTel());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.proj.model.Bidding");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>biddingId</column-name><column-value><![CDATA[");
		sb.append(getBiddingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bidCode</column-name><column-value><![CDATA[");
		sb.append(getBidCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sortNo</column-name><column-value><![CDATA[");
		sb.append(getSortNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bidName</column-name><column-value><![CDATA[");
		sb.append(getBidName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bidCategoryCode</column-name><column-value><![CDATA[");
		sb.append(getBidCategoryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buildMileage</column-name><column-value><![CDATA[");
		sb.append(getBuildMileage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>involveCounty</column-name><column-value><![CDATA[");
		sb.append(getInvolveCounty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projLinkman</column-name><column-value><![CDATA[");
		sb.append(getProjLinkman());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkTel</column-name><column-value><![CDATA[");
		sb.append(getLinkTel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Bidding.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Bidding.class
		};
	private long _biddingId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _bidCode;
	private int _sortNo;
	private String _bidName;
	private String _bidCategoryCode;
	private String _buildMileage;
	private String _involveCounty;
	private String _projLinkman;
	private String _linkTel;
	private Date _startDate;
	private long _projectId;
	private Bidding _escapedModel;
}