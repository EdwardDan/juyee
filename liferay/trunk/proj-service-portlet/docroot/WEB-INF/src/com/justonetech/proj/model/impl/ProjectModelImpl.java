/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.justonetech.proj.model.impl;

import com.justonetech.proj.model.Project;
import com.justonetech.proj.model.ProjectModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Project service. Represents a row in the &quot;proj_Project&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.justonetech.proj.model.ProjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectImpl}.
 * </p>
 *
 * @author fanqi
 * @see ProjectImpl
 * @see com.justonetech.proj.model.Project
 * @see com.justonetech.proj.model.ProjectModel
 * @generated
 */
public class ProjectModelImpl extends BaseModelImpl<Project>
	implements ProjectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project model instance should use the {@link com.justonetech.proj.model.Project} interface instead.
	 */
	public static final String TABLE_NAME = "proj_Project";
	public static final Object[][] TABLE_COLUMNS = {
			{ "projectId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createTime", Types.TIMESTAMP },
			{ "modifiedTime", Types.TIMESTAMP },
			{ "constructionCode", Types.VARCHAR },
			{ "projNum", Types.VARCHAR },
			{ "sortNo", Types.INTEGER },
			{ "projStatus", Types.BIGINT },
			{ "industryCategory", Types.BIGINT },
			{ "manageAttribute", Types.BIGINT },
			{ "isMajor", Types.BOOLEAN },
			{ "projSource", Types.BIGINT },
			{ "belongCounty", Types.BIGINT },
			{ "projAttr", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "projName", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "involveCounty", Types.VARCHAR },
			{ "planRedLine", Types.DOUBLE },
			{ "roadLevel", Types.BIGINT },
			{ "roadTechLevel", Types.BIGINT },
			{ "startNode", Types.TIMESTAMP },
			{ "endNode", Types.TIMESTAMP },
			{ "planStartDate", Types.TIMESTAMP },
			{ "planEndDate", Types.TIMESTAMP },
			{ "introduction", Types.VARCHAR },
			{ "planTotleInvestment", Types.DOUBLE },
			{ "feasibilityTotleInvestment", Types.DOUBLE },
			{ "feasibilityPreCost", Types.DOUBLE },
			{ "feasibilityJiananCost", Types.DOUBLE },
			{ "firstFoundedTotleInvestment", Types.DOUBLE },
			{ "firstFoundedPreCost", Types.DOUBLE },
			{ "firstFoundedJiananCost", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table proj_Project (projectId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createTime DATE null,modifiedTime DATE null,constructionCode VARCHAR(75) null,projNum VARCHAR(75) null,sortNo INTEGER,projStatus LONG,industryCategory LONG,manageAttribute LONG,isMajor BOOLEAN,projSource LONG,belongCounty LONG,projAttr LONG,startDate DATE null,endDate DATE null,projName VARCHAR(75) null,location VARCHAR(75) null,involveCounty VARCHAR(75) null,planRedLine DOUBLE,roadLevel LONG,roadTechLevel LONG,startNode DATE null,endNode DATE null,planStartDate DATE null,planEndDate DATE null,introduction VARCHAR(75) null,planTotleInvestment DOUBLE,feasibilityTotleInvestment DOUBLE,feasibilityPreCost DOUBLE,feasibilityJiananCost DOUBLE,firstFoundedTotleInvestment DOUBLE,firstFoundedPreCost DOUBLE,firstFoundedJiananCost DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table proj_Project";
	public static final String ORDER_BY_JPQL = " ORDER BY project.sortNo ASC, project.projectId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY proj_Project.sortNo ASC, proj_Project.projectId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.justonetech.proj.model.Project"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.justonetech.proj.model.Project"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.justonetech.proj.model.Project"));

	public ProjectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Project.class;
	}

	@Override
	public String getModelClassName() {
		return Project.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectId", getProjectId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createTime", getCreateTime());
		attributes.put("modifiedTime", getModifiedTime());
		attributes.put("constructionCode", getConstructionCode());
		attributes.put("projNum", getProjNum());
		attributes.put("sortNo", getSortNo());
		attributes.put("projStatus", getProjStatus());
		attributes.put("industryCategory", getIndustryCategory());
		attributes.put("manageAttribute", getManageAttribute());
		attributes.put("isMajor", getIsMajor());
		attributes.put("projSource", getProjSource());
		attributes.put("belongCounty", getBelongCounty());
		attributes.put("projAttr", getProjAttr());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("projName", getProjName());
		attributes.put("location", getLocation());
		attributes.put("involveCounty", getInvolveCounty());
		attributes.put("planRedLine", getPlanRedLine());
		attributes.put("roadLevel", getRoadLevel());
		attributes.put("roadTechLevel", getRoadTechLevel());
		attributes.put("startNode", getStartNode());
		attributes.put("endNode", getEndNode());
		attributes.put("planStartDate", getPlanStartDate());
		attributes.put("planEndDate", getPlanEndDate());
		attributes.put("introduction", getIntroduction());
		attributes.put("planTotleInvestment", getPlanTotleInvestment());
		attributes.put("feasibilityTotleInvestment",
			getFeasibilityTotleInvestment());
		attributes.put("feasibilityPreCost", getFeasibilityPreCost());
		attributes.put("feasibilityJiananCost", getFeasibilityJiananCost());
		attributes.put("firstFoundedTotleInvestment",
			getFirstFoundedTotleInvestment());
		attributes.put("firstFoundedPreCost", getFirstFoundedPreCost());
		attributes.put("firstFoundedJiananCost", getFirstFoundedJiananCost());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createTime = (Date)attributes.get("createTime");

		if (createTime != null) {
			setCreateTime(createTime);
		}

		Date modifiedTime = (Date)attributes.get("modifiedTime");

		if (modifiedTime != null) {
			setModifiedTime(modifiedTime);
		}

		String constructionCode = (String)attributes.get("constructionCode");

		if (constructionCode != null) {
			setConstructionCode(constructionCode);
		}

		String projNum = (String)attributes.get("projNum");

		if (projNum != null) {
			setProjNum(projNum);
		}

		Integer sortNo = (Integer)attributes.get("sortNo");

		if (sortNo != null) {
			setSortNo(sortNo);
		}

		Long projStatus = (Long)attributes.get("projStatus");

		if (projStatus != null) {
			setProjStatus(projStatus);
		}

		Long industryCategory = (Long)attributes.get("industryCategory");

		if (industryCategory != null) {
			setIndustryCategory(industryCategory);
		}

		Long manageAttribute = (Long)attributes.get("manageAttribute");

		if (manageAttribute != null) {
			setManageAttribute(manageAttribute);
		}

		Boolean isMajor = (Boolean)attributes.get("isMajor");

		if (isMajor != null) {
			setIsMajor(isMajor);
		}

		Long projSource = (Long)attributes.get("projSource");

		if (projSource != null) {
			setProjSource(projSource);
		}

		Long belongCounty = (Long)attributes.get("belongCounty");

		if (belongCounty != null) {
			setBelongCounty(belongCounty);
		}

		Long projAttr = (Long)attributes.get("projAttr");

		if (projAttr != null) {
			setProjAttr(projAttr);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String projName = (String)attributes.get("projName");

		if (projName != null) {
			setProjName(projName);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String involveCounty = (String)attributes.get("involveCounty");

		if (involveCounty != null) {
			setInvolveCounty(involveCounty);
		}

		Double planRedLine = (Double)attributes.get("planRedLine");

		if (planRedLine != null) {
			setPlanRedLine(planRedLine);
		}

		Long roadLevel = (Long)attributes.get("roadLevel");

		if (roadLevel != null) {
			setRoadLevel(roadLevel);
		}

		Long roadTechLevel = (Long)attributes.get("roadTechLevel");

		if (roadTechLevel != null) {
			setRoadTechLevel(roadTechLevel);
		}

		Date startNode = (Date)attributes.get("startNode");

		if (startNode != null) {
			setStartNode(startNode);
		}

		Date endNode = (Date)attributes.get("endNode");

		if (endNode != null) {
			setEndNode(endNode);
		}

		Date planStartDate = (Date)attributes.get("planStartDate");

		if (planStartDate != null) {
			setPlanStartDate(planStartDate);
		}

		Date planEndDate = (Date)attributes.get("planEndDate");

		if (planEndDate != null) {
			setPlanEndDate(planEndDate);
		}

		String introduction = (String)attributes.get("introduction");

		if (introduction != null) {
			setIntroduction(introduction);
		}

		Double planTotleInvestment = (Double)attributes.get(
				"planTotleInvestment");

		if (planTotleInvestment != null) {
			setPlanTotleInvestment(planTotleInvestment);
		}

		Double feasibilityTotleInvestment = (Double)attributes.get(
				"feasibilityTotleInvestment");

		if (feasibilityTotleInvestment != null) {
			setFeasibilityTotleInvestment(feasibilityTotleInvestment);
		}

		Double feasibilityPreCost = (Double)attributes.get("feasibilityPreCost");

		if (feasibilityPreCost != null) {
			setFeasibilityPreCost(feasibilityPreCost);
		}

		Double feasibilityJiananCost = (Double)attributes.get(
				"feasibilityJiananCost");

		if (feasibilityJiananCost != null) {
			setFeasibilityJiananCost(feasibilityJiananCost);
		}

		Double firstFoundedTotleInvestment = (Double)attributes.get(
				"firstFoundedTotleInvestment");

		if (firstFoundedTotleInvestment != null) {
			setFirstFoundedTotleInvestment(firstFoundedTotleInvestment);
		}

		Double firstFoundedPreCost = (Double)attributes.get(
				"firstFoundedPreCost");

		if (firstFoundedPreCost != null) {
			setFirstFoundedPreCost(firstFoundedPreCost);
		}

		Double firstFoundedJiananCost = (Double)attributes.get(
				"firstFoundedJiananCost");

		if (firstFoundedJiananCost != null) {
			setFirstFoundedJiananCost(firstFoundedJiananCost);
		}
	}

	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateTime() {
		return _createTime;
	}

	@Override
	public void setCreateTime(Date createTime) {
		_createTime = createTime;
	}

	@Override
	public Date getModifiedTime() {
		return _modifiedTime;
	}

	@Override
	public void setModifiedTime(Date modifiedTime) {
		_modifiedTime = modifiedTime;
	}

	@Override
	public String getConstructionCode() {
		if (_constructionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _constructionCode;
		}
	}

	@Override
	public void setConstructionCode(String constructionCode) {
		_constructionCode = constructionCode;
	}

	@Override
	public String getProjNum() {
		if (_projNum == null) {
			return StringPool.BLANK;
		}
		else {
			return _projNum;
		}
	}

	@Override
	public void setProjNum(String projNum) {
		_projNum = projNum;
	}

	@Override
	public int getSortNo() {
		return _sortNo;
	}

	@Override
	public void setSortNo(int sortNo) {
		_sortNo = sortNo;
	}

	@Override
	public long getProjStatus() {
		return _projStatus;
	}

	@Override
	public void setProjStatus(long projStatus) {
		_projStatus = projStatus;
	}

	@Override
	public long getIndustryCategory() {
		return _industryCategory;
	}

	@Override
	public void setIndustryCategory(long industryCategory) {
		_industryCategory = industryCategory;
	}

	@Override
	public long getManageAttribute() {
		return _manageAttribute;
	}

	@Override
	public void setManageAttribute(long manageAttribute) {
		_manageAttribute = manageAttribute;
	}

	@Override
	public boolean getIsMajor() {
		return _isMajor;
	}

	@Override
	public boolean isIsMajor() {
		return _isMajor;
	}

	@Override
	public void setIsMajor(boolean isMajor) {
		_isMajor = isMajor;
	}

	@Override
	public long getProjSource() {
		return _projSource;
	}

	@Override
	public void setProjSource(long projSource) {
		_projSource = projSource;
	}

	@Override
	public long getBelongCounty() {
		return _belongCounty;
	}

	@Override
	public void setBelongCounty(long belongCounty) {
		_belongCounty = belongCounty;
	}

	@Override
	public long getProjAttr() {
		return _projAttr;
	}

	@Override
	public void setProjAttr(long projAttr) {
		_projAttr = projAttr;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public String getProjName() {
		if (_projName == null) {
			return StringPool.BLANK;
		}
		else {
			return _projName;
		}
	}

	@Override
	public void setProjName(String projName) {
		_projName = projName;
	}

	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@Override
	public String getInvolveCounty() {
		if (_involveCounty == null) {
			return StringPool.BLANK;
		}
		else {
			return _involveCounty;
		}
	}

	@Override
	public void setInvolveCounty(String involveCounty) {
		_involveCounty = involveCounty;
	}

	@Override
	public double getPlanRedLine() {
		return _planRedLine;
	}

	@Override
	public void setPlanRedLine(double planRedLine) {
		_planRedLine = planRedLine;
	}

	@Override
	public long getRoadLevel() {
		return _roadLevel;
	}

	@Override
	public void setRoadLevel(long roadLevel) {
		_roadLevel = roadLevel;
	}

	@Override
	public long getRoadTechLevel() {
		return _roadTechLevel;
	}

	@Override
	public void setRoadTechLevel(long roadTechLevel) {
		_roadTechLevel = roadTechLevel;
	}

	@Override
	public Date getStartNode() {
		return _startNode;
	}

	@Override
	public void setStartNode(Date startNode) {
		_startNode = startNode;
	}

	@Override
	public Date getEndNode() {
		return _endNode;
	}

	@Override
	public void setEndNode(Date endNode) {
		_endNode = endNode;
	}

	@Override
	public Date getPlanStartDate() {
		return _planStartDate;
	}

	@Override
	public void setPlanStartDate(Date planStartDate) {
		_planStartDate = planStartDate;
	}

	@Override
	public Date getPlanEndDate() {
		return _planEndDate;
	}

	@Override
	public void setPlanEndDate(Date planEndDate) {
		_planEndDate = planEndDate;
	}

	@Override
	public String getIntroduction() {
		if (_introduction == null) {
			return StringPool.BLANK;
		}
		else {
			return _introduction;
		}
	}

	@Override
	public void setIntroduction(String introduction) {
		_introduction = introduction;
	}

	@Override
	public double getPlanTotleInvestment() {
		return _planTotleInvestment;
	}

	@Override
	public void setPlanTotleInvestment(double planTotleInvestment) {
		_planTotleInvestment = planTotleInvestment;
	}

	@Override
	public double getFeasibilityTotleInvestment() {
		return _feasibilityTotleInvestment;
	}

	@Override
	public void setFeasibilityTotleInvestment(double feasibilityTotleInvestment) {
		_feasibilityTotleInvestment = feasibilityTotleInvestment;
	}

	@Override
	public double getFeasibilityPreCost() {
		return _feasibilityPreCost;
	}

	@Override
	public void setFeasibilityPreCost(double feasibilityPreCost) {
		_feasibilityPreCost = feasibilityPreCost;
	}

	@Override
	public double getFeasibilityJiananCost() {
		return _feasibilityJiananCost;
	}

	@Override
	public void setFeasibilityJiananCost(double feasibilityJiananCost) {
		_feasibilityJiananCost = feasibilityJiananCost;
	}

	@Override
	public double getFirstFoundedTotleInvestment() {
		return _firstFoundedTotleInvestment;
	}

	@Override
	public void setFirstFoundedTotleInvestment(
		double firstFoundedTotleInvestment) {
		_firstFoundedTotleInvestment = firstFoundedTotleInvestment;
	}

	@Override
	public double getFirstFoundedPreCost() {
		return _firstFoundedPreCost;
	}

	@Override
	public void setFirstFoundedPreCost(double firstFoundedPreCost) {
		_firstFoundedPreCost = firstFoundedPreCost;
	}

	@Override
	public double getFirstFoundedJiananCost() {
		return _firstFoundedJiananCost;
	}

	@Override
	public void setFirstFoundedJiananCost(double firstFoundedJiananCost) {
		_firstFoundedJiananCost = firstFoundedJiananCost;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Project.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Project toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Project)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectImpl projectImpl = new ProjectImpl();

		projectImpl.setProjectId(getProjectId());
		projectImpl.setGroupId(getGroupId());
		projectImpl.setCompanyId(getCompanyId());
		projectImpl.setUserId(getUserId());
		projectImpl.setUserName(getUserName());
		projectImpl.setCreateTime(getCreateTime());
		projectImpl.setModifiedTime(getModifiedTime());
		projectImpl.setConstructionCode(getConstructionCode());
		projectImpl.setProjNum(getProjNum());
		projectImpl.setSortNo(getSortNo());
		projectImpl.setProjStatus(getProjStatus());
		projectImpl.setIndustryCategory(getIndustryCategory());
		projectImpl.setManageAttribute(getManageAttribute());
		projectImpl.setIsMajor(getIsMajor());
		projectImpl.setProjSource(getProjSource());
		projectImpl.setBelongCounty(getBelongCounty());
		projectImpl.setProjAttr(getProjAttr());
		projectImpl.setStartDate(getStartDate());
		projectImpl.setEndDate(getEndDate());
		projectImpl.setProjName(getProjName());
		projectImpl.setLocation(getLocation());
		projectImpl.setInvolveCounty(getInvolveCounty());
		projectImpl.setPlanRedLine(getPlanRedLine());
		projectImpl.setRoadLevel(getRoadLevel());
		projectImpl.setRoadTechLevel(getRoadTechLevel());
		projectImpl.setStartNode(getStartNode());
		projectImpl.setEndNode(getEndNode());
		projectImpl.setPlanStartDate(getPlanStartDate());
		projectImpl.setPlanEndDate(getPlanEndDate());
		projectImpl.setIntroduction(getIntroduction());
		projectImpl.setPlanTotleInvestment(getPlanTotleInvestment());
		projectImpl.setFeasibilityTotleInvestment(getFeasibilityTotleInvestment());
		projectImpl.setFeasibilityPreCost(getFeasibilityPreCost());
		projectImpl.setFeasibilityJiananCost(getFeasibilityJiananCost());
		projectImpl.setFirstFoundedTotleInvestment(getFirstFoundedTotleInvestment());
		projectImpl.setFirstFoundedPreCost(getFirstFoundedPreCost());
		projectImpl.setFirstFoundedJiananCost(getFirstFoundedJiananCost());

		projectImpl.resetOriginalValues();

		return projectImpl;
	}

	@Override
	public int compareTo(Project project) {
		int value = 0;

		if (getSortNo() < project.getSortNo()) {
			value = -1;
		}
		else if (getSortNo() > project.getSortNo()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getProjectId() < project.getProjectId()) {
			value = -1;
		}
		else if (getProjectId() > project.getProjectId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Project)) {
			return false;
		}

		Project project = (Project)obj;

		long primaryKey = project.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Project> toCacheModel() {
		ProjectCacheModel projectCacheModel = new ProjectCacheModel();

		projectCacheModel.projectId = getProjectId();

		projectCacheModel.groupId = getGroupId();

		projectCacheModel.companyId = getCompanyId();

		projectCacheModel.userId = getUserId();

		projectCacheModel.userName = getUserName();

		String userName = projectCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			projectCacheModel.userName = null;
		}

		Date createTime = getCreateTime();

		if (createTime != null) {
			projectCacheModel.createTime = createTime.getTime();
		}
		else {
			projectCacheModel.createTime = Long.MIN_VALUE;
		}

		Date modifiedTime = getModifiedTime();

		if (modifiedTime != null) {
			projectCacheModel.modifiedTime = modifiedTime.getTime();
		}
		else {
			projectCacheModel.modifiedTime = Long.MIN_VALUE;
		}

		projectCacheModel.constructionCode = getConstructionCode();

		String constructionCode = projectCacheModel.constructionCode;

		if ((constructionCode != null) && (constructionCode.length() == 0)) {
			projectCacheModel.constructionCode = null;
		}

		projectCacheModel.projNum = getProjNum();

		String projNum = projectCacheModel.projNum;

		if ((projNum != null) && (projNum.length() == 0)) {
			projectCacheModel.projNum = null;
		}

		projectCacheModel.sortNo = getSortNo();

		projectCacheModel.projStatus = getProjStatus();

		projectCacheModel.industryCategory = getIndustryCategory();

		projectCacheModel.manageAttribute = getManageAttribute();

		projectCacheModel.isMajor = getIsMajor();

		projectCacheModel.projSource = getProjSource();

		projectCacheModel.belongCounty = getBelongCounty();

		projectCacheModel.projAttr = getProjAttr();

		Date startDate = getStartDate();

		if (startDate != null) {
			projectCacheModel.startDate = startDate.getTime();
		}
		else {
			projectCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			projectCacheModel.endDate = endDate.getTime();
		}
		else {
			projectCacheModel.endDate = Long.MIN_VALUE;
		}

		projectCacheModel.projName = getProjName();

		String projName = projectCacheModel.projName;

		if ((projName != null) && (projName.length() == 0)) {
			projectCacheModel.projName = null;
		}

		projectCacheModel.location = getLocation();

		String location = projectCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			projectCacheModel.location = null;
		}

		projectCacheModel.involveCounty = getInvolveCounty();

		String involveCounty = projectCacheModel.involveCounty;

		if ((involveCounty != null) && (involveCounty.length() == 0)) {
			projectCacheModel.involveCounty = null;
		}

		projectCacheModel.planRedLine = getPlanRedLine();

		projectCacheModel.roadLevel = getRoadLevel();

		projectCacheModel.roadTechLevel = getRoadTechLevel();

		Date startNode = getStartNode();

		if (startNode != null) {
			projectCacheModel.startNode = startNode.getTime();
		}
		else {
			projectCacheModel.startNode = Long.MIN_VALUE;
		}

		Date endNode = getEndNode();

		if (endNode != null) {
			projectCacheModel.endNode = endNode.getTime();
		}
		else {
			projectCacheModel.endNode = Long.MIN_VALUE;
		}

		Date planStartDate = getPlanStartDate();

		if (planStartDate != null) {
			projectCacheModel.planStartDate = planStartDate.getTime();
		}
		else {
			projectCacheModel.planStartDate = Long.MIN_VALUE;
		}

		Date planEndDate = getPlanEndDate();

		if (planEndDate != null) {
			projectCacheModel.planEndDate = planEndDate.getTime();
		}
		else {
			projectCacheModel.planEndDate = Long.MIN_VALUE;
		}

		projectCacheModel.introduction = getIntroduction();

		String introduction = projectCacheModel.introduction;

		if ((introduction != null) && (introduction.length() == 0)) {
			projectCacheModel.introduction = null;
		}

		projectCacheModel.planTotleInvestment = getPlanTotleInvestment();

		projectCacheModel.feasibilityTotleInvestment = getFeasibilityTotleInvestment();

		projectCacheModel.feasibilityPreCost = getFeasibilityPreCost();

		projectCacheModel.feasibilityJiananCost = getFeasibilityJiananCost();

		projectCacheModel.firstFoundedTotleInvestment = getFirstFoundedTotleInvestment();

		projectCacheModel.firstFoundedPreCost = getFirstFoundedPreCost();

		projectCacheModel.firstFoundedJiananCost = getFirstFoundedJiananCost();

		return projectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(75);

		sb.append("{projectId=");
		sb.append(getProjectId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createTime=");
		sb.append(getCreateTime());
		sb.append(", modifiedTime=");
		sb.append(getModifiedTime());
		sb.append(", constructionCode=");
		sb.append(getConstructionCode());
		sb.append(", projNum=");
		sb.append(getProjNum());
		sb.append(", sortNo=");
		sb.append(getSortNo());
		sb.append(", projStatus=");
		sb.append(getProjStatus());
		sb.append(", industryCategory=");
		sb.append(getIndustryCategory());
		sb.append(", manageAttribute=");
		sb.append(getManageAttribute());
		sb.append(", isMajor=");
		sb.append(getIsMajor());
		sb.append(", projSource=");
		sb.append(getProjSource());
		sb.append(", belongCounty=");
		sb.append(getBelongCounty());
		sb.append(", projAttr=");
		sb.append(getProjAttr());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", projName=");
		sb.append(getProjName());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", involveCounty=");
		sb.append(getInvolveCounty());
		sb.append(", planRedLine=");
		sb.append(getPlanRedLine());
		sb.append(", roadLevel=");
		sb.append(getRoadLevel());
		sb.append(", roadTechLevel=");
		sb.append(getRoadTechLevel());
		sb.append(", startNode=");
		sb.append(getStartNode());
		sb.append(", endNode=");
		sb.append(getEndNode());
		sb.append(", planStartDate=");
		sb.append(getPlanStartDate());
		sb.append(", planEndDate=");
		sb.append(getPlanEndDate());
		sb.append(", introduction=");
		sb.append(getIntroduction());
		sb.append(", planTotleInvestment=");
		sb.append(getPlanTotleInvestment());
		sb.append(", feasibilityTotleInvestment=");
		sb.append(getFeasibilityTotleInvestment());
		sb.append(", feasibilityPreCost=");
		sb.append(getFeasibilityPreCost());
		sb.append(", feasibilityJiananCost=");
		sb.append(getFeasibilityJiananCost());
		sb.append(", firstFoundedTotleInvestment=");
		sb.append(getFirstFoundedTotleInvestment());
		sb.append(", firstFoundedPreCost=");
		sb.append(getFirstFoundedPreCost());
		sb.append(", firstFoundedJiananCost=");
		sb.append(getFirstFoundedJiananCost());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(115);

		sb.append("<model><model-name>");
		sb.append("com.justonetech.proj.model.Project");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createTime</column-name><column-value><![CDATA[");
		sb.append(getCreateTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedTime</column-name><column-value><![CDATA[");
		sb.append(getModifiedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>constructionCode</column-name><column-value><![CDATA[");
		sb.append(getConstructionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projNum</column-name><column-value><![CDATA[");
		sb.append(getProjNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sortNo</column-name><column-value><![CDATA[");
		sb.append(getSortNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projStatus</column-name><column-value><![CDATA[");
		sb.append(getProjStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>industryCategory</column-name><column-value><![CDATA[");
		sb.append(getIndustryCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manageAttribute</column-name><column-value><![CDATA[");
		sb.append(getManageAttribute());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isMajor</column-name><column-value><![CDATA[");
		sb.append(getIsMajor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projSource</column-name><column-value><![CDATA[");
		sb.append(getProjSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>belongCounty</column-name><column-value><![CDATA[");
		sb.append(getBelongCounty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projAttr</column-name><column-value><![CDATA[");
		sb.append(getProjAttr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projName</column-name><column-value><![CDATA[");
		sb.append(getProjName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>involveCounty</column-name><column-value><![CDATA[");
		sb.append(getInvolveCounty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>planRedLine</column-name><column-value><![CDATA[");
		sb.append(getPlanRedLine());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roadLevel</column-name><column-value><![CDATA[");
		sb.append(getRoadLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roadTechLevel</column-name><column-value><![CDATA[");
		sb.append(getRoadTechLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startNode</column-name><column-value><![CDATA[");
		sb.append(getStartNode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endNode</column-name><column-value><![CDATA[");
		sb.append(getEndNode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>planStartDate</column-name><column-value><![CDATA[");
		sb.append(getPlanStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>planEndDate</column-name><column-value><![CDATA[");
		sb.append(getPlanEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>introduction</column-name><column-value><![CDATA[");
		sb.append(getIntroduction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>planTotleInvestment</column-name><column-value><![CDATA[");
		sb.append(getPlanTotleInvestment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feasibilityTotleInvestment</column-name><column-value><![CDATA[");
		sb.append(getFeasibilityTotleInvestment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feasibilityPreCost</column-name><column-value><![CDATA[");
		sb.append(getFeasibilityPreCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feasibilityJiananCost</column-name><column-value><![CDATA[");
		sb.append(getFeasibilityJiananCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstFoundedTotleInvestment</column-name><column-value><![CDATA[");
		sb.append(getFirstFoundedTotleInvestment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstFoundedPreCost</column-name><column-value><![CDATA[");
		sb.append(getFirstFoundedPreCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstFoundedJiananCost</column-name><column-value><![CDATA[");
		sb.append(getFirstFoundedJiananCost());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Project.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Project.class
		};
	private long _projectId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createTime;
	private Date _modifiedTime;
	private String _constructionCode;
	private String _projNum;
	private int _sortNo;
	private long _projStatus;
	private long _industryCategory;
	private long _manageAttribute;
	private boolean _isMajor;
	private long _projSource;
	private long _belongCounty;
	private long _projAttr;
	private Date _startDate;
	private Date _endDate;
	private String _projName;
	private String _location;
	private String _involveCounty;
	private double _planRedLine;
	private long _roadLevel;
	private long _roadTechLevel;
	private Date _startNode;
	private Date _endNode;
	private Date _planStartDate;
	private Date _planEndDate;
	private String _introduction;
	private double _planTotleInvestment;
	private double _feasibilityTotleInvestment;
	private double _feasibilityPreCost;
	private double _feasibilityJiananCost;
	private double _firstFoundedTotleInvestment;
	private double _firstFoundedPreCost;
	private double _firstFoundedJiananCost;
	private Project _escapedModel;
}